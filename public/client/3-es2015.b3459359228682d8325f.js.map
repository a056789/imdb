{"version":3,"sources":["webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/primary-facts-panel/primary-facts-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/primary-facts-panel/primary-facts-panel.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/crupdate-credit-modal/crupdate-credit-modal.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/crupdate-credit-modal/crupdate-credit-modal.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/credits-panel/credits-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/credits-panel/credits-panel.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/episodes-panel/episodes-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/episodes-panel/episodes-panel.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/seasons-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/seasons-panel.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/images-panel/images-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/images-panel/images-panel.component.ts","webpack:///src/common/tags/tags-manager/tags-manager.component.html","webpack:///src/common/tags/tags-manager/tags-manager.component.ts","webpack:///src/common/tags/tags-manager/select-tags-modal/select-tags-modal.component.ts","webpack:///src/common/tags/tags-manager/select-tags-modal/select-tags-modal.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/tags-panel/tags-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/tags-panel/tags-panel.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/crupdate-title.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/crupdate-title.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title-routing.module.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/crupdate-title-resolver.service.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title.module.ts"],"names":["PrimaryFactsPanelComponent","store","fb","route","uploadQueue","settings","router","titles","toast","poster$","BehaviorSubject","form","this","group","name","required","minLength","is_series","language","tagline","maxLength","poster","backdrop","description","budget","min","revenue","runtime","max","country","popularity","certification","release_date","allow_update","certificationOptions","getJson","dispatch","select","title","pipe","filter","t","id","take","subscribe","patchValue","split","next","get","valueChanges","value","type","types","image","then","upload","start","uri","httpParams","diskPrefix","fileEntry","url","titleId","selectSnapshot","update","create","finalize","response","open","TITLE_UPDATE_SUCCESS","TITLE_CREATE_SUCCESS","navigate","includes","replace","submit","uploadImage","loading","languageOptions","CrupdateCreditModalComponent","actions$","dialogRef","valueLists","data","character","department","job","availableJobs","credit","pivot","tmdbJobs","forEach","jobGroup","jobs","map","jobName","filteredJobs","startWith","q","v","toLowerCase","slice","action","getPayload","mediaItem","close","CREDIT_UPDATE_SUCCESS","CREDIT_ADD_SUCCESS","errResponse","message","payload","PERSON","e","find","option","confirm","CreditsPanelComponent","dialog","datatable","init","changes","currentValue","getCast","credits","getCrew","destroy","body","ok","afterClosed","confirmed","CREDIT_REMOVE_SUCCESS","previousIndex","currentIndex","openCrupdateCreditModal","changeCreditsOrder","CrupdateEpisodeModalComponent","episode$","errors$","episodeForm","episode_number","episode","bindToStoreEpisode","setTimeout","loadEpisodeCredits","season","episode_count","updateEpisode","createEpisode","EPISODE_CREATE_SUCCESS","episodes","seasons","s","length","errors","EPISODE_UPDATE_SUCCESS","number","season_number","toPromise","uploadPoster","EpisodesPanelComponent","trackByFn","i","episodeNum","snapshot","params","episodeNumber","openCrupdateEpisodeModal","EPISODE_DELETE_SUCCESS","panelClass","SeasonsPanelComponent","modal","el","activeSeason$","seasonNumber","nativeElement","querySelector","scrollIntoView","behavior","block","inline","SEASON_CREATE_SUCCESS","bodyBold","SEASON_DELETE_SUCCESS","index","ImagesPanelComponent","images","viewportRuler","dropListEnterPredicate","drag","drop","placeholder","activeContainer","phElement","element","sourceElement","dropContainer","dropElement","dragIndex","__indexOf","parentElement","children","source","dropIndex","sourceIndex","style","width","clientWidth","height","clientHeight","removeChild","targetIndex","target","display","insertBefore","nextSibling","_dropListRef","enter","_dragRef","offsetLeft","offsetTop","modelId","IMAGE_CREATE_SUCCESS","IMAGE_DELETE_SUCCESS","point","getPointerPositionOnPage","event","listGroup","_items","dropList","x","y","top","bottom","left","right","getBoundingClientRect","parent","appendChild","startsWith","touches","changedTouches","scrollPosition","getViewportScrollPosition","pageX","pageY","dropListDropped","collection","node","Array","prototype","indexOf","call","TagsManagerComponent","tagService","readonly","pluralName","formControl","selectedTags$","existingTags$","suggestedTags$","perPage","tagType","pagination","tag","suggestions","selectTags","skipPropagate","override","fn","propagateChange","tags","options","newTags","trim","reset","tagName","selectedTags","splice","tagString","provide","useExisting","multi","SelectTagsModalComponent","selectedTagsControl","TagsPanelComponent","getTagObservable","beforeClosed","tagNames","TAG_DETACH_SUCCESS","keywords","genres","countries","openTagManagerModal","CrupdateTitleComponent","activePanel$","api","queryParams","active","routes","path","component","resolve","CrupdateTitleResolverService","state","fullCredits","skipUpdating","allVideos","catchError","fallbackUri","mergeMap","of","permissions","CrupdateTitleRoutingModule","forChild","CrupdateTitleModule"],"mappings":"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","file":"x","sourcesContent":["<form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n    <div class=\"poster-container\">\r\n        <media-image [src]=\"poster$ | async\"></media-image>\r\n        <div class=\"many-inputs\">\r\n            <div class=\"input-container\">\r\n                <label for=\"name\" trans>Title</label>\r\n                <input type=\"text\" formControlName=\"name\" id=\"name\" minlength=\"1\" maxlength=\"250\" required>\r\n            </div>\r\n\r\n           <div class=\"inline-container\">\r\n               <div class=\"input-container\">\r\n                   <label for=\"type\" trans>Type</label>\r\n                   <select formControlName=\"is_series\" id=\"type\" required>\r\n                       <option [ngValue]=\"false\" trans>Movie</option>\r\n                       <option [ngValue]=\"true\" trans>TV Series</option>\r\n                   </select>\r\n               </div>\r\n\r\n               <div class=\"input-container\">\r\n                   <label for=\"allow_update\" trans>Allow Auto Update</label>\r\n                   <select formControlName=\"allow_update\" id=\"allow_update\" required>\r\n                       <option [ngValue]=\"true\" trans>Yes</option>\r\n                       <option [ngValue]=\"false\" trans>No</option>\r\n                   </select>\r\n               </div>\r\n           </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"poster\" trans>Poster</label>\r\n                <div class=\"input-with-action action-left\">\r\n                    <button type=\"button\" mat-flat-button color=\"accent\" (click)=\"uploadImage('poster')\" [matTooltip]=\"'Upload poster' | trans\">\r\n                        <mat-icon svgIcon=\"file-upload\"></mat-icon>\r\n                    </button>\r\n                    <input type=\"text\" formControlName=\"poster\" id=\"poster\" minlength=\"1\" maxlength=\"250\">\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"backdrop\" trans>Backdrop</label>\r\n                <div class=\"input-with-action action-left\">\r\n                    <button type=\"button\" mat-flat-button color=\"accent\" (click)=\"uploadImage('backdrop')\" [matTooltip]=\"'Upload backdrop' | trans\">\r\n                        <mat-icon svgIcon=\"file-upload\"></mat-icon>\r\n                    </button>\r\n                    <input type=\"text\" formControlName=\"backdrop\" id=\"backdrop\" minlength=\"1\" maxlength=\"250\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"inline-container\">\r\n        <div class=\"input-container\">\r\n            <label for=\"release_date\" trans>Release Date</label>\r\n            <input type=\"date\" formControlName=\"release_date\" id=\"release_date\" placeholder=\"YYYY-MM-DD\" required>\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"tagline\" trans>Tagline</label>\r\n            <input type=\"text\" formControlName=\"tagline\" id=\"tagline\" minlength=\"1\" maxlength=\"250\">\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"input-container\">\r\n        <label for=\"description\" trans>Overview</label>\r\n        <textarea type=\"text\" formControlName=\"description\" id=\"description\" minlength=\"1\" cdkTextareaAutosize cdkAutosizeMinRows=\"6\"></textarea>\r\n    </div>\r\n\r\n    <div class=\"inline-container\">\r\n        <div class=\"input-container\">\r\n            <label for=\"runtime\" trans>Runtime</label>\r\n            <input type=\"number\" formControlName=\"runtime\" id=\"runtime\" min=\"1\" max=\"500\">\r\n        </div>\r\n\r\n        <div class=\"input-container certification-input-container\">\r\n            <label for=\"certification\" trans>Certification</label>\r\n            <select formControlName=\"certification\" id=\"certification\">\r\n                <option [ngValue]=\"certification\" *ngFor=\"let certification of certificationOptions\">{{certification}}</option>\r\n            </select>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"inline-container\">\r\n        <div class=\"input-container\">\r\n            <label for=\"budget\" trans>Budget</label>\r\n            <input type=\"number\" formControlName=\"budget\" id=\"budget\" min=\"1\">\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"revenue\" trans>Revenue</label>\r\n            <input type=\"number\" formControlName=\"revenue\" id=\"revenue\" min=\"1\">\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"inline-container\">\r\n        <div class=\"input-container\">\r\n            <label for=\"popularity\" trans>Popularity</label>\r\n            <input type=\"number\" formControlName=\"popularity\" id=\"popularity\" min=\"1\" max=\"1000\">\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"language\" trans>Language</label>\r\n            <select formControlName=\"language\" id=\"language\" required>\r\n                <option [value]=\"language.code\" *ngFor=\"let language of languageOptions$ | async\">{{language.name}}</option>\r\n            </select>\r\n        </div>\r\n    </div>\r\n\r\n    <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>Save</button>\r\n</form>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    OnInit,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {FormBuilder, Validators} from '@angular/forms';\r\nimport {Select, Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {Title} from '../../../../../../models/title';\r\nimport {LoadSelectOptions, ToggleLoading} from '../../state/crupdate-title-actions';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {UploadQueueService} from '../../../../../../../common/uploads/upload-queue/upload-queue.service';\r\nimport {LanguageListItem} from '../../../../../../../common/core/services/value-lists.service';\r\nimport {openUploadWindow} from '../../../../../../../common/uploads/utils/open-upload-window';\r\nimport {UploadInputTypes} from '../../../../../../../common/uploads/upload-input-config';\r\nimport {filter, finalize, take} from 'rxjs/operators';\r\nimport {Settings} from '../../../../../../../common/core/config/settings.service';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {TitlesService} from '../../../../titles.service';\r\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\r\n\r\n@Component({\r\n    selector: 'primary-facts-panel',\r\n    templateUrl: './primary-facts-panel.component.html',\r\n    styleUrls: ['./primary-facts-panel.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    providers: [UploadQueueService],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PrimaryFactsPanelComponent implements OnInit {\r\n    @Select(CrupdateTitleState.title) title$: Observable<Title>;\r\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\r\n    @Select(CrupdateTitleState.languageOptions) languageOptions$: Observable<LanguageListItem[]>;\r\n    public certificationOptions: string[];\r\n    public poster$ = new BehaviorSubject<string>(null);\r\n\r\n    public form = this.fb.group({\r\n        name: ['', [Validators.required, Validators.minLength(1)]],\r\n        is_series: [false, [Validators.required]],\r\n        language: [''],\r\n        tagline: ['', [Validators.minLength(1), Validators.maxLength(250)]],\r\n        poster: ['', [Validators.minLength(1), Validators.maxLength(250)]],\r\n        backdrop: ['', [Validators.minLength(1), Validators.maxLength(250)]],\r\n        description: ['', [Validators.minLength(1)]],\r\n        budget: ['', Validators.min(1)],\r\n        revenue: ['', Validators.min(1)],\r\n        runtime: ['', [Validators.min(1), Validators.max(300)]],\r\n        country: ['', [Validators.minLength(1), Validators.maxLength(50)]],\r\n        popularity: [1, [Validators.min(1), Validators.max(100)]],\r\n        certification: ['pg'],\r\n        release_date: [''],\r\n        allow_update: [true],\r\n    });\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private fb: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private uploadQueue: UploadQueueService,\r\n        private settings: Settings,\r\n        private router: Router,\r\n        private titles: TitlesService,\r\n        private toast: Toast,\r\n    ) {\r\n        this.certificationOptions = this.settings.getJson('browse.ageRatings');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.store.dispatch(new LoadSelectOptions());\r\n\r\n        this.store.select(CrupdateTitleState.title)\r\n            .pipe(filter(t => !!t.id), take(1))\r\n            .subscribe(title => {\r\n                this.form.patchValue({\r\n                    ...title,\r\n                    release_date: title.release_date ? title.release_date.split('T')[0] : null,\r\n                });\r\n                this.poster$.next(title.poster);\r\n            });\r\n\r\n        this.form.get('poster').valueChanges.subscribe(value => {\r\n            this.poster$.next(value);\r\n        });\r\n    }\r\n\r\n    public uploadImage(type: 'poster'|'backdrop') {\r\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\r\n            const params = {\r\n                uri: 'uploads/images',\r\n                httpParams: {\r\n                    diskPrefix: `media-images/${type}s`\r\n                },\r\n            };\r\n            this.uploadQueue.start(upload, params).subscribe(fileEntry => {\r\n                this.form.patchValue({\r\n                    [type]: fileEntry.fileEntry.url\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public submit() {\r\n        this.store.dispatch(new ToggleLoading(true));\r\n        const titleId = this.store.selectSnapshot(CrupdateTitleState.title).id;\r\n        const request = titleId ?\r\n            this.titles.update(titleId, this.form.value) :\r\n            this.titles.create(this.form.value);\r\n        request\r\n            .pipe(finalize(() => this.store.dispatch(new ToggleLoading(false))))\r\n            .subscribe(response => {\r\n            this.toast.open(titleId ? MESSAGES.TITLE_UPDATE_SUCCESS : MESSAGES.TITLE_CREATE_SUCCESS);\r\n            if (titleId) {\r\n                this.router.navigate([this.router.url.includes('admin') ? '/admin/titles' : this.router.url.split('?')[0].replace('/edit', '')]);\r\n            } else {\r\n                this.router.navigate([this.router.url.replace('new', '' + response.title.id), 'edit']);\r\n            }\r\n        });\r\n    }\r\n}\r\n","<div class=\"modal-header\">\r\n    <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"data.credit\" trans>Edit</h2>\r\n    <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"!data.credit\" trans>Create</h2>\r\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style icon-button\"><mat-icon svgIcon=\"close\"></mat-icon></button>\r\n</div>\r\n\r\n<form autocomplete=\"off\" (ngSubmit)=\"confirm()\" [formGroup]=\"form\" ngNativeValidate>\r\n    <mat-dialog-content class=\"many-inputs\">\r\n        <div class=\"input-container\" *ngIf=\"data.credit\">\r\n            <label for=\"name\" trans>Person</label>\r\n            <input type=\"text\" id=\"name\" [value]=\"credit?.name\" disabled>\r\n        </div>\r\n\r\n        <search-input\r\n                *ngIf=\"!data.credit\"\r\n                placeholder=\"Search for a person...\"\r\n                label=\"Person\"\r\n                [type]=\"getPersonType()\"\r\n                [resetInputOnSelect]=\"false\"\r\n                searchProvider=\"local\"\r\n                (resultSelected)=\"setCredit($event)\"\r\n        ></search-input>\r\n\r\n        <div class=\"input-container\" *ngIf=\"data.type === 'cast'\">\r\n            <label for=\"character\" trans>Character</label>\r\n            <input type=\"text\" id=\"character\" formControlName=\"character\" required>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"data.type === 'crew'\">\r\n            <div class=\"input-container\">\r\n                <label for=\"job\" trans>Job</label>\r\n                <input type=\"text\" id=\"job\" formControlName=\"job\" [matAutocomplete]=\"auto\" required>\r\n            </div>\r\n            <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"jobSelected($event)\">\r\n                <mat-option *ngFor=\"let value of filteredJobs | async\" [value]=\"value.job\" class=\"multiline-mat-menu-item\">\r\n                    <div class=\"title\"><span trans>Job</span>: {{value.job}}</div>\r\n                    <div class=\"description\"><span trans>Department</span>: {{value.department}}</div>\r\n                </mat-option>\r\n            </mat-autocomplete>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"department\" trans>Department</label>\r\n                <input type=\"text\" id=\"department\" formControlName=\"department\" required>\r\n            </div>\r\n        </ng-container>\r\n    </mat-dialog-content>\r\n\r\n    <mat-dialog-actions>\r\n        <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\r\n        <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>Save</button>\r\n    </mat-dialog-actions>\r\n</form>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    Inject,\r\n    OnInit,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {TitleCredit} from '../../../../../../models/title';\r\nimport {Observable} from 'rxjs';\r\nimport {FormBuilder} from '@angular/forms';\r\nimport {Actions, Select, Store} from '@ngxs/store';\r\nimport {AddCredit, UpdateCredit} from '../../state/crupdate-title-actions';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {Creditable} from '../../../../../people/creditable';\r\nimport {MEDIA_TYPE} from '../../../../../media-type';\r\nimport {ValueLists} from '../../../../../../../common/core/services/value-lists.service';\r\nimport {filter, map, startWith} from 'rxjs/operators';\r\nimport {MatAutocompleteSelectedEvent} from '@angular/material/autocomplete';\r\nimport {BackendErrorResponse} from '../../../../../../../common/core/types/backend-error-response';\r\n\r\ninterface CrupdateCreditModalData {\r\n    credit?: TitleCredit;\r\n    type: 'cast'|'crew';\r\n    mediaItem: Creditable;\r\n}\r\n\r\ninterface JobList {\r\n    department: string;\r\n    jobs: string[];\r\n}\r\n\r\n@Component({\r\n    selector: 'crupdate-credit-modal',\r\n    templateUrl: './crupdate-credit-modal.component.html',\r\n    styleUrls: ['./crupdate-credit-modal.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CrupdateCreditModalComponent implements OnInit {\r\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\r\n    public credit: TitleCredit;\r\n\r\n    public form = this.fb.group({\r\n        character: [''],\r\n        department: [''],\r\n        job: [''],\r\n    });\r\n\r\n    public availableJobs: {job: string, department: string}[] = [];\r\n    public filteredJobs: Observable<{job: string, department: string}[]>;\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private toast: Toast,\r\n        private fb: FormBuilder,\r\n        private actions$: Actions,\r\n        private dialogRef: MatDialogRef<CrupdateCreditModalComponent>,\r\n        private valueLists: ValueLists,\r\n        @Inject(MAT_DIALOG_DATA) public data: CrupdateCreditModalData,\r\n    ) {\r\n        if (this.data.credit) {\r\n            this.credit = this.data.credit;\r\n            this.form.patchValue(this.data.credit.pivot);\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.valueLists.get(['tmdbJobs']).subscribe(response => {\r\n            this.availableJobs = [];\r\n            (response.tmdbJobs as JobList[]).forEach(jobGroup => {\r\n                const jobs = jobGroup.jobs.map(jobName => {\r\n                    return {job: jobName, department: jobGroup.department};\r\n                });\r\n                this.availableJobs = [...this.availableJobs, ...jobs];\r\n            });\r\n\r\n            this.filteredJobs = this.form.get('job').valueChanges\r\n                .pipe(\r\n                    startWith(''),\r\n                    map(q => this.availableJobs.filter(v => {\r\n                        q = q.toLowerCase();\r\n                        return !q || v.job.toLowerCase().includes(q) || v.department.toLowerCase().includes(q);\r\n                    }).slice(0, 10))\r\n                );\r\n        });\r\n    }\r\n\r\n    public confirm() {\r\n        const action = this.data.credit\r\n            ? new UpdateCredit(this.credit.pivot.id, this.getPayload())\r\n            : new AddCredit(this.credit?.id, this.data.mediaItem, this.getPayload());\r\n        this.store.dispatch(action).subscribe(() => {\r\n            this.close();\r\n            this.toast.open(this.data.credit ? MESSAGES.CREDIT_UPDATE_SUCCESS : MESSAGES.CREDIT_ADD_SUCCESS);\r\n        }, (errResponse: BackendErrorResponse) => {\r\n            this.toast.open(errResponse.message);\r\n        });\r\n    }\r\n\r\n    public close() {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    public setCredit(credit: TitleCredit) {\r\n        this.credit = credit;\r\n    }\r\n\r\n    private getPayload() {\r\n        const payload = this.form.value;\r\n        if (this.data.type === 'cast') {\r\n            payload.department = 'cast';\r\n            payload.job = 'cast';\r\n        }\r\n        return payload;\r\n    }\r\n\r\n    public getPersonType() {\r\n        return MEDIA_TYPE.PERSON;\r\n    }\r\n\r\n    public jobSelected(e: MatAutocompleteSelectedEvent) {\r\n        const value = this.availableJobs.find(v => v.job === e.option.value);\r\n        this.form.patchValue({job: value.job, department: value.department});\r\n    }\r\n}\r\n","<datatable-header>\r\n    <button type=\"button\" mat-raised-button color=\"accent\" leftContent (click)=\"openCrupdateCreditModal()\" trans>Add Credit</button>\r\n</datatable-header>\r\n\r\n<table class=\"material-table\" cdkDropList (cdkDropListDropped)=\"changeCreditsOrder($event)\" [cdkDropListDisabled]=\"type === 'crew'\">\r\n    <thead>\r\n    <tr>\r\n        <th table-sort-header trans>Name</th>\r\n        <th table-sort-header=\"pivot.character\" *ngIf=\"type === 'cast'\" trans>Character</th>\r\n        <th table-sort-header=\"pivot.department\" *ngIf=\"type === 'crew'\" trans>Department</th>\r\n        <th table-sort-header=\"pivot.job\" *ngIf=\"type === 'crew'\" trans>Job</th>\r\n        <th></th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n    <tr *ngFor=\"let person of datatable.data$ | async\" cdkDrag>\r\n        <td>\r\n           <div class=\"column-with-image\">\r\n               <button type=\"button\" mat-icon-button cdkDragHandle *ngIf=\"type === 'cast'\">\r\n                   <mat-icon svgIcon=\"drag-handle\"></mat-icon>\r\n               </button>\r\n               <media-image [src]=\"person.poster\" size=\"small\"></media-image>\r\n               <span>{{person.name}}</span>\r\n           </div>\r\n            <div *cdkDragPreview>{{person.name}}</div>\r\n        </td>\r\n        <td *ngIf=\"type === 'cast'\">{{person.pivot.character}}</td>\r\n        <td *ngIf=\"type === 'crew'\">{{person.pivot.department}}</td>\r\n        <td *ngIf=\"type === 'crew'\">{{person.pivot.job}}</td>\r\n        <td class=\"edit-column\">\r\n            <button type=\"button\" mat-icon-button (click)=\"openCrupdateCreditModal(person)\">\r\n                <mat-icon svgIcon=\"edit\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" mat-icon-button (click)=\"detachCredit(person)\">\r\n                <mat-icon svgIcon=\"close\"></mat-icon>\r\n            </button>\r\n        </td>\r\n    </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<no-results-message *ngIf=\"!(datatable.data$ | async).length\" svgImage=\"awards.svg\">\r\n    <span primary-text trans>Nothing to Display.</span>\r\n</no-results-message>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    Input,\r\n    OnChanges, OnDestroy,\r\n    OnInit,\r\n    SimpleChange\r\n} from '@angular/core';\r\nimport {Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {TitleCredit} from '../../../../../../models/title';\r\nimport {CrupdateCreditModalComponent} from '../crupdate-credit-modal/crupdate-credit-modal.component';\r\nimport {ChangeCreditOrder, RemoveCredit} from '../../state/crupdate-title-actions';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {CdkDragDrop} from '@angular/cdk/drag-drop';\r\nimport {Person} from '../../../../../../models/person';\r\nimport {Creditable} from '../../../../../people/creditable';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {Toast} from '@common/core/ui/toast.service';\r\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\nimport {DatatableService} from '@common/datatable/datatable.service';\r\n\r\n@Component({\r\n    selector: 'credits-panel',\r\n    templateUrl: './credits-panel.component.html',\r\n    styleUrls: ['./credits-panel.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [DatatableService]\r\n})\r\nexport class CreditsPanelComponent implements OnChanges, OnInit, OnDestroy {\r\n    @Input() mediaItem: Creditable;\r\n    @Input() type: 'cast'|'crew';\r\n\r\n    constructor(\r\n        private dialog: Modal,\r\n        private store: Store,\r\n        private toast: Toast,\r\n        public datatable: DatatableService<TitleCredit>,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.datatable.init();\r\n    }\r\n\r\n    ngOnChanges(changes: {mediaItem?: SimpleChange}) {\r\n        if (changes.mediaItem && changes.mediaItem.currentValue) {\r\n            this.datatable.data = this.type === 'cast' ?\r\n                this.getCast(this.mediaItem.credits) :\r\n                this.getCrew(this.mediaItem.credits);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.datatable.destroy();\r\n    }\r\n\r\n    public openCrupdateCreditModal(credit?: TitleCredit) {\r\n        this.dialog.open(\r\n            CrupdateCreditModalComponent,\r\n            {credit, type: this.type, mediaItem: this.mediaItem}\r\n        );\r\n    }\r\n\r\n    public detachCredit(credit: TitleCredit) {\r\n        this.dialog.open(ConfirmModalComponent, {\r\n            title: 'Remove Credit',\r\n            body:  'Are you sure you want to remove this credit?',\r\n            ok:    'Remove'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.store.dispatch(new RemoveCredit(this.mediaItem, credit)).subscribe(() => {\r\n                this.toast.open(MESSAGES.CREDIT_REMOVE_SUCCESS);\r\n            });\r\n        });\r\n    }\r\n\r\n    public changeCreditsOrder(e: CdkDragDrop<Person>) {\r\n        if (this.store.selectSnapshot(CrupdateTitleState.loading)) return;\r\n        this.store.dispatch(new ChangeCreditOrder(this.mediaItem, e.previousIndex, e.currentIndex, this.type));\r\n    }\r\n\r\n    public getCast(credits: TitleCredit[]) {\r\n        if ( ! credits) return [];\r\n        return credits.filter(credit => credit.pivot.department === 'cast');\r\n    }\r\n\r\n    public getCrew(credits: TitleCredit[]) {\r\n        if ( ! credits) return [];\r\n        return credits.filter(credit => credit.pivot.department !== 'cast');\r\n    }\r\n}\r\n","<div class=\"modal-header\">\r\n    <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"data.episode\" trans>Edit Episode</h2>\r\n    <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"!data.episode\" trans>Create Episode</h2>\r\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style icon-button\">\r\n        <mat-icon svgIcon=\"close\"></mat-icon>\r\n    </button>\r\n</div>\r\n\r\n<form autocomplete=\"off\" (ngSubmit)=\"confirm()\" [formGroup]=\"episodeForm\" ngNativeValidate>\r\n    <mat-dialog-content>\r\n        <mat-tab-group [dynamicHeight]=\"true\" animationDuration=\"0ms\" color=\"accent\">\r\n            <mat-tab [label]=\"'Primary Facts' | trans\">\r\n                <div class=\"many-inputs primary-facts-panel\">\r\n                    <div class=\"input-container\">\r\n                        <label for=\"name\" trans>Title</label>\r\n                        <input type=\"text\" formControlName=\"name\" id=\"name\" minlength=\"1\" maxlength=\"250\" required>\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"episode_number\" trans>Number</label>\r\n                        <input type=\"number\" formControlName=\"episode_number\" id=\"episode_number\" min=\"1\" required>\r\n                        <div class=\"error\" *ngIf=\"(errors$ | async).episode_number as epNumError\">{{epNumError}}</div>\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"poster\" trans>Poster</label>\r\n                        <div class=\"input-with-action action-left\">\r\n                            <button type=\"button\" mat-flat-button color=\"accent\" (click)=\"uploadPoster()\"\r\n                                    [matTooltip]=\"'Upload poster' | trans\">\r\n                                <mat-icon svgIcon=\"file-upload\"></mat-icon>\r\n                            </button>\r\n                            <input type=\"text\" formControlName=\"poster\" id=\"poster\" minlength=\"1\" maxlength=\"250\">\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"release_date\" trans>Release Date</label>\r\n                        <input type=\"date\" formControlName=\"release_date\" id=\"release_date\" required>\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"description\" trans>Overview</label>\r\n                        <textarea type=\"text\" formControlName=\"description\" id=\"description\" minlength=\"1\"\r\n                                  cdkTextareaAutosize cdkAutosizeMinRows=\"6\"></textarea>\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"popularity\" trans>Popularity</label>\r\n                        <input type=\"number\" formControlName=\"popularity\" id=\"popularity\" min=\"1\" max=\"1000\">\r\n                    </div>\r\n                </div>\r\n            </mat-tab>\r\n            <mat-tab [label]=\"'Cast' | trans\" [disabled]=\"!data.episode\">\r\n                <credits-panel [mediaItem]=\"episode$ | async\" type=\"cast\"></credits-panel>\r\n            </mat-tab>\r\n            <mat-tab [label]=\"'Crew' | trans\" [disabled]=\"!data.episode\">\r\n                <credits-panel [mediaItem]=\"episode$ | async\" type=\"crew\"></credits-panel>\r\n            </mat-tab>\r\n        </mat-tab-group>\r\n    </mat-dialog-content>\r\n\r\n    <mat-dialog-actions>\r\n        <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\r\n        <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>Save</button>\r\n    </mat-dialog-actions>\r\n</form>","import {Component, OnInit, ViewEncapsulation, ChangeDetectionStrategy, Inject} from '@angular/core';\r\nimport {Episode} from '../../../../../../../models/episode';\r\nimport {Select, Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../../state/crupdate-title-state';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {FormBuilder, Validators} from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport {CreateEpisode, LoadEpisodeCredits, UpdateEpisode} from '../../../state/crupdate-title-actions';\r\nimport {MESSAGES} from '../../../../../../../toast-messages';\r\nimport {Season} from '../../../../../../../models/season';\r\nimport {UploadQueueService} from '../../../../../../../../common/uploads/upload-queue/upload-queue.service';\r\nimport {Toast} from '../../../../../../../../common/core/ui/toast.service';\r\nimport {openUploadWindow} from '../../../../../../../../common/uploads/utils/open-upload-window';\r\nimport {UploadInputTypes} from '../../../../../../../../common/uploads/upload-input-config';\r\nimport {BackendErrorResponse} from '../../../../../../../../common/core/types/backend-error-response';\r\n\r\ninterface CrupdateEpisodeModalData {\r\n    episode?: Episode;\r\n    season?: Season;\r\n}\r\n\r\n@Component({\r\n    selector: 'crupdate-episode-modal',\r\n    templateUrl: './crupdate-episode-modal.component.html',\r\n    styleUrls: ['./crupdate-episode-modal.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [UploadQueueService],\r\n})\r\nexport class CrupdateEpisodeModalComponent implements OnInit {\r\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\r\n    public episode$: BehaviorSubject<Episode> = new BehaviorSubject(null);\r\n    public errors$: BehaviorSubject<{episode_number?: string}> = new BehaviorSubject({});\r\n\r\n    public episodeForm = this.fb.group({\r\n        name: ['', [Validators.required, Validators.minLength(1)]],\r\n        poster: ['', [Validators.minLength(1), Validators.maxLength(250)]],\r\n        description: ['', [Validators.minLength(1)]],\r\n        popularity: [50, [Validators.min(1), Validators.max(1000)]],\r\n        release_date: [''],\r\n        episode_number: [''],\r\n    });\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private toast: Toast,\r\n        private fb: FormBuilder,\r\n        private uploadQueue: UploadQueueService,\r\n        private dialogRef: MatDialogRef<CrupdateEpisodeModalComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: CrupdateEpisodeModalData,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        if (this.data.episode) {\r\n            this.bindToStoreEpisode();\r\n            this.episodeForm.patchValue({\r\n                ...this.episode$.value,\r\n                release_date: this.episode$.value.release_date.split(' ')[0]\r\n            });\r\n            setTimeout(() => this.loadEpisodeCredits());\r\n        } else {\r\n            const epNum = this.data.season ? this.data.season.episode_count + 1 : 1;\r\n            this.episodeForm.patchValue({episode_number: epNum});\r\n        }\r\n    }\r\n\r\n    public confirm() {\r\n        if (this.data.episode) {\r\n            this.updateEpisode();\r\n        } else {\r\n            this.createEpisode();\r\n        }\r\n    }\r\n\r\n    public close() {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    private createEpisode() {\r\n        this.store.dispatch(new CreateEpisode(this.data.season, this.episodeForm.value))\r\n            .subscribe(() => {\r\n                this.errors$.next({});\r\n                this.toast.open(MESSAGES.EPISODE_CREATE_SUCCESS);\r\n                const episodes = this.store.selectSnapshot(CrupdateTitleState.seasons)\r\n                    .find(s => s.id === this.data.season.id).episodes;\r\n                this.data.episode = episodes[episodes.length - 1];\r\n            }, (errResponse: BackendErrorResponse) => this.errors$.next(errResponse.errors));\r\n    }\r\n\r\n    private updateEpisode() {\r\n        this.store.dispatch(new UpdateEpisode(this.data.episode, this.episodeForm.value))\r\n            .subscribe(() => {\r\n                this.errors$.next({});\r\n                this.toast.open(MESSAGES.EPISODE_UPDATE_SUCCESS);\r\n                this.close();\r\n            }, (errResponse: BackendErrorResponse) => this.errors$.next(errResponse.errors));\r\n    }\r\n\r\n    public uploadPoster() {\r\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\r\n            const params = {\r\n                uri: 'uploads/images',\r\n                httpParams: {\r\n                    diskPrefix: 'media-images/posters'\r\n                },\r\n            };\r\n            this.uploadQueue.start(upload, params).subscribe(response => {\r\n                this.episodeForm.patchValue({\r\n                    poster: response.fileEntry.url\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private bindToStoreEpisode() {\r\n        this.store.select(CrupdateTitleState.title)\r\n            .subscribe(title => {\r\n               if (title.seasons) {\r\n                   const episode = title.seasons.find(s => s.number === this.data.episode.season_number)\r\n                       .episodes.find(e => e.episode_number === this.data.episode.episode_number);\r\n                   this.episode$.next({...episode});\r\n               }\r\n            });\r\n    }\r\n\r\n    private loadEpisodeCredits() {\r\n        if ( ! this.data.episode.credits) {\r\n            this.store.dispatch(new LoadEpisodeCredits(this.episode$.value)).toPromise();\r\n        }\r\n    }\r\n}\r\n","<datatable-header pluralResourceName=\"episodes\">\r\n    <ng-container leftContent>\r\n        <button mat-raised-button color=\"accent\" (click)=\"openCrupdateEpisodeModal()\" trans>Add Episode</button>\r\n    </ng-container>\r\n</datatable-header>\r\n<table class=\"material-table\">\r\n    <thead>\r\n    <tr>\r\n        <th table-sort-header trans>Name</th>\r\n        <th table-sort-header trans>Number</th>\r\n        <th table-sort-header trans>Release Date</th>\r\n        <th></th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n    <tr *ngFor=\"let episode of datatable.data$ | async; trackBy: trackByFn\">\r\n        <td>\r\n            <div class=\"column-with-image\">\r\n                <media-image [src]=\"episode.poster\" [alt]=\"episode.name\" size=\"small\"></media-image>\r\n                <span>{{episode.name}}</span>\r\n            </div>\r\n        </td>\r\n        <td>{{episode.episode_number}}</td>\r\n        <td>{{episode.release_date | formattedDate}}</td>\r\n        <td class=\"edit-column\">\r\n            <button type=\"button\" mat-icon-button (click)=\"openCrupdateEpisodeModal(episode)\">\r\n                <mat-icon svgIcon=\"edit\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" mat-icon-button (click)=\"deleteEpisode(episode)\">\r\n                <mat-icon svgIcon=\"close\"></mat-icon>\r\n            </button>\r\n        </td>\r\n    </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<no-results-message *ngIf=\"!(datatable.data$ | async).length\">\r\n    <span primary-text trans>Nothing to Display.</span>\r\n    <span secondary-text trans>This season does not have any episodes yet.</span>\r\n</no-results-message>\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    Input,\r\n    OnChanges, OnDestroy,\r\n    OnInit,\r\n    SimpleChange,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {Episode} from '../../../../../../models/episode';\r\nimport {DeleteEpisode} from '../../state/crupdate-title-actions';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {CrupdateEpisodeModalComponent} from '../seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component';\r\nimport {Store} from '@ngxs/store';\r\nimport {Season} from '../../../../../../models/season';\r\nimport {Modal} from '../../../../../../../common/core/ui/dialogs/modal.service';\r\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\r\nimport {ConfirmModalComponent} from '../../../../../../../common/core/ui/confirm-modal/confirm-modal.component';\r\nimport {ActivatedRoute} from '@angular/router';\r\nimport {DatatableService} from '../../../../../../../common/datatable/datatable.service';\r\n\r\n@Component({\r\n    selector: 'episodes-panel',\r\n    templateUrl: './episodes-panel.component.html',\r\n    styleUrls: ['./episodes-panel.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [DatatableService]\r\n})\r\nexport class EpisodesPanelComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\r\n    @Input() season: Season;\r\n    public trackByFn = (i: number, episode: Episode) => episode.id;\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private dialog: Modal,\r\n        private toast: Toast,\r\n        private route: ActivatedRoute,\r\n        public datatable: DatatableService<Episode>,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.datatable.init();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        const episodeNum = +this.route.snapshot.params.episodeNumber;\r\n        if (episodeNum) {\r\n            const episode = this.season.episodes.find(e => e.episode_number === episodeNum);\r\n            if (episode) {\r\n                this.openCrupdateEpisodeModal(episode);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: {season?: SimpleChange}) {\r\n        if (changes.season.currentValue && changes.season.currentValue.episodes) {\r\n            this.datatable.data = this.season.episodes;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.datatable.destroy();\r\n    }\r\n\r\n    public deleteEpisode(episode: Episode) {\r\n        this.dialog.open(ConfirmModalComponent, {\r\n            title: 'Delete Episode',\r\n            body:  'Are you sure you want to delete this episode?',\r\n            ok:    'Delete'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.store.dispatch(new DeleteEpisode(episode)).subscribe(() => {\r\n                this.toast.open(MESSAGES.EPISODE_DELETE_SUCCESS);\r\n            });\r\n        });\r\n    }\r\n\r\n    public openCrupdateEpisodeModal(episode?: Episode) {\r\n        this.dialog.open(\r\n            CrupdateEpisodeModalComponent,\r\n            {episode, season: this.season},\r\n            {panelClass: 'crupdate-episode-modal-container'}\r\n        );\r\n    }\r\n}\r\n","<ng-container *ngIf=\"seasons$ | async as seasons\">\r\n    <div class=\"header\">\r\n        <button type=\"button\" mat-raised-button color=\"accent\" (click)=\"addSeason()\" [disabled]=\"loading$ | async\">Add Season</button>\r\n    </div>\r\n\r\n    <mat-accordion>\r\n        <mat-expansion-panel [expanded]=\"(activeSeason$ | async) === season.number\" class=\"mat-elevation-z0\" [ngClass]=\"'season-' + season.number + '-panel'\" *ngFor=\"let season of seasons; trackBy: trackByFn\">\r\n            <mat-expansion-panel-header>\r\n                <mat-panel-title>\r\n                    <span trans>Season</span>\r\n                    &nbsp;\r\n                    <span>{{season.number}}</span>\r\n                </mat-panel-title>\r\n            </mat-expansion-panel-header>\r\n\r\n            <ng-template matExpansionPanelContent>\r\n                <mat-tab-group animationDuration=\"0ms\" color=\"accent\">\r\n                    <mat-tab [label]=\"'Episodes' | trans\">\r\n                        <episodes-panel [season]=\"season\"></episodes-panel>\r\n                    </mat-tab>\r\n                    <mat-tab [label]=\"'Regular Cast' | trans\">\r\n                        <credits-panel type=\"cast\" [mediaItem]=\"season\"></credits-panel>\r\n                    </mat-tab>\r\n                    <mat-tab [label]=\"'Regular Crew' | trans\">\r\n                        <credits-panel type=\"crew\" [mediaItem]=\"season\"></credits-panel>\r\n                    </mat-tab>\r\n                </mat-tab-group>\r\n            </ng-template>\r\n\r\n            <mat-action-row>\r\n                <button type=\"button\" mat-button (click)=\"maybeDeleteSeason(season)\" trans>Delete</button>\r\n            </mat-action-row>\r\n        </mat-expansion-panel>\r\n    </mat-accordion>\r\n\r\n    <no-results-message *ngIf=\"!seasons.length\">\r\n        <span primary-text trans>Nothing to Display.</span>\r\n        <span secondary-text trans>This series does not have any seasons yet.</span>\r\n    </no-results-message>\r\n</ng-container>\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    OnInit\r\n} from '@angular/core';\r\nimport {Select, Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {Season} from '../../../../../../models/season';\r\nimport {CreateSeason, DeleteSeason} from '../../state/crupdate-title-actions';\r\nimport {Modal} from '../../../../../../../common/core/ui/dialogs/modal.service';\r\nimport {ConfirmModalComponent} from '../../../../../../../common/core/ui/confirm-modal/confirm-modal.component';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\r\nimport {ActivatedRoute} from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'seasons-panel',\r\n    templateUrl: './seasons-panel.component.html',\r\n    styleUrls: ['./seasons-panel.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SeasonsPanelComponent implements OnInit, AfterViewInit {\r\n    @Select(CrupdateTitleState.seasons) seasons$: Observable<Season[]>;\r\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\r\n    public activeSeason$ = new BehaviorSubject<number>(1);\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private modal: Modal,\r\n        private toast: Toast,\r\n        private route: ActivatedRoute,\r\n        private el: ElementRef<HTMLElement>,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.activeSeason$.next(+this.route.snapshot.params.seasonNumber || 1);\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n       setTimeout(() => {\r\n           if (this.activeSeason$.value > 1) {\r\n               this.el.nativeElement.querySelector(`.season-${this.activeSeason$.value}-panel`)\r\n                   ?.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'start'});\r\n           }\r\n       });\r\n    }\r\n\r\n    public addSeason() {\r\n        this.store.dispatch(new CreateSeason()).subscribe(() => {\r\n            this.toast.open(MESSAGES.SEASON_CREATE_SUCCESS);\r\n        });\r\n    }\r\n\r\n    public maybeDeleteSeason(season: Season) {\r\n        this.modal.open(ConfirmModalComponent, {\r\n            title: 'Delete Season',\r\n            body:  'Are you sure you want to delete this season?',\r\n            bodyBold: 'This will also delete all episodes attached to this season.',\r\n            ok:    'Delete'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.store.dispatch(new DeleteSeason(season)).subscribe(() => {\r\n                this.toast.open(MESSAGES.SEASON_DELETE_SUCCESS);\r\n            });\r\n        });\r\n    }\r\n\r\n    trackByFn(index: number, season: Season) {\r\n        return season.id;\r\n    }\r\n}\r\n","<button mat-raised-button color=\"accent\" (click)=\"uploadImage()\">\r\n    <mat-icon svgIcon=\"add\"></mat-icon>\r\n    <span trans>Upload Image</span>\r\n</button>\r\n\r\n<div cdkDropListGroup>\r\n    <div cdkDropList [cdkDropListEnterPredicate]=\"dropListEnterPredicate\" (cdkDropListDropped)=\"dropListDropped()\"></div>\r\n    <div class=\"images-grid\">\r\n        <div cdkDropList [cdkDropListEnterPredicate]=\"dropListEnterPredicate\" (cdkDropListDropped)=\"dropListDropped()\" *ngFor=\"let image of images$ | async\">\r\n            <media-image class=\"images-panel-media-image\" cdkDrag (cdkDragMoved)=\"dragMoved($event);\" [src]=\"image.url\" size=\"medium\" mode=\"landscape\">\r\n                <button mat-mini-fab color=\"warn\" (click)=\"deleteImage(image)\">\r\n                    <mat-icon svgIcon=\"delete\"></mat-icon>\r\n                </button>\r\n            </media-image>\r\n        </div>\r\n    </div>\r\n</div>","import {ChangeDetectionStrategy, Component, ViewChild} from '@angular/core';\r\nimport {Select, Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {Observable} from 'rxjs';\r\nimport {Image} from '../../../../../../models/image';\r\nimport {ImagesService} from '../../../../../shared/images.service';\r\nimport {AddImage, ChangeImageOrder, DeleteImage} from '../../state/crupdate-title-actions';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {UploadQueueService} from '../../../../../../../common/uploads/upload-queue/upload-queue.service';\r\nimport {CdkDrag, CdkDragMove, CdkDropList, CdkDropListGroup} from '@angular/cdk/drag-drop';\r\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\r\nimport {openUploadWindow} from '../../../../../../../common/uploads/utils/open-upload-window';\r\nimport {UploadInputTypes} from '../../../../../../../common/uploads/upload-input-config';\r\nimport {ViewportRuler} from '@angular/cdk/overlay';\r\n\r\n@Component({\r\n    selector: 'images-panel',\r\n    templateUrl: './images-panel.component.html',\r\n    styleUrls: ['./images-panel.component.scss'],\r\n    providers: [UploadQueueService],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ImagesPanelComponent {\r\n    @Select(CrupdateTitleState.images) images$: Observable<Image[]>;\r\n\r\n    @ViewChild(CdkDropListGroup) listGroup: CdkDropListGroup<CdkDropList>;\r\n    @ViewChild(CdkDropList) placeholder: CdkDropList;\r\n\r\n    public target: CdkDropList;\r\n    public targetIndex: number;\r\n    public source: CdkDropList;\r\n    public sourceIndex: number;\r\n    public activeContainer;\r\n\r\n    constructor(\r\n        private images: ImagesService,\r\n        private store: Store,\r\n        private toast: Toast,\r\n        private viewportRuler: ViewportRuler,\r\n    ) {}\r\n\r\n    public uploadImage() {\r\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\r\n            const params = {\r\n                modelId: this.store.selectSnapshot(CrupdateTitleState.title).id\r\n            };\r\n            this.images.create(upload[0], params)\r\n                .subscribe(response => {\r\n                    this.store.dispatch(new AddImage(response.image)).subscribe(() => {\r\n                        this.toast.open(MESSAGES.IMAGE_CREATE_SUCCESS);\r\n                    });\r\n                });\r\n        });\r\n    }\r\n\r\n    public deleteImage(image: Image) {\r\n        this.store.dispatch(new DeleteImage(image)).subscribe(() => {\r\n            this.toast.open(MESSAGES.IMAGE_DELETE_SUCCESS);\r\n        });\r\n    }\r\n\r\n    /* GRID DRAG AND DROP */\r\n\r\n    dragMoved(e: CdkDragMove) {\r\n        const point = this.getPointerPositionOnPage(e.event);\r\n        this.listGroup._items.forEach(dropList => {\r\n            if (__isInsideDropListClientRect(dropList, point.x, point.y)) {\r\n                this.activeContainer = dropList;\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    dropListDropped() {\r\n        if ( ! this.target) return;\r\n\r\n        const phElement = this.placeholder.element.nativeElement;\r\n        const parent = phElement.parentElement;\r\n\r\n        phElement.style.display = 'none';\r\n\r\n        parent.removeChild(phElement);\r\n        parent.appendChild(phElement);\r\n        parent.insertBefore(this.source.element.nativeElement, parent.children[this.sourceIndex]);\r\n\r\n        this.target = null;\r\n        this.source = null;\r\n\r\n        if (this.sourceIndex !== this.targetIndex) {\r\n            this.store.dispatch(new ChangeImageOrder(this.sourceIndex, this.targetIndex));\r\n        }\r\n    }\r\n\r\n    dropListEnterPredicate = (drag: CdkDrag, drop: CdkDropList) => {\r\n        if (drop === this.placeholder) return true;\r\n\r\n\r\n        if (drop !== this.activeContainer) return false;\r\n\r\n        const phElement = this.placeholder.element.nativeElement;\r\n        const sourceElement = drag.dropContainer.element.nativeElement;\r\n        const dropElement = drop.element.nativeElement;\r\n\r\n        const dragIndex = __indexOf(dropElement.parentElement.children, (this.source ? phElement : sourceElement));\r\n        const dropIndex = __indexOf(dropElement.parentElement.children, dropElement);\r\n\r\n        if ( ! this.source) {\r\n            this.sourceIndex = dragIndex;\r\n            this.source = drag.dropContainer;\r\n\r\n            phElement.style.width = sourceElement.clientWidth + 'px';\r\n            phElement.style.height = sourceElement.clientHeight + 'px';\r\n\r\n            sourceElement.parentElement.removeChild(sourceElement);\r\n        }\r\n\r\n        this.targetIndex = dropIndex;\r\n        this.target = drop;\r\n\r\n        phElement.style.display = '';\r\n        dropElement.parentElement.insertBefore(phElement, (dropIndex > dragIndex\r\n            ? dropElement.nextSibling : dropElement));\r\n\r\n        this.placeholder._dropListRef.enter(drag._dragRef, drag.element.nativeElement.offsetLeft, drag.element.nativeElement.offsetTop);\r\n        return false;\r\n    }\r\n\r\n    /** Determines the point of the page that was touched by the user. */\r\n    getPointerPositionOnPage(event: MouseEvent | TouchEvent) {\r\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\r\n        const point = __isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\r\n        const scrollPosition = this.viewportRuler.getViewportScrollPosition();\r\n\r\n        return {\r\n            x: point.pageX - scrollPosition.left,\r\n            y: point.pageY - scrollPosition.top\r\n        };\r\n    }\r\n}\r\n\r\nfunction __indexOf(collection, node) {\r\n    return Array.prototype.indexOf.call(collection, node);\r\n}\r\n\r\n/** Determines whether an event is a touch event. */\r\nfunction __isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\r\n    return event.type.startsWith('touch');\r\n}\r\n\r\nfunction __isInsideDropListClientRect(dropList: CdkDropList, x: number, y: number) {\r\n    const {top, bottom, left, right} = dropList.element.nativeElement.getBoundingClientRect();\r\n    return y >= top && y <= bottom && x >= left && x <= right;\r\n}\r\n","<form class=\"input-container\" *ngIf=\"!readonly\" ngNativeValidate (ngSubmit)=\"selectTagsFromString(formControl.value)\">\r\n    <div class=\"input-with-action\">\r\n        <input type=\"text\" class=\"tags-string-input\" [matAutocomplete]=\"auto\" [formControl]=\"formControl\" required>\r\n        <button type=\"submit\" class=\"add-tags-button\" mat-flat-button color=\"accent\" trans>Add</button>\r\n    </div>\r\n</form>\r\n\r\n<p class=\"main-info\" *ngIf=\"!readonly\" [transValues]=\"{tagName: pluralName}\" trans>Separate :tagName with comma.</p>\r\n\r\n<div class=\"selected-tags\">\r\n    <mat-chip-list [selectable]=\"false\">\r\n        <mat-chip (removed)=\"deselectTag(tag)\" [removable]=\"!readonly\" *ngFor=\"let tag of selectedTags$ | async\">\r\n            <span>{{tag}}</span>\r\n            <mat-icon svgIcon=\"cancel\" matChipRemove></mat-icon>\r\n        </mat-chip>\r\n    </mat-chip-list>\r\n</div>\r\n\r\n<div class=\"existing-tags\" *ngIf=\"!readonly\">\r\n    <p [transValues]=\"{tagName: pluralName}\" trans>Choose from existing :tagName:</p>\r\n    <div class=\"existing-tags-list\">\r\n        <div class=\"existing-tag-name\" *ngFor=\"let tag of existingTags$ | async\" (click)=\"selectTags([tag.name])\">{{tag.display_name}}</div>\r\n    </div>\r\n</div>\r\n\r\n<mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"selectTags([$event.option.value])\">\r\n    <mat-option *ngFor=\"let tag of suggestedTags$ | async\" [value]=\"tag.name\">{{tag.display_name}}</mat-option>\r\n</mat-autocomplete>\r\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\r\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport {Tag} from '@common/core/types/models/Tag';\r\nimport {TagsService} from '@common/core/services/tags.service';\r\nimport {slugifyString} from '@common/core/utils/slugify-string';\r\n\r\n@Component({\r\n    selector: 'tags-manager',\r\n    templateUrl: './tags-manager.component.html',\r\n    styleUrls: ['./tags-manager.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: TagsManagerComponent,\r\n        multi: true,\r\n    }]\r\n})\r\nexport class TagsManagerComponent implements OnInit, ControlValueAccessor {\r\n    @Input() public readonly = false;\r\n    @Input() public tagType: string;\r\n    @Input() public pluralName = 'tags';\r\n\r\n    public formControl = new FormControl();\r\n    private propagateChange: (tags: string[]) => void;\r\n\r\n    /**\r\n     * Tags user has selected.\r\n     */\r\n    public selectedTags$ = new BehaviorSubject<string[]>([]);\r\n    /**\r\n     * A list of tags that already exist in the app.\r\n     */\r\n    public existingTags$ = new BehaviorSubject<Tag[]>([]);\r\n    /**\r\n     * Tags currently being suggested in autocomplete.\r\n     */\r\n    public suggestedTags$ = new BehaviorSubject<Tag[]>([]);\r\n\r\n    constructor(private tagService: TagsService) {}\r\n\r\n    ngOnInit() {\r\n        this.tagService.index({perPage: 15, type: this.tagType}).subscribe(response => {\r\n            this.existingTags$.next(response.pagination.data.filter(tag => tag.type !== 'status'));\r\n        });\r\n        this.formControl.valueChanges.subscribe(q => {\r\n            const suggestions = q ?\r\n                this.existingTags$.value.filter(t => t.name.toLowerCase().includes(q.toLowerCase())) :\r\n                [];\r\n            this.suggestedTags$.next(suggestions);\r\n        });\r\n    }\r\n\r\n    public writeValue(value: string[]) {\r\n        this.selectTags(value, {skipPropagate: true, override: true});\r\n    }\r\n\r\n    public registerOnChange(fn: (tags: string[]) => void) {\r\n        this.propagateChange = fn;\r\n    }\r\n\r\n    public registerOnTouched() {}\r\n\r\n    public selectTags(tags?: string[], options: {skipPropagate?: boolean, override?: boolean} = {}) {\r\n        const newTags = (tags || []).map(t => t.trim())\r\n            .filter(t => !this.selectedTags$.value.includes(t));\r\n        if (options.override) {\r\n            this.selectedTags$.next(newTags);\r\n        } else if (newTags.length) {\r\n            this.selectedTags$.next([\r\n                ...this.selectedTags$.value,\r\n                ...newTags\r\n            ]);\r\n        }\r\n        this.formControl.reset();\r\n        if (!options.skipPropagate) {\r\n           this.propagateChange(this.selectedTags$.value);\r\n        }\r\n    }\r\n\r\n    public deselectTag(tagName: string) {\r\n        const selectedTags = this.selectedTags$.value.slice();\r\n        selectedTags.splice(selectedTags.indexOf(tagName), 1);\r\n        this.selectedTags$.next(selectedTags);\r\n        this.propagateChange(this.selectedTags$.value);\r\n    }\r\n\r\n    public selectTagsFromString(tagString: string) {\r\n        const tags = tagString.split(',').map(t => slugifyString(t));\r\n        this.selectTags(tags);\r\n    }\r\n}\r\n","import {ChangeDetectionStrategy, Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {FormControl} from '@angular/forms';\n\ninterface SelectTagsModalComponentData {\n    tagType?: string;\n    pluralName?: string;\n}\n\n@Component({\n    selector: 'tag-manager-modal',\n    templateUrl: './select-tags-modal.component.html',\n    styleUrls: ['./select-tags-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectTagsModalComponent {\n    public selectedTagsControl = new FormControl();\n    public pluralName: string;\n\n    constructor(\n        private dialogRef: MatDialogRef<SelectTagsModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: SelectTagsModalComponentData,\n    ) {\n        this.pluralName = this.data.pluralName || 'tags';\n    }\n\n    public close() {\n        this.dialogRef.close();\n    }\n\n    public confirm() {\n        this.dialogRef.close(this.selectedTagsControl.value);\n    }\n\n    public noTagsSelected(): boolean {\n        return !this.selectedTagsControl.value?.length;\n    }\n}\n","<div class=\"modal-header\">\n    <h2 mat-dialog-title [transValues]=\"{tagName: pluralName}\" trans>Select :tagName</h2>\n    <button type=\"button\" (click)=\"close()\" class=\"close-button\" mat-icon-button tabindex=\"-1\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</div>\n\n<mat-dialog-content>\n   <tags-manager [tagType]=\"data.tagType\" [pluralName]=\"pluralName\" [formControl]=\"selectedTagsControl\"></tags-manager>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button (click)=\"close()\" type=\"button\" class=\"cancel-button\" mat-button trans>Cancel</button>\n    <button type=\"button\" class=\"submit-button\" [disabled]=\"noTagsSelected()\" (click)=\"confirm()\" mat-raised-button color=\"accent\" [transValues]=\"{tagName: pluralName}\" trans>Merge :tagName</button>\n</mat-dialog-actions>\n","<datatable-header>\r\n    <button mat-raised-button color=\"accent\" leftContent (click)=\"openTagManagerModal()\">\r\n        {{ 'Add' | trans }} {{ (displayType || (type + 's') ) | trans }}\r\n    </button>\r\n</datatable-header>\r\n\r\n<table class=\"material-table\">\r\n    <thead>\r\n    <tr>\r\n        <th table-sort-header trans>Name</th>\r\n        <th table-sort-header trans>Display Name</th>\r\n        <th></th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n    <tr *ngFor=\"let tag of datatable.data$ | async\">\r\n        <td>{{tag.name}}</td>\r\n        <td>{{tag.display_name || '-'}}</td>\r\n        <td class=\"edit-column\">\r\n            <button mat-icon-button (click)=\"detachTag(tag)\">\r\n                <mat-icon svgIcon=\"close\"></mat-icon>\r\n            </button>\r\n        </td>\r\n    </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<no-results-message *ngIf=\"!(datatable.data$ | async).length\" svgImage=\"folder.svg\">\r\n    <span primary-text trans>Nothing to display</span>\r\n</no-results-message>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit\r\n} from '@angular/core';\r\nimport {Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {AttachTags, DetachTag} from '../../state/crupdate-title-actions';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {Tag} from '@common/core/types/models/Tag';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {Toast} from '@common/core/ui/toast.service';\r\nimport {SelectTagsModalComponent} from '@common/tags/tags-manager/select-tags-modal/select-tags-modal.component';\r\nimport {DatatableService} from '@common/datatable/datatable.service';\r\n\r\n@Component({\r\n    selector: 'tags-panel',\r\n    templateUrl: './tags-panel.component.html',\r\n    styleUrls: ['./tags-panel.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [DatatableService]\r\n})\r\nexport class TagsPanelComponent implements OnInit, OnDestroy {\r\n    @Input() type: 'keyword' | 'genre' | 'production_country';\r\n    @Input() displayType: string;\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private modal: Modal,\r\n        private toast: Toast,\r\n        public datatable: DatatableService<Tag>,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.datatable.init();\r\n        const tags$ = this.getTagObservable();\r\n        tags$.subscribe(tags => {\r\n            this.datatable.data = tags || [];\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.datatable.destroy();\r\n    }\r\n\r\n    public openTagManagerModal() {\r\n        this.modal.open(\r\n            SelectTagsModalComponent,\r\n            {tagType: this.type, pluralName: this.type === 'production_country' ? 'countries' : `${this.type}s`},\r\n        ).beforeClosed().subscribe(tagNames => {\r\n           if (tagNames && tagNames.length) {\r\n               this.store.dispatch(new AttachTags(tagNames, this.type));\r\n           }\r\n        });\r\n    }\r\n\r\n    public detachTag(tag: Tag) {\r\n        this.store.dispatch(new DetachTag(tag))\r\n            .subscribe(() => {\r\n                this.toast.open(MESSAGES.TAG_DETACH_SUCCESS);\r\n            });\r\n    }\r\n\r\n    private getTagObservable() {\r\n        if (this.type === 'keyword') {\r\n            return this.store.select(CrupdateTitleState.keywords);\r\n        } else if (this.type === 'genre') {\r\n            return this.store.select(CrupdateTitleState.genres);\r\n        } else {\r\n            return this.store.select(CrupdateTitleState.countries);\r\n        }\r\n    }\r\n}\r\n","<ng-container *ngIf=\"activePanel$ | async as activePanel\">\r\n    <primary-facts-panel class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'primaryFacts'\"></primary-facts-panel>\r\n    <seasons-panel class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'seasons'\"></seasons-panel>\r\n    <images-panel class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'images'\"></images-panel>\r\n    <video-index class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'videos'\" [title]=\"title\"></video-index>\r\n    <credits-panel class=\"material-panel crupdate-title-panel\" [mediaItem]=\"title\" type=\"cast\" *ngIf=\"activePanel === 'cast'\"></credits-panel>\r\n    <credits-panel class=\"material-panel crupdate-title-panel\" [mediaItem]=\"title\" type=\"crew\" *ngIf=\"activePanel === 'crew'\"></credits-panel>\r\n    <tags-panel class=\"material-panel crupdate-title-panel\" type=\"keyword\" *ngIf=\"activePanel === 'keywords'\"></tags-panel>\r\n    <tags-panel class=\"material-panel crupdate-title-panel\" type=\"genre\" *ngIf=\"activePanel === 'genres'\"></tags-panel>\r\n    <tags-panel class=\"material-panel crupdate-title-panel\" type=\"production_country\" displayType=\"country\" *ngIf=\"activePanel === 'countries'\"></tags-panel>\r\n    <reviews-index class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'reviews'\" [title]=\"title\"></reviews-index>\r\n\r\n    <aside class=\"sidebar material-panel\">\r\n        <div class=\"header\" trans>Edit</div>\r\n        <div class=\"list\">\r\n            <button class=\"list-item no-style\" (click)=\"openPanel('primaryFacts')\" [class.active]=\"activePanel === 'primaryFacts'\" trans>Primary Facts</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('seasons')\" [class.active]=\"activePanel === 'seasons'\" trans>Seasons</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('images')\" [class.active]=\"activePanel === 'images'\" trans>Images</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('videos')\" [class.active]=\"activePanel === 'videos'\" trans>Videos</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('cast')\" [class.active]=\"activePanel === 'cast'\" trans>Cast</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('crew')\" [class.active]=\"activePanel === 'crew'\" trans>Crew</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('genres')\" [class.active]=\"activePanel === 'genres'\" trans>Genres</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('keywords')\" [class.active]=\"activePanel === 'keywords'\" trans>Keywords</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('countries')\" [class.active]=\"activePanel === 'countries'\" trans>Countries</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('reviews')\" [class.active]=\"activePanel === 'reviews'\" trans>Reviews</button>\r\n        </div>\r\n        <p *ngIf=\"!titleCreated()\" class=\"message\" trans>Save from \"Primary Facts\" panel in order to enable other menu items.</p>\r\n    </aside>\r\n\r\n    <loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>\r\n</ng-container>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    OnDestroy,\r\n    OnInit,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {Select, Store} from '@ngxs/store';\r\nimport {HydrateTitle, ResetState} from './state/crupdate-title-actions';\r\nimport {CrupdateTitleState} from './state/crupdate-title-state';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {Title} from '../../../../models/title';\r\n\r\n@Component({\r\n    selector: 'crupdate-title',\r\n    templateUrl: './crupdate-title.component.html',\r\n    styleUrls: ['./crupdate-title.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CrupdateTitleComponent implements OnInit, OnDestroy {\r\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\r\n    public title: Title;\r\n    public activePanel$ = new BehaviorSubject<string>('primaryFacts');\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.route.data.subscribe(data => {\r\n            this.store.dispatch(new HydrateTitle(data.api?.title));\r\n            this.title = data.api?.title;\r\n        });\r\n\r\n        this.route.queryParams.subscribe(params => {\r\n            this.activePanel$.next(params.active || 'primaryFacts');\r\n        });\r\n\r\n        if (this.route.snapshot.params.seasonNumber) {\r\n            this.activePanel$.next('seasons');\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.store.dispatch(new ResetState());\r\n    }\r\n\r\n    public openPanel(name: string) {\r\n        this.router.navigate([], {queryParams: {active: name}});\r\n    }\r\n\r\n    public titleCreated(): boolean {\r\n        return !!this.store.selectSnapshot(CrupdateTitleState.title).id;\r\n    }\r\n}\r\n","import {RouterModule, Routes} from '@angular/router';\r\nimport {NgModule} from '@angular/core';\r\nimport {CrupdateTitleComponent} from './crupdate-title/crupdate-title.component';\r\nimport {CrupdateTitleResolverService} from './crupdate-title/crupdate-title-resolver.service';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: CrupdateTitleComponent,\r\n        resolve: {api: CrupdateTitleResolverService},\r\n        data: {permissions: ['titles.update']}\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class CrupdateTitleRoutingModule {\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {\r\n    ActivatedRouteSnapshot,\r\n    Resolve,\r\n    Router,\r\n    RouterStateSnapshot\r\n} from '@angular/router';\r\nimport {catchError, mergeMap} from 'rxjs/operators';\r\nimport {EMPTY, Observable, of} from 'rxjs';\r\nimport {Store} from '@ngxs/store';\r\nimport {TitlesService} from '../../titles.service';\r\nimport {CurrentUser} from '../../../../../common/auth/current-user';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CrupdateTitleResolverService implements Resolve<Observable<any>> {\r\n    constructor(\r\n        private router: Router,\r\n        private store: Store,\r\n        private titles: TitlesService,\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any> {\r\n        const query = {fullCredits: true, keywords: true, countries: true, seasons: true, skipUpdating: true, allVideos: true},\r\n            titleId = route.params.titleId;\r\n\r\n        if ( ! titleId) {\r\n            return of(null);\r\n        }\r\n\r\n        return this.titles.get(route.params.titleId, query).pipe(\r\n            catchError(() => {\r\n                this.router.navigate(this.fallbackUri(state));\r\n                return EMPTY;\r\n            }),\r\n            mergeMap(response => {\r\n                if (response) {\r\n                    return of(response);\r\n                } else {\r\n                    this.router.navigate(this.fallbackUri(state));\r\n                    return EMPTY;\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    private fallbackUri(state: RouterStateSnapshot) {\r\n        return state.url.includes('admin') ? ['/admin/titles'] : [state.url.replace('/edit', '')];\r\n    }\r\n}\r\n\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CrupdateTitleComponent} from './crupdate-title/crupdate-title.component';\nimport {PrimaryFactsPanelComponent} from './crupdate-title/panels/primary-facts-panel/primary-facts-panel.component';\nimport {ImagesPanelComponent} from './crupdate-title/panels/images-panel/images-panel.component';\nimport {CreditsPanelComponent} from './crupdate-title/panels/credits-panel/credits-panel.component';\nimport {CrupdateCreditModalComponent} from './crupdate-title/panels/crupdate-credit-modal/crupdate-credit-modal.component';\nimport {TagsPanelComponent} from './crupdate-title/panels/tags-panel/tags-panel.component';\nimport {SeasonsPanelComponent} from './crupdate-title/panels/seasons-panel/seasons-panel.component';\nimport {CrupdateEpisodeModalComponent} from './crupdate-title/panels/seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component';\nimport {VideoIndexComponent} from '../../../admin/video-index/video-index.component';\nimport {CrupdateTitleRoutingModule} from './crupdate-title-routing.module';\nimport {TranslationsModule} from '../../../../common/core/translations/translations.module';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {NoResultsMessageModule} from '../../../../common/core/ui/no-results-message/no-results-message.module';\nimport {MediaImageModule} from '../../shared/media-image/media-image.module';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {EpisodesPanelComponent} from './crupdate-title/panels/episodes-panel/episodes-panel.component';\nimport {FormatPipesModule} from '../../../../common/core/ui/format-pipes/format-pipes.module';\nimport {LoadingIndicatorModule} from '../../../../common/core/ui/loading-indicator/loading-indicator.module';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {SearchInputModule} from '../../search/seach-input/search-input.module';\nimport {DatatableModule} from '../../../../common/datatable/datatable.module';\nimport {VideoIndexFiltersComponent} from '../../../admin/video-index/video-index-filters/video-index-filters.component';\nimport {SelectUserInputModule} from '../../../../common/core/ui/select-user-input/select-user-input.module';\nimport {SelectTitleInputModule} from '../../../admin/video-index/select-title-input/select-title-input.module';\nimport {ReviewsIndexComponent} from '../../../admin/reviews-index/reviews-index.component';\nimport {ReviewIndexFiltersComponent} from '../../../admin/reviews-index/review-index-filters/review-index-filters.component';\n\n@NgModule({\n    declarations: [\n        CrupdateTitleComponent,\n        PrimaryFactsPanelComponent,\n        ImagesPanelComponent,\n        CreditsPanelComponent,\n        CrupdateCreditModalComponent,\n        TagsPanelComponent,\n        SeasonsPanelComponent,\n        EpisodesPanelComponent,\n        CrupdateEpisodeModalComponent,\n        VideoIndexComponent,\n        VideoIndexFiltersComponent,\n        ReviewsIndexComponent,\n        ReviewIndexFiltersComponent,\n    ],\n    imports: [\n        CommonModule,\n        CrupdateTitleRoutingModule,\n        TranslationsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        NoResultsMessageModule,\n        MediaImageModule,\n        FormatPipesModule,\n        LoadingIndicatorModule,\n        SearchInputModule,\n        DatatableModule,\n        SelectUserInputModule,\n        SelectTitleInputModule,\n\n        // material\n        MatButtonModule,\n        MatIconModule,\n        MatTooltipModule,\n        MatDialogModule,\n        MatTabsModule,\n        TextFieldModule,\n        MatExpansionModule,\n        DragDropModule,\n        MatAutocompleteModule,\n    ]\n})\nexport class CrupdateTitleModule {\n}\n"]}