{"version":3,"sources":["webpack:///src/common/datatable/datatable.module.ts","webpack:///src/common/shared/paginator.service.ts","webpack:///src/common/datatable/delete-resource-message.ts","webpack:///src/common/datatable/utils/sort-datatable-data.ts","webpack:///src/common/datatable/datatable.service.ts","webpack:///src/common/datatable/utils/filter-datatable-data.ts","webpack:///src/common/core/ui/overlay-panel/positions/left-position.ts","webpack:///src/common/datatable/datatable-filters-panel/datatable-filters-panel.component.html","webpack:///src/common/datatable/datatable-filters-panel/datatable-filters-panel.component.ts","webpack:///src/common/datatable/datatable-header/datatable-header-search-input/datatable-header-search-input.component.html","webpack:///src/common/datatable/datatable-header/datatable-header-search-input/datatable-header-search-input.component.ts","webpack:///src/common/datatable/datatable-header/datatable-header.component.html","webpack:///src/common/datatable/datatable-header/datatable-header.component.ts","webpack:///src/common/core/utils/remove-null-from-object.ts","webpack:///src/common/datatable/table-sort-header/table-sort-header.component.ts","webpack:///src/common/datatable/table-sort-header/table-sort-header.component.html","webpack:///src/app/site/people/crupdate-person/state/crupdate-person-state.ts","webpack:///src/app/site/people/crupdate-person/state/crupdate-person-state-actions.ts","webpack:///src/app/models/person.ts","webpack:///src/app/site/people/crupdate-person/crupdate-person-page.component.html","webpack:///src/app/site/people/crupdate-person/crupdate-person-routing.module.ts","webpack:///src/app/site/people/crupdate-person/crupdate-person-page.component.ts","webpack:///src/app/site/people/crupdate-person/crupdate-person.module.ts"],"names":["DatatableModule","Paginator","router","http","localStorage","params$","BehaviorSubject","paginatedOnce$","loading$","response$","dontUpdateQueryParams","perPageCacheKey","noResults$","this","pipe","map","r","value","pagination","data","length","initialData","userParams","url","queryParams","subscription","currentQueryParams","next","perPage","per_page","page","current_page","init","current","total","paginate","newPerPage","set","routerState","root","snapshot","uri","switchMap","params","firstPagination","get","of","tap","updateQueryParams","subscribe","response","key","Array","isArray","join","navigate","replaceUrl","currentPage","last_page","DELETE_RESOURCE_MESSAGE","title","body","ok","sortingDataAccessor","sortHeaderId","numberValue","Number","DatatableService","modal","sort$","filters$","staticParams$","paginator","ignoreNextParamChange","originalData$","data$","selectedRows$","config","staticParams","connectToPaginator","mainSub","combineLatest","debounceTime","Object","assign","entries","forEach","id","keys","applyLocalTransforms","paginatorSub","pairwise","prev","infiniteScroll","query","filter","obj","dataStr","objectToStr","reduce","currentTerm","toLowerCase","transformedFilter","trim","indexOf","orderBy","orderDir","sort","a","b","valueA","valueB","valueAType","valueBType","comparatorResult","filters","cmp","open","beforeClosed","modifiedResource","reset","resource","replacements","afterClosed","confirmed","unsubscribe","tableData","LEFT_POSITION","originX","originY","overlayX","overlayY","offsetX","DatatableFiltersPanelComponent","overlayPanelRef","close","dialogContainer","DatatableHeaderSearchInputComponent","datatable","route","searchControl","hideIcon","valueChanges","distinctUntilChanged","addFilter","DatatableHeaderComponent","cd","overlayPanel","showSelectedActions","subscriptions","v","filterSub","filterPanelRef","changeSub","numberOfRowsSelected","markForCheck","s","position","slice","offsetY","origin","filterButton","mobilePosition","filterPanelTemplate","maxWidth","nativeElement","classList","add","remove","removeNullFromObject","copy","TableSortHeaderComponent","datable","focusMonitor","el","arrowVisible","arrowDirection","columnName","textContent","sortSub","onMouseLeave","monitor","stopMonitoring","getDirection","disableSort","changeSort","e","keyCode","preventDefault","CrupdatePersonState","LoadPerson","type","DetachCredit","CreatePerson","payload","UpdatePerson","ResetState","Person","name","people","titles","ctx","action","patchState","loading","person","credits","flattenCredits","create","finalize","update","getState","removeCredit","newCredits","credit","pivot","flatCredits","push","state","defaults","CrupdatePersonPageComponent","CrupdatePersonRoutingModule","CrupdatePersonModule","routes","path","component","store","toast","fb","uploadQueue","poster$","personForm","group","poster","popularity","description","known_for","birth_place","birth_date","death_date","gender","allow_update","loadPerson","select","dispatch","destroy","types","image","then","upload","start","httpParams","diskPrefix","patchValue","fileEntry","selectSnapshot","includes","split","replace","PERSON_UPDATE_SUCCESS","PERSON_CREATE_SUCCESS","CREDIT_REMOVE_SUCCESS","submit","uploadPoster","permissions","forChild","forFeature"],"mappings":"8rDACA,0KA4DO,iBAAMA,EAAN,wB,8BAAMA,I,oDAAAA,IAAe,SA5Bf,CACL,IACA,IACA,IACA,IACA,IACA,IAGA,IACA,IACA,IACA,IACA,KAIA,O,EAWD,I,0EClDMC,E,wHAAN,IAAMA,EAAN,WAmBH,WACYC,EACAC,EACAC,wBAFA,KAAAF,SACA,KAAAC,OACA,KAAAC,eApBJ,KAAAC,QAAU,IAAIC,EAAA,EAAkC,IACjD,KAAAC,eAAiB,IAAID,EAAA,MACrB,KAAAE,SAAW,IAAIF,EAAA,MACf,KAAAG,UAAY,IAAIH,EAAA,EAAyE,MACzF,KAAAI,yBACA,KAAAC,gBAA0B,KAE1B,KAAAC,WAAaC,KAAKJ,UAAUK,KAAK,OAAAC,EAAA,IAAIC,YAACA,OAAIH,EAAKN,eAAeU,OAAsC,IAA7BD,EAAEE,WAAWC,KAAKC,WAT7F,6CAyBoDC,IAAvCC,EAAuCD,uDAAlB,GAAIE,EAAcF,gFAE7CG,EAAeX,KAAKY,aAA2C,GAA5BZ,KAAKa,qBAK9Cb,KAAKR,QAAQsB,KAAK,OAAD,sCAJQd,KAAKJ,UAAUQ,MAAQ,CAC5CW,QAASf,KAAKJ,UAAUQ,MAAMC,WAAWW,SACzCC,KAAMjB,KAAKJ,UAAUQ,MAAMC,WAAWa,cACtC,IACuCP,GAAgBF,IAEpDT,KAAKY,cACRZ,KAAKmB,KAAKT,EAAKF,KAnCpB,iCAwCC,IAAMY,EAAUpB,KAAKJ,UAAUQ,MAAMC,WAAWa,aAC1CG,EAAQrB,KAAKJ,UAAUQ,MAAMC,WAAWgB,MACxCP,EAAOM,EAAU,EACvBpB,KAAKsB,SAAS,OAAD,wBACNtB,KAAKR,QAAQY,OAAK,CACrBa,MAAOG,GAAWN,EAAOO,EAAQD,EAAUN,OA7ChD,qCAkDC,IAAMM,EAAUpB,KAAKJ,UAAUQ,MAAMC,WAAWa,aAChDlB,KAAKsB,SAAS,OAAD,wBACNtB,KAAKR,QAAQY,OAAK,CACrBa,KAAOG,EAAU,GAAM,OArD5B,oCAyDkBG,G,MACbA,KAAiC,QAAvB,EAAKvB,KAAKR,QAAQY,iBAAK,WAAEW,WAC/Bf,KAAKF,iBACLE,KAAKT,aAAaiC,IAAIxB,KAAKF,gBAAiByB,GAEhDvB,KAAKsB,SAAS,OAAD,wBACNtB,KAAKR,QAAQY,OAAK,CACrBW,QAASQ,QAhElB,2CAsEC,OAAOvB,KAAKX,OAAOoC,YAAYC,KAAKC,SAAShB,cAtE9C,2BAyEUiB,EAAapB,cACtBR,KAAKY,aAAeZ,KAAKR,QAAQS,KAC7B,OAAA4B,EAAA,IAAUC,YACN9B,EAAKL,SAASmB,MAAKA,GACnB,IAAMiB,GAAmB/B,EAAKN,eAAeU,MAW7C,OAVI2B,GAAmB/B,EAAKF,iBAAmBE,EAAKT,aAAayC,IAAIhC,EAAKF,mBACtEgC,EAAS,OAAH,QAAIf,QAASf,EAAKT,aAAayC,IAAIhC,EAAKF,kBAAqBgC,KAKvDC,GAAmBvB,EAC/B,OAAAyB,EAAA,GAAG,CAAC5B,WAAYG,IAChBR,EAAKV,KAAK0C,IAAIJ,EAAKE,IAEyB7B,KAI5C,OAAAiC,EAAA,IAAI,WACAlC,EAAKmC,kBAAkBL,GACvB9B,EAAKL,SAASmB,MAAKA,GACnBd,EAAKN,eAAeoB,MAAKA,MAC1B,WACCd,EAAKL,SAASmB,MAAKA,GACnBd,EAAKN,eAAeoB,MAAKA,WAIvCsB,WAAUC,YACRrC,EAAKJ,UAAUkB,KAAKuB,QAvGzB,0CA2GmC,IAAZP,EAAY,uDAAH,GAC/B,IAAI9B,KAAKH,sBAAT,CACA,IAAK,IAAMyC,KAAOR,EACVS,MAAMC,QAAQV,EAAOQ,MACrBR,EAAOQ,GAAOR,EAAOQ,GAAKG,KAAK,MAGvCzC,KAAKX,OAAOqD,SAAS,GAAI,CAAC/B,YAAamB,EAAQa,YAAWA,OAlH3D,wC,QAsHC,OAAO3C,KAAKJ,UAAUQ,OAClBJ,KAAK4C,aAA8C,QAAnC,EAAuB,QAAvB,EAAG5C,KAAKJ,UAAUQ,iBAAK,WAAEC,sBAAU,WAAEwC,aAvH1D,6BAYC,OAAO7C,KAAKR,QAAQY,QAZrB,kC,QAgBC,OAAuC,QAAvC,EAA2B,QAA3B,EAAOJ,KAAKJ,UAAUQ,iBAAK,WAAEC,sBAAU,WAAEa,iBAhB1C,M,oCAAM9B,GAAS,gC,yBAATA,EAAS,QAATA,EAAS,Y,+DCTT0D,EAA4C,CACrDC,MAAO,mBACPC,KAAO,sDACPC,GAAO,U,wBCkDX,SAASC,EAAoB5C,EAAc6C,GACvC,IAAM/C,EAAQ,OAAS+C,EAAc7C,GAErC,GAAI,YAAeF,GAAQ,CACvB,IAAMgD,EAAcC,OAAOjD,GAI3B,OAAOgD,EA3DU,iBA2DuBA,EAAchD,EAO1D,OAAOA,E,ICtCEkD,E,YAAN,IAAMA,EAAN,WAaH,WACcC,EACAlE,EACAC,EACAC,aAHA,KAAAgE,QACA,KAAAlE,SACA,KAAAC,OACA,KAAAC,eAhBP,KAAAiE,MAAQ,IAAI/D,EAAA,EAA+B,IAC3C,KAAAgE,SAAW,IAAIhE,EAAA,EAAkC,IACjD,KAAAiE,cAAgB,IAAIjE,EAAA,EAAuC,IAC3D,KAAAkE,UAAY,IAAI,EAAa3D,KAAKX,OAAQW,KAAKV,KAAMU,KAAKT,cAGzD,KAAAqE,yBACA,KAAAC,cAAgB,IAAIpE,EAAA,EAAqB,IAC1C,KAAAqE,MAAQ,IAAIrE,EAAA,EAAqB,IACjC,KAAAsE,cAAgB,IAAItE,EAAA,EAA0B,IAVlD,yCAkCyC,WAAhCuE,EAAgC,uDAAH,GA4BrC,OA3BAhE,KAAKgE,OAASA,EACdhE,KAAK0D,cAAc5C,KAAK,OAAD,wBAAKd,KAAK0D,cAActD,OAAU4D,EAAOC,eAC5DD,EAAOpC,IACP5B,KAAKkE,qBACEF,EAAOxD,cACdR,KAAKM,KAAO0D,EAAOxD,aAGvBR,KAAKmE,QAAU,OAAAC,EAAA,GAAc,CAACpE,KAAKwD,MAAOxD,KAAKyD,SAAUzD,KAAK0D,gBACzDzD,KAAK,OAAAoE,EAAA,GAAa,GAAI,OAAAnE,EAAA,IAAI4B,YAAMA,OAAIwC,OAAOC,OAAPD,aAAMA,CAAQ,IAARA,SAAexC,SAAUM,WAAWN,YAC3E,GAAI9B,EAAK4D,sBACL,OAAO5D,EAAK4D,yBAEhB9B,EAAS,YAAqBA,GAC9BwC,OAAOE,QAAQ1C,GAAQ2C,SAAQ,YAAOrE,aAALkC,EAAKlC,YACb,iBAAVA,GAAsBA,EAAMsE,KACnC5C,EAAUQ,EAAH,MAAclC,EAAMsE,UACpB5C,EAAOQ,OAGlBtC,EAAKgE,OAAOpC,IACZ5B,EAAK2D,UAAUrC,SAASQ,EAAQ9B,EAAKgE,OAAOpC,IAAK5B,EAAKgE,OAAOxD,aACtD8D,OAAOK,KAAK7C,GAAQvB,QAC3BP,EAAK4E,qBAAqB9C,MAI/B9B,OA9DR,2CAiEyB,WACxBA,KAAK6E,aAAe7E,KAAK2D,UAAU/D,UAAUK,KAAK,OAAA6E,EAAA,MAAY1C,WAAU,YAAQhB,I,EAAAA,SAAN2D,EAAM3D,YAItEd,EAAON,EAAKgE,OAAOgB,iBAAkC,QAAhB,EAAAD,iBAAM1E,sBAAU,WAAEa,gBAAiBE,EAAQf,WAAWa,aAApFlB,YACLA,EAAK8D,MAAM1D,OADNJ,EACgBoB,EAAQf,WAAWC,OAC5Cc,EAAQf,WAAWC,KACvBN,EAAK8D,MAAMhD,KAAKR,QAzErB,2CA6E0BwB,GACzB,IAAIxB,EAAIA,EAAON,KAAK6D,cAAczD,OAC9B0B,EAAOmD,QACP3E,EC9GL,SAA8CA,EAAW4E,GAC5D,OAAO5E,EAAK4E,QAAOC,YAAGA,OAY1B,SAAyB7E,EAAc4E,GAEnC,IAAME,EAQH,SAASC,EAAYF,GACxB,OAAOb,OAAOK,KAAKQ,GAAKG,QAAO,SAACC,EAAqBjD,GAAtB,OAUpBiD,GAHOJ,EAAI7C,IAA4B,iBAAb6C,EAAI7C,GACjC+C,EAAYF,EAAI7C,IAChB6C,EAAI7C,IACoB,WAC7B,IAAIkD,cAZJ,CARyBlF,GAGtBmF,EAAoBP,EAAOQ,OAAOF,cAExC,OAA+C,IAAxCJ,EAAQO,QAAQF,GAP3B,CAZ8CN,EAAKD,MAD5C,CD8GmC5E,EAAMwB,EAAOmD,QAE3CnD,EAAO8D,SAAW9D,EAAO+D,WACzBvF,ED7GL,SAA4CA,EAAWsF,EAAiBC,GAC3E,OAAOvF,EAAKwF,MAAK,SAACC,EAAGC,GACjB,IAAIC,EAAS/C,EAAoB6C,EAAGH,GAChCM,EAAShD,EAAoB8C,EAAGJ,GAK9BO,SAAoBF,EACpBG,SAAoBF,EAEtBC,IAAeC,IACI,WAAfD,IACAF,GAAU,IAEK,WAAfG,IACAF,GAAU,KAQlB,IAAIG,EAAmB,EAcvB,OAbc,MAAVJ,GAA4B,MAAVC,EAEdD,EAASC,EACTG,EAAmB,EACZJ,EAASC,IAChBG,GAAoB,GAEP,MAAVJ,EACPI,EAAmB,EACF,MAAVH,IACPG,GAAoB,GAGjBA,GAAiC,QAAbR,EAAqB,GAAK,MAtCtD,CC6GiCvF,EAAMwB,EAAO8D,QAAS9D,EAAO+D,WAE7D7F,KAAK8D,MAAMhD,KAAKR,KArFjB,gCAwFcgC,EAA6BlC,GAC1CJ,KAAKyD,SAAS3C,KAAK,OAAD,wBACXd,KAAKyD,SAASrD,O,sHADF,IAEdkC,EAAMlC,OA3FZ,mCA+FiBkC,GAChB,IAAMgE,EAAU,OAAH,UAAOtG,KAAKyD,SAASrD,cAC3BkG,EAAQhE,GACftC,KAAKyD,SAAS3C,KAAKwF,KAlGpB,8BAqGqD,IAA3CrC,EAA2C,uDAAL,KAC/CjE,KAAKyD,SAAS3C,KAAK,IACnBd,KAAKwD,MAAM1C,KAAK,IAChBd,KAAK+D,cAAcjD,KAAK,IACpBmD,GACAjE,KAAK0D,cAAc5C,KAAKmD,KA1G7B,gDA8G8BsC,EAAyBjG,EAAe0D,cACrE,OAAOhE,KAAKuD,MAAMiD,KAAKD,EAAKjG,EAAM0D,GAAQyC,eACrCxG,KACG,OAAAiF,EAAA,IAAOwB,YAAgBA,QAAMA,KAC7B,OAAAxE,EAAA,IAAI,kBAAMlC,EAAK2G,cAlHxB,8CAsH4BC,GAC3B,IAAMtG,EAAO,OAAH,wBAAOwC,GAAuB,CAAE+D,aAAc,CAACD,cACzD,OAAO5G,KAAKuD,MAAMiD,KAAK,IAAuBlG,GAAMwG,cAC/C7G,KAAK,OAAAiF,EAAA,IAAO6B,YAASA,OAAIA,QAzH/B,yCA6HC,OAAO,OAAP,oDACO/G,KAAKwD,MAAMpD,OACXJ,KAAKyD,SAASrD,OACdJ,KAAK0D,cAActD,OACnBJ,KAAK2D,UAAU7B,UAjIvB,gC,QAsIkB,QAAjB,EAAA9B,KAAK6E,wBAAY,KAAEmC,cACP,QAAZ,EAAAhH,KAAKmE,mBAAO,KAAE6C,gBAvIf,2BAqBC,OAAOhH,KAAK8D,MAAM1D,OArBnB,aAwBME,GACL,IAAM2G,EAASA,EAAO3G,GACtBN,KAAK6D,cAAc/C,KAAKmG,GACxBjH,KAAK8D,MAAMhD,KAAKmG,GAGhBjH,KAAK4D,yBACL5D,KAAK2G,YA/BN,M,oCAAMrD,GAAgB,0C,yBAAhBA,EAAgB,QAAhBA,EAAgB,Y,wFE9BhB4D,EAAqC,CAC9C,CAACC,QAAS,QAASC,QAAS,SAAUC,SAAU,MAAOC,SAAU,SAAUC,QAAS,GACpF,CAACJ,QAAS,MAAOC,QAAS,SAAUC,SAAU,QAASC,SAAU,SAAUC,QAAS,I,qHCEpF,QCWG,IAAMC,EAAN,IAAMA,EAAN,WAEH,WACuClH,EAC3BmH,aAD2B,KAAAnH,OAC3B,KAAAmH,kBAJT,0CAQCzH,KAAKyH,gBAAgBC,YARtB,M,oCAAMF,GAA8B,KAG3B,KAAkB,Y,uBAHrBA,EAA8B,mF,qPDjB3C,iBACI,qBACA,iBAAY,kBAAO,OACvB,OAEA,iBAAmB,mCAAY,EAAAE,WAC3B,+BACJ,OAEA,iBACI,mBAAQ,gCAAS,EAAAA,WAAuD,gBAAK,OACjF,Q,MALkB,kD,2rBCOF,CACR,IAAoBC,kBACvB,oB,oICbD,qBCWG,IAAMC,EAAN,IAAMA,EAAN,WAKH,WACWC,EACCC,aADD,KAAAD,YACC,KAAAC,QANL,KAAAC,cAAgB,IAAI,IAAY/H,KAAK8H,MAAMnG,SAAShB,YAAYsE,OAE9D,KAAA+C,YAHN,6CAUO,WACNhI,KAAK+H,cAAcE,aACdhI,KAAK,OAAAoE,EAAA,GAAa,KAAM,OAAA6D,EAAA,MACxB9F,WAAU6C,YACPjF,EAAK6H,UAAUM,UAAU,QAASlD,UAd3C,M,oCAAM2C,GAAmC,sB,uBAAnCA,EAAmC,2TDbhD,gBACI,kB,gBACA,2BACJ,Q,MAF4C,oDAAmC,+BAChD,mC,wgBEF/B,6B,sBAEI,gBACI,QACJ,Q,yBACA,gBACI,Q,gBACJ,Q,kBADI,gG,qCAOQ,sBAAqG,oEAAWC,UAAA,uBAC5G,QACA,sBACJ,O,oCAH6D,qBAAkB,iBAC3E,gG,qCAHZ,QACI,2BACI,4B,mCAIJ,OACA,uBAAQ,sEACJ,sBACJ,OACJ,O,sBARkB,uDAK6C,yC,yBARnE,iBACI,gCAWA,2CACJ,Q,kBAZkB,2CAWiB,+D,sBAEnC,iBACI,UACJ,Q,ICISO,E,0FAAN,IAAMA,EAAN,WAgBH,WACWP,EACCQ,EACAC,aAFD,KAAAT,YACC,KAAAQ,KACA,KAAAC,eAdH,KAAAC,uBACD,KAAAC,cAAgC,GAGjC,KAAA/E,SAAWzD,KAAK6H,UAAUpE,SAC5BxD,KAAK,OAAAC,EAAA,IAAIuI,YACN,IAAMnC,EAAU,YAAqBmC,GAErC,cADOnC,EAAQrB,MACRqB,MAbZ,6CAsBO,WAEAoC,EAAY1I,KAAK6H,UAAUpE,SAASrB,WAAU,WAChDpC,EAAK2I,gBAAkB3I,EAAK2I,eAAejB,WAEzCkB,EAAY5I,KAAK6H,UAAU9D,cAAc3B,WAAUhC,YACrDJ,EAAK6I,qBAAuBzI,EAAMG,OAClCP,EAAKqI,GAAGS,kBAEZ9I,KAAKwI,cAAgB,CAACE,EAAWE,KA/BlC,oCAmCC5I,KAAKwI,cAAc/D,SAAQsE,YAACA,OAAIA,EAAE/B,mBAnCnC,yCAsCsB,WACrB,GAAIhH,KAAK2I,eACL3I,KAAK2I,eAAejB,YACjB,CACH,IAAMsB,EAAW9B,EAAc+B,QAC/BD,EAAS,GAAGE,QAAU,GACtBF,EAAS,GAAGE,QAAU,GACtBlJ,KAAK2I,eAAiB3I,KAAKsI,aAAa9B,KAAK,EAAgC,CACzE2C,OAAQnJ,KAAKoJ,aACbJ,WACAK,eAAgB,SAChB/I,KAAM,CAACgG,QAAStG,KAAKsJ,qBACrBC,SAAU,QAEdvJ,KAAKoJ,aAAaI,cAAcC,UAAUC,IAAI,UAC9C1J,KAAK2I,eAAe7B,cAAc1E,WAAU,WACxCpC,EAAK2I,eAAiB,KACtB3I,EAAKoJ,aAAaI,cAAcC,UAAUE,OAAO,gBAvD1D,8BA4DYvJ,GACX,MAAwB,iBAAVA,GAAsBA,EAAMsE,OA7D3C,M,oCAAM0D,GAAwB,gC,uBAAxBA,EAAwB,gE,MAAA,K,gHAGE,K,wiCDjCvC,mC,gBACA,gBACI,sBAGA,sBAGJ,OACA,gBACI,sBAcA,sBAGJ,Q,MA3BsD,6EAEhB,qEAGY,mEAKX,qEAcC,qE,q5BExBjC,SAASwB,EAAwBzE,GACpC,IAAM0E,EAAO,OAAH,UAAO1E,GAEjB,OADAb,OAAOK,KAAKkF,GAAMpF,SAAQnC,YAAGA,OAAkB,MAAbuH,EAAKvH,IAA8B,KAAduH,EAAKvH,YAAuBuH,EAAKvH,MACjFuH,EAHX,mC,kCCgBA,sI,oDAiBO,iBAAMC,EAAN,WAeH,WACWC,EACC1B,EACA2B,EACAC,aAHD,KAAAF,UACC,KAAA1B,KACA,KAAA2B,eACA,KAAAC,KAdL,KAAApE,SAA8B,KAO9B,KAAAqE,gBACA,KAAAC,eAA8B,OAblC,6CAsBO,WAECnK,KAAK4F,UACR5F,KAAK4F,QAAU,YAAc5F,KAAKoK,WAAWZ,cAAca,YAAa,MAI5ErK,KAAKsK,QAAUtK,KAAK+J,QAAQvG,MACvBvD,KAAK,aAAO6F,YAAIA,OAAKA,EAAKF,UAAY5F,EAAK4F,YAC3CxD,WAAU,WACPpC,EAAK6F,SAAW,KAChB7F,EAAKuK,eACLvK,EAAKqI,GAAGS,oBAlCjB,wCAwCC9I,KAAKgK,aAAaQ,QAAQxK,KAAKiK,IAAI7H,cAxCpC,oCA4CCpC,KAAKsK,QAAQtD,cACbhH,KAAKgK,aAAaS,eAAezK,KAAKiK,MA7CvC,mCAiDCjK,KAAK+J,QAAQvG,MAAM1C,KAAK,CACpB8E,QAAS5F,KAAK4F,QACdC,SAAU7F,KAAK0K,aAAa1K,KAAK6F,cAnDtC,mCAuDkBzE,GACjB,OAAQA,GACJ,IAAK,MAED,OADApB,KAAKkK,gBACElK,KAAK6F,SAAW,KAC3B,IAAK,OAGD,OAFA7F,KAAKkK,gBACLlK,KAAKmK,eAAiB,KACfnK,KAAK6F,SAAW,MAC3B,QAGI,OAFA7F,KAAKkK,gBACLlK,KAAKmK,eAAiB,OACfnK,KAAK6F,SAAW,UAnEhC,qC,OAwE2B,QAArB,EAAE7F,KAAK+J,QAAQ/F,kBAAM,WAAE2G,eACxB3K,KAAKkK,mBAzEV,qCA8EClK,KAAKkK,gBACElK,KAAK6F,WACR7F,KAAKmK,eAAiB,UAhF3B,oC,OAqF2B,QAArB,EAAEnK,KAAK+J,QAAQ/F,kBAAM,WAAE2G,cACxB3K,KAAK4K,eAtFV,oCA0FkBC,G,OACQ,QAApB,EAAC7K,KAAK+J,QAAQ/F,kBAAM,WAAE2G,cAAgBE,EAAEC,UAAY,KAASD,EAAEC,UAAY,MAC5ED,EAAEE,iBACF/K,KAAK4K,gBA7FV,mC,MAQC,OAA0B,QAA1B,EAAO5K,KAAK+J,QAAQ/F,kBAAM,WAAE2G,gBAR7B,K,6CAAMb,GAAwB,0C,uBAAxBA,EAAwB,gE,MAAA,K,8JAAxB,kB,CAAa,8BAAb,qB,CAAqB,gCAArB,mB,CAAc,gCAAd,oB,iTCjCb,mBACI,QACJ,OACA,iBACI,qBACJ,Q,MAF2B,yCAC8B,8C,k1BD6BlD,I,mGEHMkB,E,gDC5BN,iBAAMC,EAET,WAAmBvG,aAAA,KAAAA,M,OADH,EAAAwG,KAAO,+B,EADpB,GAKA,iBAAMC,EAET,WAAmBzG,aAAA,KAAAA,M,OADH,EAAAwG,KAAO,iC,EADpB,GAKA,iBAAME,EAET,WAAmBC,aAAA,KAAAA,W,OADH,EAAAH,KAAO,iC,EADpB,GAKA,iBAAMI,EAET,WAAmBD,aAAA,KAAAA,W,OADH,EAAAH,KAAO,iC,EADpB,GAKA,iBAAMK,EAAN,wB,OACa,EAAAL,KAAO,+B,EADpB,GCnBMM,EAiBT,aAAgC,IAApB1J,EAAoB,uDAAH,GACzB,IAAK,IAAM2J,KADiB,UACT3J,EACf9B,KAAKyL,GAAQ3J,EAAO2J,I,gEFQnBT,EAAmBA,WAgB5B,WACYU,EACAC,aADA,KAAAD,SACA,KAAAC,SAlBgBX,6CAsBjBY,EAA6CC,cAEpD,OADAD,EAAIE,WAAW,CAACC,SAAQA,IACjB/L,KAAK0L,OAAO1J,IAAI6J,EAAOnH,IAAIzE,KAAK,OAAAiC,EAAA,IAAIG,YACvCuJ,EAAIE,WAAW,CACXE,OAAQ3J,EAAS2J,OACjBC,QAASjM,EAAKkM,eAAe7J,EAAS4J,SACtCF,SAAQA,UA5BQf,mCAkCfY,EAA6CC,GAEtD,OADAD,EAAIE,WAAW,CAACC,SAAQA,IACjB/L,KAAK0L,OAAOS,OAAON,EAAOR,SAASpL,KACtC,OAAAmM,EAAA,IAAS,kBAAMR,EAAIE,WAAW,CAACC,SAAQA,OACvC,OAAA7J,EAAA,IAAIG,YAAQA,OAAIuJ,EAAIE,WAAW,CAACE,OAAQ3J,EAAS2J,eAtC7BhB,mCA2CfY,EAA6CC,GAEtD,OADAD,EAAIE,WAAW,CAACC,SAAQA,IACjB/L,KAAK0L,OAAOW,OAAOT,EAAIU,WAAWN,OAAOtH,GAAImH,EAAOR,SAASpL,KAChE,OAAAmM,EAAA,IAAS,kBAAMR,EAAIE,WAAW,CAACC,SAAQA,OACvC,OAAA7J,EAAA,IAAIG,YAAQA,OAAIuJ,EAAIE,WAAW,CAACE,OAAQ3J,EAAS2J,eA/C7BhB,mCAoDfY,EAA6CC,GAEtD,OADAD,EAAIE,WAAW,CAACC,SAAQA,IACjB/L,KAAK2L,OAAOY,aAAaV,EAAOnH,IAAIzE,KACvC,OAAAiC,EAAA,IAAI,WACA,IAAMsK,EAAaZ,EAAIU,WAAWL,QAAQ/G,QAAOuH,YAAMA,OAC5CA,EAAOC,MAAMhI,KAAOmH,EAAOnH,MAEtCkH,EAAIE,WAAW,CAACG,QAASO,OAE7B,OAAAJ,EAAA,IAAS,kBAAMR,EAAIE,WAAW,CAACC,SAAQA,UA7DnBf,iCAkEjBY,GACPA,EAAIE,WAAW,CACXE,OAAQ,IAAIR,EACZS,QAAS,GACTF,SAAQA,MAtEYf,qCA0ELiB,GACnB,IAAMU,EAAc,GAIpB,OAHArI,OAAOK,KAAKsH,GAASxH,SAAQnC,YACzBqK,EAAYC,KAAZD,QAAWA,EAASV,EAAQ3J,QAEzBqK,KA/EiB3B,8BAEd6B,GACV,OAAOA,EAAMb,SAHWhB,8BAOb6B,GACX,OAAOA,EAAMd,UARWf,8BAYb6B,GACX,OAAOA,EAAMZ,YAbWjB,M,oCAAnBA,GAAmB,sB,yBAAnBA,EAAmB,QAAnBA,EAAmB,YAsB5B,aADC,YAAOC,I,+BAaR,aADC,YAAOG,I,iCAUR,aADC,YAAOE,I,iCAUR,aADC,YAAOH,I,iCAeR,aADC,YAAOI,I,+BA/DR,aADC,e,iBAMD,aADC,e,kBAMD,aADC,e,kBAXQP,EAAmB,aAT/B,YAAgC,CAC7BS,KAAM,iBACNqB,SAAU,CACNd,OAAQ,IAAIR,EACZS,QAAS,GACTF,SAAQA,MAIHf,I,qRG2DG,aACI,aACI,iBACI,yBACA,eAAM,QAAe,OACzB,OACJ,OACA,gBAA8C,QAA0D,OACxG,gBAA+C,QAA6D,OAC5G,iBAAwC,SAA8C,OACtF,iBACI,qBAAsC,oFAClC,uBACJ,OACJ,OACJ,O,0BAZyB,6BACP,qBAGgC,qEACC,8EACP,0D,sBAUhD,gCACI,kBAAyB,8BAAmB,OAChD,QC1GZ,IC2Ba+B,EDfAC,EE8BAC,EF1CPC,EAAiB,CACnB,CACIC,KAAM,GACNC,WCwBKL,EAAN,WAkBH,WACYM,EACAC,EACAjO,EACAkO,EACAzF,EACA0F,EACD3F,aANC,KAAAwF,QACA,KAAAC,QACA,KAAAjO,SACA,KAAAkO,KACA,KAAAzF,QACA,KAAA0F,cACD,KAAA3F,YAtBJ,KAAA4F,QAAU,IAAIhO,EAAA,EAAwB,MAEtC,KAAAiO,WAAa1N,KAAKuN,GAAGI,MAAM,CAC9BlC,KAAM,CAAC,IACPmC,OAAQ,CAAC,IACTC,WAAY,CAAC,IACbC,YAAa,CAAC,IACdC,UAAW,CAAC,IACZC,YAAa,CAAC,IACdC,WAAY,CAAC,IACbC,WAAY,CAAC,IACbC,OAAQ,CAAC,MACTC,aAAc,EAAC,KAfhB,6CA4BO,WACNpO,KAAK6H,UAAU1G,OACfnB,KAAK8H,MAAMhG,OAAOM,WAAUN,YACxB9B,EAAKqO,WAAWvM,MAGpB9B,KAAKqN,MAAMiB,OAAO,EAAoBrC,SAAS7J,WAAU6J,YACrDjM,EAAK6H,UAAUvH,KAAO2L,KAG1BjM,KAAK0N,WAAW1L,IAAI,UAAUiG,aAAa7F,WAAUhC,YACjDJ,EAAKyN,QAAQ3M,KAAKV,QAvCvB,oCA4CCJ,KAAKqN,MAAMkB,SAAS,IAAIhD,GACxBvL,KAAK6H,UAAU2G,YA7ChB,qCAgDkB,WACjB,YAAiB,CAACC,MAAO,CAAC,IAAiBC,SAASC,MAAKC,YAOrD5O,EAAKwN,YAAYqB,MAAMD,EANR,CACXhN,IAAK,iBACLkN,WAAY,CACRC,WAAY,0BAGmB3M,WAAUC,YAC7CrC,EAAK0N,WAAWsB,WAAW,CACvBpB,OAAQvL,EAAS4M,UAAUvO,cA1DxC,iCAgEgBoB,cACRA,EAAO4C,IACd1E,KAAKqN,MAAMkB,SAAS,IAAItD,GAAYnJ,EAAO4C,KAAKtC,WAAU,WACtD,IAAM4J,EAAShM,EAAKqN,MAAM6B,eAAe,EAAoBlD,QAC7DhM,EAAK0N,WAAWsB,WAAWhD,GAC3BhM,EAAKyN,QAAQ3M,KAAKkL,EAAO4B,aArE9B,+BAyEY,WACL5B,EAAShM,KAAKqN,MAAM6B,eAAe,EAAoBlD,QAEzDhM,KAAKqN,MAAMkB,SADEvC,EAAOtH,GACA,IAAI4G,EAAatL,KAAK0N,WAAWtN,OACjC,IAAIgL,EAAapL,KAAK0N,WAAWtN,QAEhDgC,WAAU,WACfpC,EAAKX,OAAOqD,SAAS,CAAC1C,EAAKX,OAAOqB,IAAIyO,SAAS,SAAW,eAAiBnP,EAAKX,OAAOqB,IAAI0O,MAAM,KAAK,GAAGC,QAAQ,QAAS,MAC1HrP,EAAKsN,MAAM9G,KAAKwF,EAAOtH,GAAK,IAAS4K,sBAAwB,IAASC,4BAjF3E,mCAqFiB9C,cACTA,EAAOC,OACd1M,KAAKqN,MAAMkB,SAAS,IAAIpD,EAAasB,EAAOC,MAAMhI,KAC7CtC,WAAU,WACPpC,EAAKsN,MAAM9G,KAAK,IAASgJ,8BAzFlC,K,sCAAMzC,GAA2B,wE,uBAA3BA,EAA2B,oDALzB,CACP,IACA,OACH,6zEF7BL,0BACI,oB,gBACI,iBAAkC,mCAAY,EAAA0C,YAC1C,gBACI,wB,gBACA,mBAAmF,eAAI,OAC3F,OACA,gBACI,iBACI,iBACI,mBAAwB,gBAAI,OAC5B,oBACJ,OACA,iBACI,oBAA6B,qBAAS,OACtC,oBACJ,OACJ,OAEA,iBACI,oBAA0B,iBAAK,OAC/B,kBACI,qBAAqD,gCAAS,EAAAC,kB,iBAC1D,uBACJ,OACA,oBACJ,OACJ,OAEA,iBACI,oBAA+B,qBAAS,OACxC,uBACJ,OAEA,iBACI,iBACI,oBAA0B,kBAAM,OAChC,qBACI,qBAAyB,aAAC,OAC1B,qBAA2B,gBAAI,OAC/B,qBAA6B,kBAAM,OACvC,OACJ,OACA,iBACI,oBAA8B,sBAAU,OACxC,oBACJ,OACA,iBACI,oBAA8B,sBAAU,OACxC,oBACJ,OACJ,OAEA,iBACI,iBACI,oBAA8B,sBAAU,OACxC,oBACJ,OAEA,iBACI,oBAA+B,uBAAW,OAC1C,oBACJ,OAEA,iBACI,oBAAgC,6BAAiB,OACjD,qBACI,qBAA+B,eAAG,OAClC,qBAAgC,cAAE,OACtC,OACJ,OACJ,OACJ,OACJ,OACJ,OACA,qB,iBACI,kBACI,4BACA,oBACI,iBACA,cACI,iBAAmC,kBAAM,OACzC,iBAA8C,qBAAS,OACvD,iBAA+C,sBAAU,OACzD,iBAAwC,eAAG,OAC3C,cACJ,OACA,OACA,iBACA,wB,iBAgBA,OACJ,OAEA,uC,iBAGJ,OACJ,OACJ,OAEA,gC,wBAlHa,iDACmD,uCAEnC,yCAkByE,wDAgBlE,8BA6BA,4BACA,2BAOvB,4CAcO,uDAmBY,2DAOb,mD,qjDEnFsB,aAApC,YAAO,EAAoB3D,U,+BACS,aAApC,YAAO,EAAoBE,U,kCDzBxB3L,KAAM,CAACqP,YAAa,CAAC,oBAQtB,IAAM3C,EAAN,yB,qBAAMA,I,oDAAAA,IAA2B,SAH7B,CAAC,IAAa4C,SAAS1C,IACtB,O,gEEgCL,KAAMD,EAAN,yB,qBAAMA,I,oDAAAA,IAAoB,SAvBpB,CACL,IACA,EACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEA,IAAW4C,WAAW,CAClB,IAIJ,IACA,IACA,IACA,IACA,Q","file":"x","sourcesContent":["import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TableSortHeaderComponent} from './table-sort-header/table-sort-header.component';\nimport {MatIconModule} from '@angular/material/icon';\nimport {TranslationsModule} from '../core/translations/translations.module';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {UserColumnComponent} from './columns/user-column/user-column.component';\nimport {TableBodyCheckboxComponent} from './selection/table-body-checkbox.component';\nimport {TableHeaderCheckboxComponent} from './selection/table-header-checkbox.component';\nimport {DatatableFooterComponent} from './datatable-footer/datatable-footer.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatButtonModule} from '@angular/material/button';\nimport {DatatableHeaderComponent} from './datatable-header/datatable-header.component';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {DatatableFiltersPanelComponent} from './datatable-filters-panel/datatable-filters-panel.component';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {ChipsModule} from '../core/ui/chips/chips.module';\nimport { DatatableHeaderSearchInputComponent } from './datatable-header/datatable-header-search-input/datatable-header-search-input.component';\nimport {NoResultsMessageModule} from '../core/ui/no-results-message/no-results-message.module';\nimport {NoResultsMessageComponent} from '../core/ui/no-results-message/no-results-message.component';\n\n@NgModule({\n    declarations: [\n        TableSortHeaderComponent,\n        UserColumnComponent,\n        TableBodyCheckboxComponent,\n        TableHeaderCheckboxComponent,\n        DatatableFooterComponent,\n        DatatableHeaderComponent,\n        DatatableHeaderSearchInputComponent,\n        DatatableFiltersPanelComponent,\n        DatatableHeaderSearchInputComponent,\n    ],\n    imports: [\n        CommonModule,\n        TranslationsModule,\n        ReactiveFormsModule,\n        FormsModule,\n        ChipsModule,\n        NoResultsMessageModule,\n\n        // material\n        MatButtonModule,\n        MatIconModule,\n        MatCheckboxModule,\n        MatChipsModule,\n        MatProgressBarModule,\n    ],\n    exports: [\n        TableSortHeaderComponent,\n        MatCheckboxModule,\n        UserColumnComponent,\n        TableBodyCheckboxComponent,\n        TableHeaderCheckboxComponent,\n        DatatableFooterComponent,\n        DatatableHeaderComponent,\n        DatatableFiltersPanelComponent,\n        DatatableHeaderSearchInputComponent,\n        NoResultsMessageComponent,\n    ]\n})\nexport class DatatableModule {\n}\n","import {Params, Router} from '@angular/router';\r\nimport {BehaviorSubject, of, Subscription} from 'rxjs';\r\nimport {map, switchMap, tap} from 'rxjs/operators';\r\nimport {PaginationResponse} from '@common/core/types/pagination/pagination-response';\r\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\r\nimport {PaginatedBackendResponse} from '@common/core/types/pagination/paginated-backend-response';\r\nimport {PaginationParams} from '@common/core/types/pagination/pagination-params';\r\nimport {Injectable} from '@angular/core';\r\nimport {LocalStorage} from '@common/core/services/local-storage.service';\r\n\r\n@Injectable()\r\nexport class Paginator<T> {\r\n    private subscription: Subscription;\r\n    private params$ = new BehaviorSubject<PaginationParams>({});\r\n    public paginatedOnce$ = new BehaviorSubject<boolean>(false);\r\n    public loading$ = new BehaviorSubject(false);\r\n    public response$ = new BehaviorSubject<{pagination: PaginationResponse<T>, [key: string]: any}>(null);\r\n    public dontUpdateQueryParams = false;\r\n    public perPageCacheKey: string = null;\r\n    /** only true if data was already loaded from backend and it was empty */\r\n    public noResults$ = this.response$.pipe(map(r => this.paginatedOnce$.value && r.pagination.data.length === 0));\r\n\r\n    get params(): PaginationParams {\r\n        return this.params$.value;\r\n    }\r\n\r\n    get currentPage(): number {\r\n        return this.response$.value?.pagination?.current_page;\r\n    }\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private http: AppHttpClient,\r\n        private localStorage?: LocalStorage,\r\n    ) {}\r\n\r\n    public paginate(userParams: object = {}, url?: string, initialData?: PaginationResponse<T>) {\r\n        // only use query params on first pagination, so query params can be removed via user params\r\n        const queryParams = !this.subscription ? this.currentQueryParams() : {};\r\n        const paginationParams = this.response$.value ? {\r\n            perPage: this.response$.value.pagination.per_page,\r\n            page: this.response$.value.pagination.current_page\r\n        } : {};\r\n        this.params$.next({...paginationParams, ...queryParams, ...userParams});\r\n\r\n        if ( ! this.subscription) {\r\n            this.init(url, initialData);\r\n        }\r\n    }\r\n\r\n    public nextPage() {\r\n        const current = this.response$.value.pagination.current_page;\r\n        const total = this.response$.value.pagination.total;\r\n        const next = current + 1;\r\n        this.paginate({\r\n            ...this.params$.value,\r\n            page: !current || next > total ? current : next\r\n        });\r\n    }\r\n\r\n    public previousPage() {\r\n        const current = this.response$.value.pagination.current_page;\r\n        this.paginate({\r\n            ...this.params$.value,\r\n            page: (current - 1) || 1\r\n        });\r\n    }\r\n\r\n    public changePerPage(newPerPage: number) {\r\n        if (newPerPage !== this.params$.value?.perPage) {\r\n            if (this.perPageCacheKey) {\r\n                this.localStorage.set(this.perPageCacheKey, newPerPage);\r\n            }\r\n            this.paginate({\r\n                ...this.params$.value,\r\n                perPage: newPerPage\r\n            });\r\n        }\r\n    }\r\n\r\n    public currentQueryParams(): Params {\r\n        return this.router.routerState.root.snapshot.queryParams;\r\n    }\r\n\r\n    private init(uri: string, initialData?: PaginationResponse<T>) {\r\n        this.subscription = this.params$.pipe(\r\n            switchMap(params => {\r\n                this.loading$.next(true);\r\n                const firstPagination = !this.paginatedOnce$.value;\r\n                if (firstPagination && this.perPageCacheKey && this.localStorage.get(this.perPageCacheKey)) {\r\n                    params = {perPage: this.localStorage.get(this.perPageCacheKey), ...params};\r\n                }\r\n\r\n                // if we got initial pagination response (of 1st page)\r\n                // return that instead of making 1st page http request\r\n                const request = firstPagination && initialData ?\r\n                    of({pagination: initialData}) :\r\n                    this.http.get(uri, params);\r\n\r\n                return (request as PaginatedBackendResponse<T>).pipe(\r\n                    // can't use \"finalize\" here as it will complete after loading$.next(true)\r\n                    // call above, which will prevent loading bar from showing\r\n                    // if pagination request is cancelled and new one is queued\r\n                    tap(() => {\r\n                        this.updateQueryParams(params);\r\n                        this.loading$.next(false);\r\n                        this.paginatedOnce$.next(true);\r\n                    }, () => {\r\n                        this.loading$.next(false);\r\n                        this.paginatedOnce$.next(true);\r\n                    })\r\n                ) as PaginatedBackendResponse<T>;\r\n            })\r\n        ).subscribe(response => {\r\n            this.response$.next(response);\r\n        });\r\n    }\r\n\r\n    private updateQueryParams(params = {}) {\r\n        if (this.dontUpdateQueryParams) return;\r\n        for (const key in params) {\r\n            if (Array.isArray(params[key])) {\r\n                params[key] = params[key].join(',');\r\n            }\r\n        }\r\n        this.router.navigate([], {queryParams: params, replaceUrl: true});\r\n    }\r\n\r\n    public canLoadNextPage() {\r\n        return this.response$.value &&\r\n            this.currentPage < this.response$.value?.pagination?.last_page;\r\n    }\r\n}\r\n","import {ConfirmModalData} from '../core/ui/confirm-modal/confirm-modal.component';\r\n\r\nexport const DELETE_RESOURCE_MESSAGE: ConfirmModalData = {\r\n    title: `Delete :resource`,\r\n    body:  `Are you sure you want to delete selected :resource?`,\r\n    ok:    'Delete'\r\n};\r\n","import * as Dot from \"dot-object\";\r\nimport {_isNumberValue} from '@angular/cdk/coercion';\r\nimport {Model} from '@common/core/types/models/model';\r\n\r\nconst MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\nexport function sortDatatableData<T extends Model>(data: T[], orderBy: string, orderDir: string): T[] {\r\n    return data.sort((a, b) => {\r\n        let valueA = sortingDataAccessor(a, orderBy);\r\n        let valueB = sortingDataAccessor(b, orderBy);\r\n\r\n        // If there are data in the column that can be converted to a number,\r\n        // it must be ensured that the rest of the data\r\n        // is of the same type so as not to order incorrectly.\r\n        const valueAType = typeof valueA;\r\n        const valueBType = typeof valueB;\r\n\r\n        if (valueAType !== valueBType) {\r\n            if (valueAType === 'number') {\r\n                valueA += '';\r\n            }\r\n            if (valueBType === 'number') {\r\n                valueB += '';\r\n            }\r\n        }\r\n\r\n        // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\r\n        // one value exists while the other doesn't. In this case, existing value should come last.\r\n        // This avoids inconsistent results when comparing values to undefined/null.\r\n        // If neither value exists, return 0 (equal).\r\n        let comparatorResult = 0;\r\n        if (valueA != null && valueB != null) {\r\n            // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\r\n            if (valueA > valueB) {\r\n                comparatorResult = 1;\r\n            } else if (valueA < valueB) {\r\n                comparatorResult = -1;\r\n            }\r\n        } else if (valueA != null) {\r\n            comparatorResult = 1;\r\n        } else if (valueB != null) {\r\n            comparatorResult = -1;\r\n        }\r\n\r\n        return comparatorResult * (orderDir === 'asc' ? 1 : -1);\r\n    });\r\n}\r\n\r\n/**\r\n * Data accessor function that is used for accessing data properties for sorting through\r\n * the default sortData function.\r\n * This default function assumes that the sort header IDs (which defaults to the column name)\r\n * matches the data's properties (e.g. column Xyz represents data['Xyz']).\r\n * May be set to a custom function for different behavior.\r\n */\r\nfunction sortingDataAccessor(data: object, sortHeaderId: string): string {\r\n    const value = Dot.pick(sortHeaderId, data);\r\n\r\n    if (_isNumberValue(value)) {\r\n        const numberValue = Number(value);\r\n\r\n        // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\r\n        // leave them as strings. For more info: https://goo.gl/y5vbSg\r\n        return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\r\n    }\r\n\r\n    // if (Array.isArray(value)) {\r\n    //     return value.reduce((prev, curr) => prev += objectToStr(curr));\r\n    // }\r\n\r\n    return value;\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject, combineLatest, Subscription} from 'rxjs';\nimport {Paginator} from '../shared/paginator.service';\nimport {debounceTime, filter, map, pairwise, skip, tap} from 'rxjs/operators';\nimport {DatatableFilters, DatatableFilterValue} from './types/datatable-filters';\nimport {DatatableSort} from './types/datatable-sort';\nimport {PaginationParams} from '../core/types/pagination/pagination-params';\nimport {removeNullFromObject} from '../core/utils/remove-null-from-object';\nimport {ComponentType} from '@angular/cdk/portal';\nimport {MatDialogConfig} from '@angular/material/dialog';\nimport {Modal} from '../core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '../core/ui/confirm-modal/confirm-modal.component';\nimport {DELETE_RESOURCE_MESSAGE} from './delete-resource-message';\nimport {PaginationResponse} from '../core/types/pagination/pagination-response';\nimport {sortDatatableData} from '@common/datatable/utils/sort-datatable-data';\nimport {Model} from '@common/core/types/models/model';\nimport {filterDatatableData} from '@common/datatable/utils/filter-datatable-data';\nimport {Router} from '@angular/router';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {LocalStorage} from '../core/services/local-storage.service';\n\nexport type DatatableStaticParams = Record<string, string|number|boolean|string[]>;\n\ninterface DatatableConfig<T> {\n    uri?: string;\n    staticParams?: DatatableStaticParams;\n    initialData?: PaginationResponse<T>|T[];\n    disableSort?: boolean;\n    infiniteScroll?: boolean;\n}\n\n@Injectable()\nexport class DatatableService<T extends Model> {\n    public sort$ = new BehaviorSubject<DatatableSort>({});\n    public filters$ = new BehaviorSubject<DatatableFilters>({});\n    public staticParams$ = new BehaviorSubject<DatatableStaticParams>({});\n    public paginator = new Paginator<T>(this.router, this.http, this.localStorage);\n    private paginatorSub: Subscription;\n    private mainSub: Subscription;\n    private ignoreNextParamChange = false;\n    private originalData$ = new BehaviorSubject<T[]>([]);\n    public data$ = new BehaviorSubject<T[]>([]);\n    public selectedRows$ = new BehaviorSubject<number[]>([]);\n    public config: DatatableConfig<T>;\n\n    constructor(\n        protected modal: Modal,\n        protected router: Router,\n        protected http: AppHttpClient,\n        protected localStorage: LocalStorage,\n    ) {}\n\n    get data() {\n        return this.data$.value;\n    }\n\n    set data(data: T[]) {\n        const tableData = [...data];\n        this.originalData$.next(tableData);\n        this.data$.next(tableData);\n\n        // Reset filters and sort without trigger data reload via pagination\n        this.ignoreNextParamChange = true;\n        this.reset();\n    }\n\n    public init(config: DatatableConfig<T> = {}) {\n        this.config = config;\n        this.staticParams$.next({...this.staticParams$.value, ...config.staticParams});\n        if (config.uri) {\n            this.connectToPaginator();\n        } else if (config.initialData) {\n            this.data = config.initialData as T[];\n        }\n\n        this.mainSub = combineLatest([this.sort$, this.filters$, this.staticParams$])\n            .pipe(debounceTime(0), map(params => Object.assign({}, ...params))).subscribe((params: PaginationParams) => {\n                if (this.ignoreNextParamChange) {\n                    return this.ignoreNextParamChange = false;\n                }\n                params = removeNullFromObject(params);\n                Object.entries(params).forEach(([key, value]) => {\n                    if (typeof value === 'object' && value.id) {\n                        params[`${key}Id`] = value.id;\n                        delete params[key];\n                    }\n                });\n                if (this.config.uri) {\n                    this.paginator.paginate(params, this.config.uri, this.config.initialData as PaginationResponse<T>);\n                } else if (Object.keys(params).length) {\n                    this.applyLocalTransforms(params);\n                }\n            });\n\n        return this;\n    }\n\n    private connectToPaginator() {\n        this.paginatorSub = this.paginator.response$.pipe(pairwise()).subscribe(([prev, current]) => {\n            // append data instead of overriding with next page data (infinite scroll).\n            // if page did not change, we can assume that it was filter or sort\n            // change and we should use only new data, even on infinite scroll\n            const data = this.config.infiniteScroll && prev?.pagination?.current_page !== current.pagination.current_page ?\n                [...this.data$.value, ...current.pagination.data] :\n                current.pagination.data;\n            this.data$.next(data);\n        });\n    }\n\n    private applyLocalTransforms(params: PaginationParams) {\n        let data = [...this.originalData$.value];\n        if (params.query) {\n            data = filterDatatableData<T>(data, params.query);\n        }\n        if (params.orderBy && params.orderDir) {\n            data = sortDatatableData<T>(data, params.orderBy, params.orderDir);\n        }\n        this.data$.next(data);\n    }\n\n    public addFilter(key: keyof DatatableFilters, value: DatatableFilterValue) {\n        this.filters$.next({\n            ...this.filters$.value,\n            [key]: value,\n        });\n    }\n\n    public removeFilter(key: keyof DatatableFilters) {\n        const filters = {...this.filters$.value};\n        delete filters[key];\n        this.filters$.next(filters);\n    }\n\n    public reset(staticParams: DatatableStaticParams = null) {\n        this.filters$.next({});\n        this.sort$.next({});\n        this.selectedRows$.next([]);\n        if (staticParams) {\n            this.staticParams$.next(staticParams);\n        }\n    }\n\n    public openCrupdateResourceModal(cmp: ComponentType<any>, data?: object, config?: MatDialogConfig) {\n        return this.modal.open(cmp, data, config).beforeClosed()\n            .pipe(\n                filter(modifiedResource => !!modifiedResource),\n                tap(() => this.reset())\n            );\n    }\n\n    public confirmResourceDeletion(resource: string) {\n        const data = {...DELETE_RESOURCE_MESSAGE, replacements: {resource}};\n        return this.modal.open(ConfirmModalComponent, data).afterClosed()\n            .pipe(filter(confirmed => confirmed));\n    }\n\n    public getCurrentParams() {\n        return {\n            ...this.sort$.value,\n            ...this.filters$.value,\n            ...this.staticParams$.value,\n            ...this.paginator.params,\n        };\n    }\n\n    public destroy() {\n        this.paginatorSub?.unsubscribe();\n        this.mainSub?.unsubscribe();\n    }\n}\n","import {Model} from '../../core/types/models/model';\r\n\r\nexport function filterDatatableData<T extends Model>(data: T[], filter: string): T[] {\r\n    return data.filter(obj => filterPredicate(obj, filter));\r\n}\r\n/**\r\n * Checks if a data object matches the data source's filter string. By default, each data object\r\n * is converted to a string of its properties and returns true if the filter has\r\n * at least one occurrence in that string. By default, the filter string has its whitespace\r\n * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\r\n * filter matching.\r\n * @param data Data object used to check against the filter.\r\n * @param filter Filter string that has been set on the data source.\r\n * @returns Whether the filter matches against the data\r\n */\r\nfunction filterPredicate(data: object, filter: string): boolean {\r\n    // Transform the data into a lowercase string of all property values.\r\n    const dataStr = objectToStr(data);\r\n\r\n    // Transform the filter by converting it to lowercase and removing whitespace.\r\n    const transformedFilter = filter.trim().toLowerCase();\r\n\r\n    return dataStr.indexOf(transformedFilter) !== -1;\r\n}\r\n\r\nexport function objectToStr(obj: object) {\r\n    return Object.keys(obj).reduce((currentTerm: string, key: string) => {\r\n        // Use an obscure Unicode character to delimit the words in the concatenated string.\r\n        // This avoids matches where the values of two columns combined will match the user's query\r\n        // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\r\n        // that has a very low chance of being typed in by somebody in a text field. This one in\r\n        // particular is \"White up-pointing triangle with dot\" from\r\n        // https://en.wikipedia.org/wiki/List_of_Unicode_characters\r\n        const term = (obj[key] && typeof obj[key] === 'object') ?\r\n            objectToStr(obj[key]) :\r\n            obj[key];\r\n        return currentTerm + term + '◬';\r\n    }, '').toLowerCase();\r\n}\r\n","import { ConnectedPosition } from '@angular/cdk/overlay';\r\n\r\nexport const LEFT_POSITION: ConnectedPosition[] = [\r\n    {originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center', offsetX: 5},\r\n    {originX: 'end', originY: 'center', overlayX: 'start', overlayY: 'center', offsetX: 5},\r\n];\r\n","<header>\n    <mat-icon svgIcon=\"filter-list\"></mat-icon>\n    <span trans>Filters</span>\n</header>\n\n<form class=\"body\" (ngSubmit)=\"close()\">\n    <ng-container *ngTemplateOutlet=\"data.filters\"></ng-container>\n</form>\n\n<footer>\n    <button (click)=\"close()\" type=\"button\" mat-button color=\"accent\" trans>Close</button>\n</footer>\n","import {ChangeDetectionStrategy, Component, ElementRef, Inject, TemplateRef} from '@angular/core';\nimport {OVERLAY_PANEL_DATA} from '../../core/ui/overlay-panel/overlay-panel-data';\nimport {OverlayPanelRef} from '../../core/ui/overlay-panel/overlay-panel-ref';\nimport {matDialogAnimations} from '@angular/material/dialog';\n\n@Component({\n    selector: 'datatable-filters-panel',\n    templateUrl: './datatable-filters-panel.component.html',\n    styleUrls: ['./datatable-filters-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[@dialogContainer]': `'enter'`\n    },\n    animations: [\n        matDialogAnimations.dialogContainer,\n    ]\n})\nexport class DatatableFiltersPanelComponent {\n\n    constructor(\n        @Inject(OVERLAY_PANEL_DATA) public data: {filters: TemplateRef<ElementRef>},\n        private overlayPanelRef: OverlayPanelRef,\n    ) {}\n\n    public close() {\n        this.overlayPanelRef.close();\n    }\n}\n","<div class=\"input-container search-input-container\">\n    <input type=\"text\" class=\"search-input\" [placeholder]=\"placeholder | trans\" [formControl]=\"searchControl\">\n    <mat-icon svgIcon=\"search\" *ngIf=\"!hideIcon\"></mat-icon>\n</div>\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {debounceTime, distinctUntilChanged} from 'rxjs/operators';\nimport {DatatableService} from '../../datatable.service';\nimport {Model} from '@common/core/types/models/model';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n    selector: 'datatable-header-search-input',\n    templateUrl: './datatable-header-search-input.component.html',\n    styleUrls: ['./datatable-header-search-input.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DatatableHeaderSearchInputComponent implements OnInit {\n    public searchControl = new FormControl(this.route.snapshot.queryParams.query);\n    @Input() placeholder: string;\n    @Input() hideIcon = false;\n\n    constructor(\n        public datatable: DatatableService<Model>,\n        private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit() {\n        this.searchControl.valueChanges\n            .pipe(debounceTime(400), distinctUntilChanged())\n            .subscribe(query => {\n                this.datatable.addFilter('query', query);\n            });\n    }\n}\n","<mat-progress-bar mode=\"indeterminate\" color=\"accent\" *ngIf=\"datatable.paginator && datatable.paginator.loading$ | async\"></mat-progress-bar>\n<div class=\"left-column\">\n    <div class=\"default-left-content\" *ngIf=\"!showSelectedActions || !numberOfRowsSelected\">\n        <ng-content select=\"[leftContent]\"></ng-content>\n    </div>\n    <div class=\"selected-left-content capitalize\" *ngIf=\"showSelectedActions && numberOfRowsSelected\">\n        {{numberOfRowsSelected}} {{ pluralResourceName }} {{ 'Selected' | trans }}\n    </div>\n</div>\n<div class=\"right-column\">\n    <div class=\"default-right-content\" *ngIf=\"!showSelectedActions || !numberOfRowsSelected\">\n        <ng-container *ngIf=\"filterPanelTemplate\">\n            <mat-chip-list aria-label=\"Active Filters\" class=\"filter-chip-list\">\n                <mat-chip *ngFor=\"let filter of filters$ | async | keyvalue\" [removable]=\"true\" [selectable]=\"false\" (removed)=\"datatable.removeFilter(filter.key)\">\n                    {{filter.key}}: {{isModel(filter.value) ? (filter.value.name || filter.value.display_name) : filter.value}}\n                    <mat-icon matChipRemove svgIcon=\"cancel\"></mat-icon>\n                </mat-chip>\n            </mat-chip-list>\n            <button (click)=\"openFiltersPanel()\" class=\"filter-button\" [class.active]=\"filterPanelRef\" #filterButton mat-icon-button>\n                <mat-icon svgIcon=\"filter-list\"></mat-icon>\n            </button>\n        </ng-container>\n        <datatable-header-search-input placeholder=\"Search {{ pluralResourceName }}\"></datatable-header-search-input>\n    </div>\n    <div class=\"selected-right-actions\" *ngIf=\"showSelectedActions && numberOfRowsSelected\">\n        <ng-content select=\"[rightContent]\"></ng-content>\n    </div>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport {DatatableService} from '../datatable.service';\nimport {Model} from '../../core/types/models/model';\nimport {Subscription} from 'rxjs';\nimport {OverlayPanel} from '../../core/ui/overlay-panel/overlay-panel.service';\nimport {LEFT_POSITION} from '../../core/ui/overlay-panel/positions/left-position';\nimport {OverlayPanelRef} from '../../core/ui/overlay-panel/overlay-panel-ref';\nimport {DatatableFiltersPanelComponent} from '../datatable-filters-panel/datatable-filters-panel.component';\nimport {map} from 'rxjs/operators';\nimport {removeNullFromObject} from '../../core/utils/remove-null-from-object';\nimport {DatatableFilterValue} from '../types/datatable-filters';\n\n@Component({\n    selector: 'datatable-header',\n    templateUrl: './datatable-header.component.html',\n    styleUrls: ['./datatable-header.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DatatableHeaderComponent implements OnInit, OnDestroy {\n    @HostBinding('class.rows-selected') public numberOfRowsSelected: number;\n    @ContentChild('tableFilters') filterPanelTemplate: TemplateRef<ElementRef>;\n    @ViewChild('filterButton', { read: ElementRef }) filterButton: ElementRef<HTMLButtonElement>;\n    @Input() pluralResourceName: string;\n    @Input() showSelectedActions = true;\n    private subscriptions: Subscription[] = [];\n    public filterPanelRef: OverlayPanelRef<any>;\n\n    public filters$ = this.datatable.filters$\n        .pipe(map(v => {\n            const filters = removeNullFromObject(v);\n            delete filters.query;\n            return filters;\n        }));\n\n    constructor(\n        public datatable: DatatableService<Model>,\n        private cd: ChangeDetectorRef,\n        private overlayPanel: OverlayPanel,\n    ) {}\n\n    ngOnInit() {\n        // close filter panel when any filter is selected.\n        const filterSub = this.datatable.filters$.subscribe(() => {\n            this.filterPanelRef && this.filterPanelRef.close();\n        });\n        const changeSub = this.datatable.selectedRows$.subscribe(value => {\n            this.numberOfRowsSelected = value.length;\n            this.cd.markForCheck();\n        });\n        this.subscriptions = [filterSub, changeSub];\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n    public openFiltersPanel() {\n        if (this.filterPanelRef) {\n            this.filterPanelRef.close();\n        } else {\n            const position = LEFT_POSITION.slice();\n            position[0].offsetY = 40;\n            position[1].offsetY = 40;\n            this.filterPanelRef = this.overlayPanel.open(DatatableFiltersPanelComponent, {\n                origin: this.filterButton,\n                position,\n                mobilePosition: 'center',\n                data: {filters: this.filterPanelTemplate},\n                maxWidth: '90%',\n            });\n            this.filterButton.nativeElement.classList.add('active');\n            this.filterPanelRef.afterClosed().subscribe(() => {\n                this.filterPanelRef = null;\n                this.filterButton.nativeElement.classList.remove('active');\n            });\n        }\n    }\n\n    public isModel(value: DatatableFilterValue) {\n        return typeof value === 'object' && value.id;\n    }\n}\n","export function removeNullFromObject<T>(obj: T): T {\r\n    const copy = {...obj};\r\n    Object.keys(copy).forEach(key => (copy[key] == null || copy[key] === '') && delete copy[key]);\r\n    return copy;\r\n}\r\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\nimport {DatatableService} from '../datatable.service';\nimport {Subscription} from 'rxjs';\nimport {Model} from '../../core/types/models/model';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {filter} from 'rxjs/operators';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {slugifyString} from '../../core/utils/slugify-string';\n\n@Component({\n    selector: '[table-sort-header]',\n    templateUrl: './table-sort-header.component.html',\n    styleUrls: ['./table-sort-header.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        'tabindex': '0',\n        '(click)': 'handleClick()',\n        '(keydown)': 'handleKeydown($event)',\n        '(mouseenter)': 'onMouseEnter()',\n        '(mouseleave)': 'onMouseLeave()',\n    }\n})\nexport class TableSortHeaderComponent implements OnInit, AfterViewInit, OnDestroy {\n    @ViewChild('columnName', {static: true}) columnName: ElementRef<HTMLElement>;\n    @Input('table-sort-header') public orderBy: string;\n\n    @HostBinding('class.active')\n    public orderDir: 'desc'|'asc'|null = null;\n\n    @HostBinding('class.sort-disabled') get sortDisabled() {\n        return this.datable.config?.disableSort;\n    }\n\n    private sortSub: Subscription;\n    public arrowVisible = false;\n    public arrowDirection: 'down'|'up' = 'down';\n\n    constructor(\n        public datable: DatatableService<Model>,\n        private cd: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private el: ElementRef<HTMLElement>,\n    ) {}\n\n    ngOnInit() {\n        // get column name from <ng-content> if none is explicitly provided\n        if ( ! this.orderBy) {\n            this.orderBy = slugifyString(this.columnName.nativeElement.textContent, '_');\n        }\n\n        // hide arrow when sort column is changed to different column\n        this.sortSub = this.datable.sort$\n            .pipe(filter(sort => (sort.orderBy !== this.orderBy)))\n            .subscribe(() => {\n                this.orderDir = null;\n                this.onMouseLeave();\n                this.cd.markForCheck();\n            });\n    }\n\n    ngAfterViewInit() {\n        // add '.cdk-keyboard-focused' when tabbing to other sort headers\n        this.focusMonitor.monitor(this.el).subscribe();\n    }\n\n    ngOnDestroy() {\n        this.sortSub.unsubscribe();\n        this.focusMonitor.stopMonitoring(this.el);\n    }\n\n    public changeSort() {\n        this.datable.sort$.next({\n            orderBy: this.orderBy,\n            orderDir: this.getDirection(this.orderDir),\n        });\n    }\n\n    private getDirection(current: string) {\n        switch (current) {\n            case 'asc':\n                this.arrowVisible = false;\n                return this.orderDir = null;\n            case 'desc':\n                this.arrowVisible = true;\n                this.arrowDirection = 'up';\n                return this.orderDir = 'asc';\n            default:\n                this.arrowVisible = true;\n                this.arrowDirection = 'down';\n                return this.orderDir = 'desc';\n        }\n    }\n\n    public onMouseEnter() {\n        if ( ! this.datable.config?.disableSort) {\n            this.arrowVisible = true;\n        }\n    }\n\n    public onMouseLeave() {\n        this.arrowVisible = false;\n        if ( ! this.orderDir) {\n            this.arrowDirection = 'down';\n        }\n    }\n\n    public handleClick() {\n        if ( ! this.datable.config?.disableSort) {\n            this.changeSort();\n        }\n    }\n\n    public handleKeydown(e: KeyboardEvent) {\n        if ( !this.datable.config?.disableSort && (e.keyCode === SPACE || e.keyCode === ENTER)) {\n            e.preventDefault();\n            this.changeSort();\n        }\n    }\n}\n","<span class=\"text\" #columnName>\n    <ng-content></ng-content>\n</span>\n<span class=\"icon-wrapper\" [ngClass]=\"arrowDirection\">\n    <mat-icon svgIcon=\"arrow-downward\" class=\"sort-icon\" [class.hint-visible]=\"arrowVisible\"></mat-icon>\n</span>\n","import {Action, Selector, State, StateContext} from '@ngxs/store';\r\nimport {Person} from '../../../../models/person';\r\nimport {finalize, tap} from 'rxjs/operators';\r\nimport {\r\n    CreatePerson,\r\n    DetachCredit,\r\n    LoadPerson,\r\n    ResetState,\r\n    UpdatePerson\r\n} from './crupdate-person-state-actions';\r\nimport {PeopleService} from '../../people.service';\r\nimport {TitleCredit} from '../../../../models/title';\r\nimport {TitlesService} from '../../../titles/titles.service';\r\nimport {Injectable} from '@angular/core';\r\n\r\ninterface CrupdatePersonStateModel {\r\n    person: Person;\r\n    credits: TitleCredit[];\r\n    loading: boolean;\r\n}\r\n\r\n@State<CrupdatePersonStateModel>({\r\n    name: 'crupdatePerson',\r\n    defaults: {\r\n        person: new Person(),\r\n        credits: [],\r\n        loading: false,\r\n    },\r\n})\r\n@Injectable()\r\nexport class CrupdatePersonState {\r\n    @Selector()\r\n    static person(state: CrupdatePersonStateModel) {\r\n        return state.person;\r\n    }\r\n\r\n    @Selector()\r\n    static loading(state: CrupdatePersonStateModel) {\r\n        return state.loading;\r\n    }\r\n\r\n    @Selector()\r\n    static credits(state: CrupdatePersonStateModel) {\r\n        return state.credits;\r\n    }\r\n\r\n    constructor(\r\n        private people: PeopleService,\r\n        private titles: TitlesService,\r\n    ) {}\r\n\r\n    @Action(LoadPerson)\r\n    loadPerson(ctx: StateContext<CrupdatePersonStateModel>, action: LoadPerson) {\r\n        ctx.patchState({loading: true});\r\n        return this.people.get(action.id).pipe(tap(response => {\r\n            ctx.patchState({\r\n                person: response.person,\r\n                credits: this.flattenCredits(response.credits),\r\n                loading: false\r\n            });\r\n        }));\r\n    }\r\n\r\n    @Action(CreatePerson)\r\n    createPerson(ctx: StateContext<CrupdatePersonStateModel>, action: CreatePerson) {\r\n        ctx.patchState({loading: true});\r\n        return this.people.create(action.payload).pipe(\r\n            finalize(() => ctx.patchState({loading: false})),\r\n            tap(response => ctx.patchState({person: response.person}))\r\n        );\r\n    }\r\n\r\n    @Action(UpdatePerson)\r\n    updatePerson(ctx: StateContext<CrupdatePersonStateModel>, action: UpdatePerson) {\r\n        ctx.patchState({loading: true});\r\n        return this.people.update(ctx.getState().person.id, action.payload).pipe(\r\n            finalize(() => ctx.patchState({loading: false})),\r\n            tap(response => ctx.patchState({person: response.person}))\r\n        );\r\n    }\r\n\r\n    @Action(DetachCredit)\r\n    removeCredit(ctx: StateContext<CrupdatePersonStateModel>, action: DetachCredit) {\r\n        ctx.patchState({loading: true});\r\n        return this.titles.removeCredit(action.id).pipe(\r\n            tap(() => {\r\n                const newCredits = ctx.getState().credits.filter(credit => {\r\n                    return credit.pivot.id !== action.id;\r\n                });\r\n                ctx.patchState({credits: newCredits});\r\n            }),\r\n            finalize(() => ctx.patchState({loading: false}))\r\n        );\r\n    }\r\n\r\n    @Action(ResetState)\r\n    resetState(ctx: StateContext<CrupdatePersonStateModel>) {\r\n        ctx.patchState({\r\n            person: new Person(),\r\n            credits: [],\r\n            loading: false,\r\n        });\r\n    }\r\n\r\n    private flattenCredits(credits: object) {\r\n        const flatCredits = [];\r\n        Object.keys(credits).forEach(key => {\r\n            flatCredits.push(...credits[key]);\r\n        });\r\n        return flatCredits;\r\n    }\r\n}\r\n","import {Person} from '../../../../models/person';\r\n\r\nexport class LoadPerson {\r\n    static readonly type = '[CrupdatePerson] Load Person';\r\n    constructor(public id: number) {}\r\n}\r\n\r\nexport class DetachCredit {\r\n    static readonly type = '[CrupdatePerson] Detach Credit';\r\n    constructor(public id: number) {}\r\n}\r\n\r\nexport class CreatePerson {\r\n    static readonly type = '[CrupdatePerson] Create Person';\r\n    constructor(public payload: Partial<Person>) {}\r\n}\r\n\r\nexport class UpdatePerson {\r\n    static readonly type = '[CrupdatePerson] Update Person';\r\n    constructor(public payload: Partial<Person>) {}\r\n}\r\n\r\nexport class ResetState {\r\n    static readonly type = '[CrupdatePerson] Reset State';\r\n}\r\n","import {MEDIA_TYPE} from '../site/media-type';\r\nimport {Title} from './title';\r\n\r\nexport class Person {\r\n    id: number;\r\n    name: string;\r\n    poster: string;\r\n    known_for?: string;\r\n    gender?: string;\r\n    birth_date: string;\r\n    death_date: string;\r\n    birth_place: string;\r\n    credits?: Title[];\r\n    popular_credits?: Title[];\r\n    views?: number;\r\n    popularity?: number;\r\n    updated_at?: string;\r\n    description: string;\r\n    type: MEDIA_TYPE.PERSON;\r\n\r\n    constructor(params: object = {}) {\r\n        for (const name in params) {\r\n            this[name] = params[name];\r\n        }\r\n    }\r\n}\r\n","<mat-tab-group animationDuration=\"0ms\" class=\"material-panel\" color=\"accent\">\r\n    <mat-tab [label]=\"'Primary Facts' | trans\">\r\n        <form class=\"primary-facts-panel\" (ngSubmit)=\"submit()\" [formGroup]=\"personForm\" ngNativeValidate>\r\n            <div class=\"left-col\">\r\n                <media-image [src]=\"poster$ | async\" size=\"medium\"></media-image>\r\n                <button type=\"submit\" mat-raised-button color=\"accent\" class=\"submit-button\" trans>Save</button>\r\n            </div>\r\n            <div class=\"right-col many-inputs\">\r\n                <div class=\"inline-container many-inputs\">\r\n                    <div class=\"input-container\">\r\n                        <label for=\"name\" trans>Name</label>\r\n                        <input type=\"text\" formControlName=\"name\" id=\"name\" required>\r\n                    </div>\r\n                    <div class=\"input-container\">\r\n                        <label for=\"known_for\" trans>Known For</label>\r\n                        <input type=\"text\" formControlName=\"known_for\" id=\"known_for\">\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"input-container\">\r\n                    <label for=\"poster\" trans>Image</label>\r\n                    <div class=\"input-with-action action-left\">\r\n                        <button type=\"button\" mat-flat-button color=\"accent\" (click)=\"uploadPoster()\" [matTooltip]=\"'Upload poster' | trans\">\r\n                            <mat-icon svgIcon=\"file-upload\"></mat-icon>\r\n                        </button>\r\n                        <input type=\"text\" formControlName=\"poster\" id=\"poster\" minlength=\"1\" maxlength=\"250\">\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"input-container\">\r\n                    <label for=\"description\" trans>Biography</label>\r\n                    <textarea id=\"description\" formControlName=\"description\" cdkTextareaAutosize cdkAutosizeMinRows=\"10\" cdkAutosizeMaxRows=\"100\"></textarea>\r\n                </div>\r\n\r\n                <div class=\"inline-container many-inputs\">\r\n                    <div class=\"input-container\">\r\n                        <label for=\"gender\" trans>Gender</label>\r\n                        <select id=\"gender\" formControlName=\"gender\">\r\n                            <option [ngValue]=\"null\">-</option>\r\n                            <option value=\"male\" trans>Male</option>\r\n                            <option value=\"female\" trans>Female</option>\r\n                        </select>\r\n                    </div>\r\n                    <div class=\"input-container\">\r\n                        <label for=\"birth_date\" trans>Birth Date</label>\r\n                        <input type=\"date\" id=\"birth_date\" formControlName=\"birth_date\">\r\n                    </div>\r\n                    <div class=\"input-container\">\r\n                        <label for=\"death_date\" trans>Death Date</label>\r\n                        <input type=\"date\" id=\"death_date\" formControlName=\"death_date\">\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"inline-container many-inputs\">\r\n                    <div class=\"input-container\">\r\n                        <label for=\"popularity\" trans>Popularity</label>\r\n                        <input type=\"number\" formControlName=\"popularity\" id=\"popularity\" min=\"1\" max=\"1000\" step=\"0.1\">\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"birth_place\" trans>Birth Place</label>\r\n                        <input type=\"text\" id=\"birth_place\" formControlName=\"birth_place\">\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"allow_update\" trans>Allow Auto Update</label>\r\n                        <select formControlName=\"allow_update\" id=\"allow_update\" required>\r\n                            <option [ngValue]=\"true\" trans>Yes</option>\r\n                            <option [ngValue]=\"false\" trans>No</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    </mat-tab>\r\n    <mat-tab [label]=\"'Credits' | trans\">\r\n        <div class=\"responsive-table\">\r\n            <datatable-header></datatable-header>\r\n            <table class=\"material-table\">\r\n                <thead>\r\n                <tr>\r\n                    <th table-sort-header=\"name\" trans>Credit</th>\r\n                    <th table-sort-header=\"pivot.character\" trans>Character</th>\r\n                    <th table-sort-header=\"pivot.department\" trans>Department</th>\r\n                    <th table-sort-header=\"pivot.job\" trans>Job</th>\r\n                    <th></th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr *ngFor=\"let credit of datatable.data$ | async\">\r\n                    <td>\r\n                        <div class=\"column-with-image\">\r\n                            <media-image [src]=\"credit.poster\" size=\"small\"></media-image>\r\n                            <span>{{credit.name}}</span>\r\n                        </div>\r\n                    </td>\r\n                    <td data-label=\"Character\" class=\"capitalize\">{{credit.pivot?.character ? credit.pivot.character : '-'}}</td>\r\n                    <td data-label=\"Department\" class=\"capitalize\">{{credit.pivot?.department ? credit.pivot.department : '-'}} </td>\r\n                    <td data-label=\"Job\" class=\"capitalize\">{{credit.pivot?.job ? credit.pivot.job : '-'}}</td>\r\n                    <td class=\"edit-column\">\r\n                        <button type=\"button\" mat-icon-button (click)=\"detachCredit(credit)\">\r\n                            <mat-icon svgIcon=\"close\"></mat-icon>\r\n                        </button>\r\n                    </td>\r\n                </tr>\r\n                </tbody>\r\n            </table>\r\n\r\n            <no-results-message *ngIf=\"!(datatable.data$ | async).length\" svgImage=\"awards.svg\">\r\n                <span primary-text trans>Nothing to display.</span>\r\n            </no-results-message>\r\n        </div>\r\n    </mat-tab>\r\n</mat-tab-group>\r\n\r\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>\r\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {CrupdatePersonPageComponent} from './crupdate-person-page.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CrupdatePersonPageComponent,\n        data: {permissions: ['people.update']}\n    },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CrupdatePersonRoutingModule { }\n","import {ChangeDetectionStrategy, Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {Select, Store} from '@ngxs/store';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {\r\n    CreatePerson,\r\n    DetachCredit,\r\n    LoadPerson,\r\n    ResetState,\r\n    UpdatePerson\r\n} from './state/crupdate-person-state-actions';\r\nimport {CrupdatePersonState} from './state/crupdate-person-state';\r\nimport {FormBuilder} from '@angular/forms';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {TitleCredit} from '../../../models/title';\r\nimport {MESSAGES} from '../../../toast-messages';\r\nimport {UploadQueueService} from '../../../../common/uploads/upload-queue/upload-queue.service';\r\nimport {Toast} from '../../../../common/core/ui/toast.service';\r\nimport {openUploadWindow} from '../../../../common/uploads/utils/open-upload-window';\r\nimport {UploadInputTypes} from '../../../../common/uploads/upload-input-config';\r\nimport {DatatableService} from '../../../../common/datatable/datatable.service';\r\n\r\n@Component({\r\n    selector: 'crupdate-person-page',\r\n    templateUrl: './crupdate-person-page.component.html',\r\n    styleUrls: ['./crupdate-person-page.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [\r\n        UploadQueueService,\r\n        DatatableService,\r\n    ],\r\n})\r\nexport class CrupdatePersonPageComponent implements OnInit, OnDestroy {\r\n    @Select(CrupdatePersonState.loading) loading$: Observable<boolean>;\r\n    @Select(CrupdatePersonState.credits) credits$: Observable<TitleCredit[]>;\r\n    public poster$ = new BehaviorSubject<string>(null);\r\n\r\n    public personForm = this.fb.group({\r\n        name: [''],\r\n        poster: [''],\r\n        popularity: [''],\r\n        description: [''],\r\n        known_for: [''],\r\n        birth_place: [''],\r\n        birth_date: [''],\r\n        death_date: [''],\r\n        gender: [null],\r\n        allow_update: [true],\r\n    });\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private toast: Toast,\r\n        private router: Router,\r\n        private fb: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private uploadQueue: UploadQueueService,\r\n        public datatable: DatatableService<TitleCredit>,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.datatable.init();\r\n        this.route.params.subscribe(params => {\r\n            this.loadPerson(params);\r\n        });\r\n\r\n        this.store.select(CrupdatePersonState.credits).subscribe(credits => {\r\n            this.datatable.data = credits;\r\n        });\r\n\r\n        this.personForm.get('poster').valueChanges.subscribe(value => {\r\n            this.poster$.next(value);\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.store.dispatch(new ResetState());\r\n        this.datatable.destroy();\r\n    }\r\n\r\n    public uploadPoster() {\r\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\r\n            const params = {\r\n                uri: 'uploads/images',\r\n                httpParams: {\r\n                    diskPrefix: 'media-images/posters'\r\n                },\r\n            };\r\n            this.uploadQueue.start(upload, params).subscribe(response => {\r\n                this.personForm.patchValue({\r\n                    poster: response.fileEntry.url\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private loadPerson(params: {id?: string}) {\r\n        if ( ! params.id) return;\r\n        this.store.dispatch(new LoadPerson(+params.id)).subscribe(() => {\r\n            const person = this.store.selectSnapshot(CrupdatePersonState.person);\r\n            this.personForm.patchValue(person);\r\n            this.poster$.next(person.poster);\r\n        });\r\n    }\r\n\r\n    public submit() {\r\n        const person = this.store.selectSnapshot(CrupdatePersonState.person);\r\n        const response = person.id ?\r\n            this.store.dispatch(new UpdatePerson(this.personForm.value)) :\r\n            this.store.dispatch(new CreatePerson(this.personForm.value));\r\n\r\n        response.subscribe(() => {\r\n            this.router.navigate([this.router.url.includes('admin') ? 'admin/people' : this.router.url.split('?')[0].replace('/edit', '')]);\r\n            this.toast.open(person.id ? MESSAGES.PERSON_UPDATE_SUCCESS : MESSAGES.PERSON_CREATE_SUCCESS);\r\n        });\r\n    }\r\n\r\n    public detachCredit(credit: TitleCredit) {\r\n        if ( ! credit.pivot) return;\r\n        this.store.dispatch(new DetachCredit(credit.pivot.id))\r\n            .subscribe(() => {\r\n                this.toast.open(MESSAGES.CREDIT_REMOVE_SUCCESS);\r\n            });\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CrupdatePersonRoutingModule} from './crupdate-person-routing.module';\nimport {CrupdatePersonPageComponent} from './crupdate-person-page.component';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {TranslationsModule} from '../../../../common/core/translations/translations.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MediaImageModule} from '../../shared/media-image/media-image.module';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {MatIconModule} from '@angular/material/icon';\nimport {NoResultsMessageModule} from '../../../../common/core/ui/no-results-message/no-results-message.module';\nimport {LoadingIndicatorModule} from '../../../../common/core/ui/loading-indicator/loading-indicator.module';\nimport {NgxsModule} from '@ngxs/store';\nimport {CrupdatePersonState} from './state/crupdate-person-state';\nimport {DatatableModule} from '../../../../common/datatable/datatable.module';\n\n\n@NgModule({\n    declarations: [\n        CrupdatePersonPageComponent,\n    ],\n    imports: [\n        CommonModule,\n        CrupdatePersonRoutingModule,\n        TranslationsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MediaImageModule,\n        NoResultsMessageModule,\n        LoadingIndicatorModule,\n        DatatableModule,\n\n        NgxsModule.forFeature([\n            CrupdatePersonState\n        ]),\n\n        // material\n        MatTabsModule,\n        MatButtonModule,\n        MatIconModule,\n        MatTooltipModule,\n        TextFieldModule,\n    ]\n})\nexport class CrupdatePersonModule {\n}\n"]}