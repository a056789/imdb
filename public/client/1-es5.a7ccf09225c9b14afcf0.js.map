{"version":3,"sources":["webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/primary-facts-panel/primary-facts-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/primary-facts-panel/primary-facts-panel.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/crupdate-credit-modal/crupdate-credit-modal.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/crupdate-credit-modal/crupdate-credit-modal.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/credits-panel/credits-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/credits-panel/credits-panel.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/episodes-panel/episodes-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/episodes-panel/episodes-panel.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/seasons-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/seasons-panel/seasons-panel.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/images-panel/images-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/images-panel/images-panel.component.ts","webpack:///src/common/tags/tags-manager/tags-manager.component.html","webpack:///src/common/tags/tags-manager/tags-manager.component.ts","webpack:///src/common/tags/tags-manager/select-tags-modal/select-tags-modal.component.ts","webpack:///src/common/tags/tags-manager/select-tags-modal/select-tags-modal.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/tags-panel/tags-panel.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/panels/tags-panel/tags-panel.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/crupdate-title.component.html","webpack:///src/app/site/titles/crupdate-title/crupdate-title/crupdate-title.component.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title/crupdate-title-resolver.service.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title-routing.module.ts","webpack:///src/app/site/titles/crupdate-title/crupdate-title.module.ts","webpack:///src/app/admin/reviews-index/review-index-filters/review-index-filters.component.ts","webpack:///src/app/admin/reviews-index/review-index-filters/review-index-filters.component.html","webpack:///src/app/admin/reviews-index/reviews-index.component.html","webpack:///src/app/admin/reviews-index/reviews-index.component.ts","webpack:///src/common/datatable/datatable.module.ts","webpack:///src/common/shared/paginator.service.ts","webpack:///src/common/datatable/delete-resource-message.ts","webpack:///src/common/datatable/utils/sort-datatable-data.ts","webpack:///src/common/datatable/datatable.service.ts","webpack:///src/common/datatable/utils/filter-datatable-data.ts","webpack:///src/common/core/ui/select-user-input/select-user-input.module.ts","webpack:///src/common/core/services/tags.service.ts","webpack:///src/common/core/ui/overlay-panel/positions/left-position.ts","webpack:///src/common/datatable/datatable-filters-panel/datatable-filters-panel.component.html","webpack:///src/common/datatable/datatable-filters-panel/datatable-filters-panel.component.ts","webpack:///src/common/datatable/datatable-header/datatable-header-search-input/datatable-header-search-input.component.html","webpack:///src/common/datatable/datatable-header/datatable-header-search-input/datatable-header-search-input.component.ts","webpack:///src/common/datatable/datatable-header/datatable-header.component.html","webpack:///src/common/datatable/datatable-header/datatable-header.component.ts","webpack:///src/common/core/utils/remove-null-from-object.ts","webpack:///src/common/datatable/selection/table-header-checkbox.component.ts","webpack:///src/common/core/ui/select-user-input/select-user-input/select-user-input.component.ts","webpack:///src/common/core/ui/select-user-input/select-user-input/select-user-input.component.html","webpack:///src/app/admin/video-index/video-index-filters/video-index-filters.component.ts","webpack:///src/app/admin/video-index/video-index-filters/video-index-filters.component.html","webpack:///src/app/admin/video-index/video-index.component.html","webpack:///src/app/admin/video-index/video-index.component.ts","webpack:///src/common/datatable/columns/user-column/user-column.component.html","webpack:///src/common/datatable/columns/user-column/user-column.component.ts","webpack:///src/common/datatable/table-sort-header/table-sort-header.component.ts","webpack:///src/common/datatable/table-sort-header/table-sort-header.component.html","webpack:///src/common/datatable/selection/table-body-checkbox.component.ts","webpack:///src/common/datatable/datatable-footer/datatable-footer.component.ts","webpack:///src/common/datatable/datatable-footer/datatable-footer.component.html"],"names":["PrimaryFactsPanelComponent","store","fb","route","uploadQueue","settings","router","titles","toast","poster$","BehaviorSubject","form","this","group","name","required","minLength","is_series","language","tagline","maxLength","poster","backdrop","description","budget","min","revenue","runtime","max","country","popularity","certification","release_date","allow_update","certificationOptions","getJson","dispatch","select","title","pipe","filter","t","id","take","subscribe","patchValue","split","next","get","valueChanges","value","type","types","image","then","upload","start","uri","httpParams","diskPrefix","fileEntry","url","titleId","selectSnapshot","update","create","finalize","response","open","TITLE_UPDATE_SUCCESS","TITLE_CREATE_SUCCESS","navigate","includes","replace","submit","uploadImage","loading","languageOptions","CrupdateCreditModalComponent","actions$","dialogRef","valueLists","data","character","department","job","availableJobs","credit","pivot","tmdbJobs","forEach","jobGroup","jobs","map","jobName","filteredJobs","startWith","q","v","toLowerCase","slice","action","getPayload","mediaItem","close","CREDIT_UPDATE_SUCCESS","CREDIT_ADD_SUCCESS","errResponse","message","payload","PERSON","e","find","option","confirm","CreditsPanelComponent","dialog","datatable","init","changes","currentValue","getCast","credits","getCrew","destroy","body","ok","afterClosed","confirmed","CREDIT_REMOVE_SUCCESS","previousIndex","currentIndex","openCrupdateCreditModal","changeCreditsOrder","CrupdateEpisodeModalComponent","episode$","errors$","episodeForm","episode_number","episode","bindToStoreEpisode","setTimeout","loadEpisodeCredits","season","episode_count","updateEpisode","createEpisode","EPISODE_CREATE_SUCCESS","episodes","seasons","s","length","errors","EPISODE_UPDATE_SUCCESS","number","season_number","toPromise","uploadPoster","EpisodesPanelComponent","trackByFn","i","episodeNum","snapshot","params","episodeNumber","openCrupdateEpisodeModal","EPISODE_DELETE_SUCCESS","panelClass","SeasonsPanelComponent","modal","el","activeSeason$","seasonNumber","nativeElement","querySelector","scrollIntoView","behavior","block","inline","SEASON_CREATE_SUCCESS","bodyBold","SEASON_DELETE_SUCCESS","index","ImagesPanelComponent","images","viewportRuler","dropListEnterPredicate","drag","drop","placeholder","activeContainer","phElement","element","sourceElement","dropContainer","dropElement","dragIndex","__indexOf","parentElement","children","source","dropIndex","sourceIndex","style","width","clientWidth","height","clientHeight","removeChild","targetIndex","target","display","insertBefore","nextSibling","_dropListRef","enter","_dragRef","offsetLeft","offsetTop","modelId","IMAGE_CREATE_SUCCESS","IMAGE_DELETE_SUCCESS","point","getPointerPositionOnPage","event","listGroup","_items","dropList","x","y","getBoundingClientRect","top","bottom","left","right","parent","appendChild","startsWith","touches","changedTouches","scrollPosition","getViewportScrollPosition","pageX","pageY","dropListDropped","collection","node","Array","prototype","indexOf","call","TagsManagerComponent","SelectTagsModalComponent","tagService","readonly","pluralName","formControl","selectedTags$","existingTags$","suggestedTags$","perPage","tagType","pagination","tag","suggestions","selectTags","skipPropagate","override","fn","propagateChange","tags","options","newTags","trim","reset","tagName","selectedTags","splice","tagString","provide","useExisting","multi","selectedTagsControl","TagsPanelComponent","getTagObservable","beforeClosed","tagNames","TAG_DETACH_SUCCESS","keywords","genres","countries","openTagManagerModal","CrupdateTitleComponent","CrupdateTitleResolverService","CrupdateTitleRoutingModule","CrupdateTitleModule","activePanel$","api","queryParams","active","routes","path","component","resolve","state","fullCredits","skipUpdating","allVideos","catchError","fallbackUri","mergeMap","of","permissions","forChild","ReviewIndexFiltersComponent","datable","user","filters$","disable","ReviewsIndexComponent","reviews","currentUser","urls","reviews$","data$","paginator","dontUpdateQueryParams","config","BASE_URI","staticParams","with","review","openCrupdateResourceModal","mediaId","mediaType","confirmResourceDeletion","selectedRows$","REVIEW_DELETE_SUCCESS","DatatableModule","Paginator","http","localStorage","params$","paginatedOnce$","loading$","response$","perPageCacheKey","noResults$","r","initialData","userParams","subscription","currentQueryParams","per_page","page","current_page","current","total","paginate","newPerPage","set","routerState","root","switchMap","firstPagination","tap","updateQueryParams","key","isArray","join","replaceUrl","currentPage","last_page","DELETE_RESOURCE_MESSAGE","sortingDataAccessor","sortHeaderId","numberValue","Number","DatatableService","sort$","staticParams$","ignoreNextParamChange","originalData$","connectToPaginator","mainSub","combineLatest","debounceTime","Object","assign","entries","keys","applyLocalTransforms","paginatorSub","pairwise","prev","infiniteScroll","query","obj","dataStr","objectToStr","reduce","currentTerm","transformedFilter","orderBy","orderDir","sort","a","b","valueA","valueB","valueAType","valueBType","comparatorResult","filters","cmp","modifiedResource","resource","replacements","unsubscribe","tableData","SelectUserInputModule","TagsService","post","put","tagIds","LEFT_POSITION","originX","originY","overlayX","overlayY","offsetX","DatatableFiltersPanelComponent","overlayPanelRef","dialogContainer","DatatableHeaderSearchInputComponent","searchControl","hideIcon","distinctUntilChanged","addFilter","DatatableHeaderComponent","cd","overlayPanel","showSelectedActions","subscriptions","filterSub","filterPanelRef","changeSub","numberOfRowsSelected","markForCheck","position","offsetY","origin","filterButton","mobilePosition","filterPanelTemplate","maxWidth","classList","add","remove","removeNullFromObject","copy","TableHeaderCheckboxComponent","changeRef","allRowsSelected","toggleAllRows","SelectUserInputComponent","users","searchFormControl","users$","selectedUser$","searchedOnce","bindToSearchControl","searchUsers","getAll","clearSearchInput","searchInput","focus","setValue","onMenuOpened","onMenuClosed","$event","stopPropagation","selectUser","VideoIndexFiltersComponent","category","approved","quality","VideoIndexComponent","videos","videos$","modifying$","video","request","disapprove","approve","Default","UserColumnComponent","showEmail","TableSortHeaderComponent","focusMonitor","arrowVisible","arrowDirection","columnName","textContent","sortSub","onMouseLeave","monitor","stopMonitoring","getDirection","disableSort","changeSort","keyCode","preventDefault","TableBodyCheckboxComponent","isRowSelected","array","toggleRow","DatatableFooterComponent","hidePerPage","perPageControl","to","from","totalRecords","havePrevious","haveNext","parseInt","emitEvent","changePerPage","previousPage","nextPage"],"mappings":"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","file":"x","sourcesContent":["<form [formGroup]=\"form\" (ngSubmit)=\"submit()\">\r\n    <div class=\"poster-container\">\r\n        <media-image [src]=\"poster$ | async\"></media-image>\r\n        <div class=\"many-inputs\">\r\n            <div class=\"input-container\">\r\n                <label for=\"name\" trans>Title</label>\r\n                <input type=\"text\" formControlName=\"name\" id=\"name\" minlength=\"1\" maxlength=\"250\" required>\r\n            </div>\r\n\r\n           <div class=\"inline-container\">\r\n               <div class=\"input-container\">\r\n                   <label for=\"type\" trans>Type</label>\r\n                   <select formControlName=\"is_series\" id=\"type\" required>\r\n                       <option [ngValue]=\"false\" trans>Movie</option>\r\n                       <option [ngValue]=\"true\" trans>TV Series</option>\r\n                   </select>\r\n               </div>\r\n\r\n               <div class=\"input-container\">\r\n                   <label for=\"allow_update\" trans>Allow Auto Update</label>\r\n                   <select formControlName=\"allow_update\" id=\"allow_update\" required>\r\n                       <option [ngValue]=\"true\" trans>Yes</option>\r\n                       <option [ngValue]=\"false\" trans>No</option>\r\n                   </select>\r\n               </div>\r\n           </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"poster\" trans>Poster</label>\r\n                <div class=\"input-with-action action-left\">\r\n                    <button type=\"button\" mat-flat-button color=\"accent\" (click)=\"uploadImage('poster')\" [matTooltip]=\"'Upload poster' | trans\">\r\n                        <mat-icon svgIcon=\"file-upload\"></mat-icon>\r\n                    </button>\r\n                    <input type=\"text\" formControlName=\"poster\" id=\"poster\" minlength=\"1\" maxlength=\"250\">\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"backdrop\" trans>Backdrop</label>\r\n                <div class=\"input-with-action action-left\">\r\n                    <button type=\"button\" mat-flat-button color=\"accent\" (click)=\"uploadImage('backdrop')\" [matTooltip]=\"'Upload backdrop' | trans\">\r\n                        <mat-icon svgIcon=\"file-upload\"></mat-icon>\r\n                    </button>\r\n                    <input type=\"text\" formControlName=\"backdrop\" id=\"backdrop\" minlength=\"1\" maxlength=\"250\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"inline-container\">\r\n        <div class=\"input-container\">\r\n            <label for=\"release_date\" trans>Release Date</label>\r\n            <input type=\"date\" formControlName=\"release_date\" id=\"release_date\" placeholder=\"YYYY-MM-DD\" required>\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"tagline\" trans>Tagline</label>\r\n            <input type=\"text\" formControlName=\"tagline\" id=\"tagline\" minlength=\"1\" maxlength=\"250\">\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"input-container\">\r\n        <label for=\"description\" trans>Overview</label>\r\n        <textarea type=\"text\" formControlName=\"description\" id=\"description\" minlength=\"1\" cdkTextareaAutosize cdkAutosizeMinRows=\"6\"></textarea>\r\n    </div>\r\n\r\n    <div class=\"inline-container\">\r\n        <div class=\"input-container\">\r\n            <label for=\"runtime\" trans>Runtime</label>\r\n            <input type=\"number\" formControlName=\"runtime\" id=\"runtime\" min=\"1\" max=\"500\">\r\n        </div>\r\n\r\n        <div class=\"input-container certification-input-container\">\r\n            <label for=\"certification\" trans>Certification</label>\r\n            <select formControlName=\"certification\" id=\"certification\">\r\n                <option [ngValue]=\"certification\" *ngFor=\"let certification of certificationOptions\">{{certification}}</option>\r\n            </select>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"inline-container\">\r\n        <div class=\"input-container\">\r\n            <label for=\"budget\" trans>Budget</label>\r\n            <input type=\"number\" formControlName=\"budget\" id=\"budget\" min=\"1\">\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"revenue\" trans>Revenue</label>\r\n            <input type=\"number\" formControlName=\"revenue\" id=\"revenue\" min=\"1\">\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"inline-container\">\r\n        <div class=\"input-container\">\r\n            <label for=\"popularity\" trans>Popularity</label>\r\n            <input type=\"number\" formControlName=\"popularity\" id=\"popularity\" min=\"1\" max=\"1000\">\r\n        </div>\r\n\r\n        <div class=\"input-container\">\r\n            <label for=\"language\" trans>Language</label>\r\n            <select formControlName=\"language\" id=\"language\" required>\r\n                <option [value]=\"language.code\" *ngFor=\"let language of languageOptions$ | async\">{{language.name}}</option>\r\n            </select>\r\n        </div>\r\n    </div>\r\n\r\n    <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>Save</button>\r\n</form>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    OnInit,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {FormBuilder, Validators} from '@angular/forms';\r\nimport {Select, Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {Title} from '../../../../../../models/title';\r\nimport {LoadSelectOptions, ToggleLoading} from '../../state/crupdate-title-actions';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {UploadQueueService} from '../../../../../../../common/uploads/upload-queue/upload-queue.service';\r\nimport {LanguageListItem} from '../../../../../../../common/core/services/value-lists.service';\r\nimport {openUploadWindow} from '../../../../../../../common/uploads/utils/open-upload-window';\r\nimport {UploadInputTypes} from '../../../../../../../common/uploads/upload-input-config';\r\nimport {filter, finalize, take} from 'rxjs/operators';\r\nimport {Settings} from '../../../../../../../common/core/config/settings.service';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {TitlesService} from '../../../../titles.service';\r\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\r\n\r\n@Component({\r\n    selector: 'primary-facts-panel',\r\n    templateUrl: './primary-facts-panel.component.html',\r\n    styleUrls: ['./primary-facts-panel.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    providers: [UploadQueueService],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PrimaryFactsPanelComponent implements OnInit {\r\n    @Select(CrupdateTitleState.title) title$: Observable<Title>;\r\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\r\n    @Select(CrupdateTitleState.languageOptions) languageOptions$: Observable<LanguageListItem[]>;\r\n    public certificationOptions: string[];\r\n    public poster$ = new BehaviorSubject<string>(null);\r\n\r\n    public form = this.fb.group({\r\n        name: ['', [Validators.required, Validators.minLength(1)]],\r\n        is_series: [false, [Validators.required]],\r\n        language: [''],\r\n        tagline: ['', [Validators.minLength(1), Validators.maxLength(250)]],\r\n        poster: ['', [Validators.minLength(1), Validators.maxLength(250)]],\r\n        backdrop: ['', [Validators.minLength(1), Validators.maxLength(250)]],\r\n        description: ['', [Validators.minLength(1)]],\r\n        budget: ['', Validators.min(1)],\r\n        revenue: ['', Validators.min(1)],\r\n        runtime: ['', [Validators.min(1), Validators.max(300)]],\r\n        country: ['', [Validators.minLength(1), Validators.maxLength(50)]],\r\n        popularity: [1, [Validators.min(1), Validators.max(100)]],\r\n        certification: ['pg'],\r\n        release_date: [''],\r\n        allow_update: [true],\r\n    });\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private fb: FormBuilder,\r\n        private route: ActivatedRoute,\r\n        private uploadQueue: UploadQueueService,\r\n        private settings: Settings,\r\n        private router: Router,\r\n        private titles: TitlesService,\r\n        private toast: Toast,\r\n    ) {\r\n        this.certificationOptions = this.settings.getJson('browse.ageRatings');\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.store.dispatch(new LoadSelectOptions());\r\n\r\n        this.store.select(CrupdateTitleState.title)\r\n            .pipe(filter(t => !!t.id), take(1))\r\n            .subscribe(title => {\r\n                this.form.patchValue({\r\n                    ...title,\r\n                    release_date: title.release_date ? title.release_date.split('T')[0] : null,\r\n                });\r\n                this.poster$.next(title.poster);\r\n            });\r\n\r\n        this.form.get('poster').valueChanges.subscribe(value => {\r\n            this.poster$.next(value);\r\n        });\r\n    }\r\n\r\n    public uploadImage(type: 'poster'|'backdrop') {\r\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\r\n            const params = {\r\n                uri: 'uploads/images',\r\n                httpParams: {\r\n                    diskPrefix: `media-images/${type}s`\r\n                },\r\n            };\r\n            this.uploadQueue.start(upload, params).subscribe(fileEntry => {\r\n                this.form.patchValue({\r\n                    [type]: fileEntry.fileEntry.url\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    public submit() {\r\n        this.store.dispatch(new ToggleLoading(true));\r\n        const titleId = this.store.selectSnapshot(CrupdateTitleState.title).id;\r\n        const request = titleId ?\r\n            this.titles.update(titleId, this.form.value) :\r\n            this.titles.create(this.form.value);\r\n        request\r\n            .pipe(finalize(() => this.store.dispatch(new ToggleLoading(false))))\r\n            .subscribe(response => {\r\n            this.toast.open(titleId ? MESSAGES.TITLE_UPDATE_SUCCESS : MESSAGES.TITLE_CREATE_SUCCESS);\r\n            if (titleId) {\r\n                this.router.navigate([this.router.url.includes('admin') ? '/admin/titles' : this.router.url.split('?')[0].replace('/edit', '')]);\r\n            } else {\r\n                this.router.navigate([this.router.url.replace('new', '' + response.title.id), 'edit']);\r\n            }\r\n        });\r\n    }\r\n}\r\n","<div class=\"modal-header\">\r\n    <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"data.credit\" trans>Edit</h2>\r\n    <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"!data.credit\" trans>Create</h2>\r\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style icon-button\"><mat-icon svgIcon=\"close\"></mat-icon></button>\r\n</div>\r\n\r\n<form autocomplete=\"off\" (ngSubmit)=\"confirm()\" [formGroup]=\"form\" ngNativeValidate>\r\n    <mat-dialog-content class=\"many-inputs\">\r\n        <div class=\"input-container\" *ngIf=\"data.credit\">\r\n            <label for=\"name\" trans>Person</label>\r\n            <input type=\"text\" id=\"name\" [value]=\"credit?.name\" disabled>\r\n        </div>\r\n\r\n        <search-input\r\n                *ngIf=\"!data.credit\"\r\n                placeholder=\"Search for a person...\"\r\n                label=\"Person\"\r\n                [type]=\"getPersonType()\"\r\n                [resetInputOnSelect]=\"false\"\r\n                searchProvider=\"local\"\r\n                (resultSelected)=\"setCredit($event)\"\r\n        ></search-input>\r\n\r\n        <div class=\"input-container\" *ngIf=\"data.type === 'cast'\">\r\n            <label for=\"character\" trans>Character</label>\r\n            <input type=\"text\" id=\"character\" formControlName=\"character\" required>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"data.type === 'crew'\">\r\n            <div class=\"input-container\">\r\n                <label for=\"job\" trans>Job</label>\r\n                <input type=\"text\" id=\"job\" formControlName=\"job\" [matAutocomplete]=\"auto\" required>\r\n            </div>\r\n            <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"jobSelected($event)\">\r\n                <mat-option *ngFor=\"let value of filteredJobs | async\" [value]=\"value.job\" class=\"multiline-mat-menu-item\">\r\n                    <div class=\"title\"><span trans>Job</span>: {{value.job}}</div>\r\n                    <div class=\"description\"><span trans>Department</span>: {{value.department}}</div>\r\n                </mat-option>\r\n            </mat-autocomplete>\r\n\r\n            <div class=\"input-container\">\r\n                <label for=\"department\" trans>Department</label>\r\n                <input type=\"text\" id=\"department\" formControlName=\"department\" required>\r\n            </div>\r\n        </ng-container>\r\n    </mat-dialog-content>\r\n\r\n    <mat-dialog-actions>\r\n        <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\r\n        <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>Save</button>\r\n    </mat-dialog-actions>\r\n</form>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    Inject,\r\n    OnInit,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\r\nimport {TitleCredit} from '../../../../../../models/title';\r\nimport {Observable} from 'rxjs';\r\nimport {FormBuilder} from '@angular/forms';\r\nimport {Actions, Select, Store} from '@ngxs/store';\r\nimport {AddCredit, UpdateCredit} from '../../state/crupdate-title-actions';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {Creditable} from '../../../../../people/creditable';\r\nimport {MEDIA_TYPE} from '../../../../../media-type';\r\nimport {ValueLists} from '../../../../../../../common/core/services/value-lists.service';\r\nimport {filter, map, startWith} from 'rxjs/operators';\r\nimport {MatAutocompleteSelectedEvent} from '@angular/material/autocomplete';\r\nimport {BackendErrorResponse} from '../../../../../../../common/core/types/backend-error-response';\r\n\r\ninterface CrupdateCreditModalData {\r\n    credit?: TitleCredit;\r\n    type: 'cast'|'crew';\r\n    mediaItem: Creditable;\r\n}\r\n\r\ninterface JobList {\r\n    department: string;\r\n    jobs: string[];\r\n}\r\n\r\n@Component({\r\n    selector: 'crupdate-credit-modal',\r\n    templateUrl: './crupdate-credit-modal.component.html',\r\n    styleUrls: ['./crupdate-credit-modal.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CrupdateCreditModalComponent implements OnInit {\r\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\r\n    public credit: TitleCredit;\r\n\r\n    public form = this.fb.group({\r\n        character: [''],\r\n        department: [''],\r\n        job: [''],\r\n    });\r\n\r\n    public availableJobs: {job: string, department: string}[] = [];\r\n    public filteredJobs: Observable<{job: string, department: string}[]>;\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private toast: Toast,\r\n        private fb: FormBuilder,\r\n        private actions$: Actions,\r\n        private dialogRef: MatDialogRef<CrupdateCreditModalComponent>,\r\n        private valueLists: ValueLists,\r\n        @Inject(MAT_DIALOG_DATA) public data: CrupdateCreditModalData,\r\n    ) {\r\n        if (this.data.credit) {\r\n            this.credit = this.data.credit;\r\n            this.form.patchValue(this.data.credit.pivot);\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.valueLists.get(['tmdbJobs']).subscribe(response => {\r\n            this.availableJobs = [];\r\n            (response.tmdbJobs as JobList[]).forEach(jobGroup => {\r\n                const jobs = jobGroup.jobs.map(jobName => {\r\n                    return {job: jobName, department: jobGroup.department};\r\n                });\r\n                this.availableJobs = [...this.availableJobs, ...jobs];\r\n            });\r\n\r\n            this.filteredJobs = this.form.get('job').valueChanges\r\n                .pipe(\r\n                    startWith(''),\r\n                    map(q => this.availableJobs.filter(v => {\r\n                        q = q.toLowerCase();\r\n                        return !q || v.job.toLowerCase().includes(q) || v.department.toLowerCase().includes(q);\r\n                    }).slice(0, 10))\r\n                );\r\n        });\r\n    }\r\n\r\n    public confirm() {\r\n        const action = this.data.credit\r\n            ? new UpdateCredit(this.credit.pivot.id, this.getPayload())\r\n            : new AddCredit(this.credit?.id, this.data.mediaItem, this.getPayload());\r\n        this.store.dispatch(action).subscribe(() => {\r\n            this.close();\r\n            this.toast.open(this.data.credit ? MESSAGES.CREDIT_UPDATE_SUCCESS : MESSAGES.CREDIT_ADD_SUCCESS);\r\n        }, (errResponse: BackendErrorResponse) => {\r\n            this.toast.open(errResponse.message);\r\n        });\r\n    }\r\n\r\n    public close() {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    public setCredit(credit: TitleCredit) {\r\n        this.credit = credit;\r\n    }\r\n\r\n    private getPayload() {\r\n        const payload = this.form.value;\r\n        if (this.data.type === 'cast') {\r\n            payload.department = 'cast';\r\n            payload.job = 'cast';\r\n        }\r\n        return payload;\r\n    }\r\n\r\n    public getPersonType() {\r\n        return MEDIA_TYPE.PERSON;\r\n    }\r\n\r\n    public jobSelected(e: MatAutocompleteSelectedEvent) {\r\n        const value = this.availableJobs.find(v => v.job === e.option.value);\r\n        this.form.patchValue({job: value.job, department: value.department});\r\n    }\r\n}\r\n","<datatable-header>\r\n    <button type=\"button\" mat-raised-button color=\"accent\" leftContent (click)=\"openCrupdateCreditModal()\" trans>Add Credit</button>\r\n</datatable-header>\r\n\r\n<table class=\"material-table\" cdkDropList (cdkDropListDropped)=\"changeCreditsOrder($event)\" [cdkDropListDisabled]=\"type === 'crew'\">\r\n    <thead>\r\n    <tr>\r\n        <th table-sort-header trans>Name</th>\r\n        <th table-sort-header=\"pivot.character\" *ngIf=\"type === 'cast'\" trans>Character</th>\r\n        <th table-sort-header=\"pivot.department\" *ngIf=\"type === 'crew'\" trans>Department</th>\r\n        <th table-sort-header=\"pivot.job\" *ngIf=\"type === 'crew'\" trans>Job</th>\r\n        <th></th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n    <tr *ngFor=\"let person of datatable.data$ | async\" cdkDrag>\r\n        <td>\r\n           <div class=\"column-with-image\">\r\n               <button type=\"button\" mat-icon-button cdkDragHandle *ngIf=\"type === 'cast'\">\r\n                   <mat-icon svgIcon=\"drag-handle\"></mat-icon>\r\n               </button>\r\n               <media-image [src]=\"person.poster\" size=\"small\"></media-image>\r\n               <span>{{person.name}}</span>\r\n           </div>\r\n            <div *cdkDragPreview>{{person.name}}</div>\r\n        </td>\r\n        <td *ngIf=\"type === 'cast'\">{{person.pivot.character}}</td>\r\n        <td *ngIf=\"type === 'crew'\">{{person.pivot.department}}</td>\r\n        <td *ngIf=\"type === 'crew'\">{{person.pivot.job}}</td>\r\n        <td class=\"edit-column\">\r\n            <button type=\"button\" mat-icon-button (click)=\"openCrupdateCreditModal(person)\">\r\n                <mat-icon svgIcon=\"edit\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" mat-icon-button (click)=\"detachCredit(person)\">\r\n                <mat-icon svgIcon=\"close\"></mat-icon>\r\n            </button>\r\n        </td>\r\n    </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<no-results-message *ngIf=\"!(datatable.data$ | async).length\" svgImage=\"awards.svg\">\r\n    <span primary-text trans>Nothing to Display.</span>\r\n</no-results-message>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    Input,\r\n    OnChanges, OnDestroy,\r\n    OnInit,\r\n    SimpleChange\r\n} from '@angular/core';\r\nimport {Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {TitleCredit} from '../../../../../../models/title';\r\nimport {CrupdateCreditModalComponent} from '../crupdate-credit-modal/crupdate-credit-modal.component';\r\nimport {ChangeCreditOrder, RemoveCredit} from '../../state/crupdate-title-actions';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {CdkDragDrop} from '@angular/cdk/drag-drop';\r\nimport {Person} from '../../../../../../models/person';\r\nimport {Creditable} from '../../../../../people/creditable';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {Toast} from '@common/core/ui/toast.service';\r\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\nimport {DatatableService} from '@common/datatable/datatable.service';\r\n\r\n@Component({\r\n    selector: 'credits-panel',\r\n    templateUrl: './credits-panel.component.html',\r\n    styleUrls: ['./credits-panel.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [DatatableService]\r\n})\r\nexport class CreditsPanelComponent implements OnChanges, OnInit, OnDestroy {\r\n    @Input() mediaItem: Creditable;\r\n    @Input() type: 'cast'|'crew';\r\n\r\n    constructor(\r\n        private dialog: Modal,\r\n        private store: Store,\r\n        private toast: Toast,\r\n        public datatable: DatatableService<TitleCredit>,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.datatable.init();\r\n    }\r\n\r\n    ngOnChanges(changes: {mediaItem?: SimpleChange}) {\r\n        if (changes.mediaItem && changes.mediaItem.currentValue) {\r\n            this.datatable.data = this.type === 'cast' ?\r\n                this.getCast(this.mediaItem.credits) :\r\n                this.getCrew(this.mediaItem.credits);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.datatable.destroy();\r\n    }\r\n\r\n    public openCrupdateCreditModal(credit?: TitleCredit) {\r\n        this.dialog.open(\r\n            CrupdateCreditModalComponent,\r\n            {credit, type: this.type, mediaItem: this.mediaItem}\r\n        );\r\n    }\r\n\r\n    public detachCredit(credit: TitleCredit) {\r\n        this.dialog.open(ConfirmModalComponent, {\r\n            title: 'Remove Credit',\r\n            body:  'Are you sure you want to remove this credit?',\r\n            ok:    'Remove'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.store.dispatch(new RemoveCredit(this.mediaItem, credit)).subscribe(() => {\r\n                this.toast.open(MESSAGES.CREDIT_REMOVE_SUCCESS);\r\n            });\r\n        });\r\n    }\r\n\r\n    public changeCreditsOrder(e: CdkDragDrop<Person>) {\r\n        if (this.store.selectSnapshot(CrupdateTitleState.loading)) return;\r\n        this.store.dispatch(new ChangeCreditOrder(this.mediaItem, e.previousIndex, e.currentIndex, this.type));\r\n    }\r\n\r\n    public getCast(credits: TitleCredit[]) {\r\n        if ( ! credits) return [];\r\n        return credits.filter(credit => credit.pivot.department === 'cast');\r\n    }\r\n\r\n    public getCrew(credits: TitleCredit[]) {\r\n        if ( ! credits) return [];\r\n        return credits.filter(credit => credit.pivot.department !== 'cast');\r\n    }\r\n}\r\n","<div class=\"modal-header\">\r\n    <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"data.episode\" trans>Edit Episode</h2>\r\n    <h2 class=\"modal-title\" mat-dialog-title *ngIf=\"!data.episode\" trans>Create Episode</h2>\r\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style icon-button\">\r\n        <mat-icon svgIcon=\"close\"></mat-icon>\r\n    </button>\r\n</div>\r\n\r\n<form autocomplete=\"off\" (ngSubmit)=\"confirm()\" [formGroup]=\"episodeForm\" ngNativeValidate>\r\n    <mat-dialog-content>\r\n        <mat-tab-group [dynamicHeight]=\"true\" animationDuration=\"0ms\" color=\"accent\">\r\n            <mat-tab [label]=\"'Primary Facts' | trans\">\r\n                <div class=\"many-inputs primary-facts-panel\">\r\n                    <div class=\"input-container\">\r\n                        <label for=\"name\" trans>Title</label>\r\n                        <input type=\"text\" formControlName=\"name\" id=\"name\" minlength=\"1\" maxlength=\"250\" required>\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"episode_number\" trans>Number</label>\r\n                        <input type=\"number\" formControlName=\"episode_number\" id=\"episode_number\" min=\"1\" required>\r\n                        <div class=\"error\" *ngIf=\"(errors$ | async).episode_number as epNumError\">{{epNumError}}</div>\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"poster\" trans>Poster</label>\r\n                        <div class=\"input-with-action action-left\">\r\n                            <button type=\"button\" mat-flat-button color=\"accent\" (click)=\"uploadPoster()\"\r\n                                    [matTooltip]=\"'Upload poster' | trans\">\r\n                                <mat-icon svgIcon=\"file-upload\"></mat-icon>\r\n                            </button>\r\n                            <input type=\"text\" formControlName=\"poster\" id=\"poster\" minlength=\"1\" maxlength=\"250\">\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"release_date\" trans>Release Date</label>\r\n                        <input type=\"date\" formControlName=\"release_date\" id=\"release_date\" required>\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"description\" trans>Overview</label>\r\n                        <textarea type=\"text\" formControlName=\"description\" id=\"description\" minlength=\"1\"\r\n                                  cdkTextareaAutosize cdkAutosizeMinRows=\"6\"></textarea>\r\n                    </div>\r\n\r\n                    <div class=\"input-container\">\r\n                        <label for=\"popularity\" trans>Popularity</label>\r\n                        <input type=\"number\" formControlName=\"popularity\" id=\"popularity\" min=\"1\" max=\"1000\">\r\n                    </div>\r\n                </div>\r\n            </mat-tab>\r\n            <mat-tab [label]=\"'Cast' | trans\" [disabled]=\"!data.episode\">\r\n                <credits-panel [mediaItem]=\"episode$ | async\" type=\"cast\"></credits-panel>\r\n            </mat-tab>\r\n            <mat-tab [label]=\"'Crew' | trans\" [disabled]=\"!data.episode\">\r\n                <credits-panel [mediaItem]=\"episode$ | async\" type=\"crew\"></credits-panel>\r\n            </mat-tab>\r\n        </mat-tab-group>\r\n    </mat-dialog-content>\r\n\r\n    <mat-dialog-actions>\r\n        <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\r\n        <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>Save</button>\r\n    </mat-dialog-actions>\r\n</form>","import {Component, OnInit, ViewEncapsulation, ChangeDetectionStrategy, Inject} from '@angular/core';\r\nimport {Episode} from '../../../../../../../models/episode';\r\nimport {Select, Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../../state/crupdate-title-state';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {FormBuilder, Validators} from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport {CreateEpisode, LoadEpisodeCredits, UpdateEpisode} from '../../../state/crupdate-title-actions';\r\nimport {MESSAGES} from '../../../../../../../toast-messages';\r\nimport {Season} from '../../../../../../../models/season';\r\nimport {UploadQueueService} from '../../../../../../../../common/uploads/upload-queue/upload-queue.service';\r\nimport {Toast} from '../../../../../../../../common/core/ui/toast.service';\r\nimport {openUploadWindow} from '../../../../../../../../common/uploads/utils/open-upload-window';\r\nimport {UploadInputTypes} from '../../../../../../../../common/uploads/upload-input-config';\r\nimport {BackendErrorResponse} from '../../../../../../../../common/core/types/backend-error-response';\r\n\r\ninterface CrupdateEpisodeModalData {\r\n    episode?: Episode;\r\n    season?: Season;\r\n}\r\n\r\n@Component({\r\n    selector: 'crupdate-episode-modal',\r\n    templateUrl: './crupdate-episode-modal.component.html',\r\n    styleUrls: ['./crupdate-episode-modal.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [UploadQueueService],\r\n})\r\nexport class CrupdateEpisodeModalComponent implements OnInit {\r\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\r\n    public episode$: BehaviorSubject<Episode> = new BehaviorSubject(null);\r\n    public errors$: BehaviorSubject<{episode_number?: string}> = new BehaviorSubject({});\r\n\r\n    public episodeForm = this.fb.group({\r\n        name: ['', [Validators.required, Validators.minLength(1)]],\r\n        poster: ['', [Validators.minLength(1), Validators.maxLength(250)]],\r\n        description: ['', [Validators.minLength(1)]],\r\n        popularity: [50, [Validators.min(1), Validators.max(1000)]],\r\n        release_date: [''],\r\n        episode_number: [''],\r\n    });\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private toast: Toast,\r\n        private fb: FormBuilder,\r\n        private uploadQueue: UploadQueueService,\r\n        private dialogRef: MatDialogRef<CrupdateEpisodeModalComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: CrupdateEpisodeModalData,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        if (this.data.episode) {\r\n            this.bindToStoreEpisode();\r\n            this.episodeForm.patchValue({\r\n                ...this.episode$.value,\r\n                release_date: this.episode$.value.release_date.split(' ')[0]\r\n            });\r\n            setTimeout(() => this.loadEpisodeCredits());\r\n        } else {\r\n            const epNum = this.data.season ? this.data.season.episode_count + 1 : 1;\r\n            this.episodeForm.patchValue({episode_number: epNum});\r\n        }\r\n    }\r\n\r\n    public confirm() {\r\n        if (this.data.episode) {\r\n            this.updateEpisode();\r\n        } else {\r\n            this.createEpisode();\r\n        }\r\n    }\r\n\r\n    public close() {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    private createEpisode() {\r\n        this.store.dispatch(new CreateEpisode(this.data.season, this.episodeForm.value))\r\n            .subscribe(() => {\r\n                this.errors$.next({});\r\n                this.toast.open(MESSAGES.EPISODE_CREATE_SUCCESS);\r\n                const episodes = this.store.selectSnapshot(CrupdateTitleState.seasons)\r\n                    .find(s => s.id === this.data.season.id).episodes;\r\n                this.data.episode = episodes[episodes.length - 1];\r\n            }, (errResponse: BackendErrorResponse) => this.errors$.next(errResponse.errors));\r\n    }\r\n\r\n    private updateEpisode() {\r\n        this.store.dispatch(new UpdateEpisode(this.data.episode, this.episodeForm.value))\r\n            .subscribe(() => {\r\n                this.errors$.next({});\r\n                this.toast.open(MESSAGES.EPISODE_UPDATE_SUCCESS);\r\n                this.close();\r\n            }, (errResponse: BackendErrorResponse) => this.errors$.next(errResponse.errors));\r\n    }\r\n\r\n    public uploadPoster() {\r\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\r\n            const params = {\r\n                uri: 'uploads/images',\r\n                httpParams: {\r\n                    diskPrefix: 'media-images/posters'\r\n                },\r\n            };\r\n            this.uploadQueue.start(upload, params).subscribe(response => {\r\n                this.episodeForm.patchValue({\r\n                    poster: response.fileEntry.url\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    private bindToStoreEpisode() {\r\n        this.store.select(CrupdateTitleState.title)\r\n            .subscribe(title => {\r\n               if (title.seasons) {\r\n                   const episode = title.seasons.find(s => s.number === this.data.episode.season_number)\r\n                       .episodes.find(e => e.episode_number === this.data.episode.episode_number);\r\n                   this.episode$.next({...episode});\r\n               }\r\n            });\r\n    }\r\n\r\n    private loadEpisodeCredits() {\r\n        if ( ! this.data.episode.credits) {\r\n            this.store.dispatch(new LoadEpisodeCredits(this.episode$.value)).toPromise();\r\n        }\r\n    }\r\n}\r\n","<datatable-header pluralResourceName=\"episodes\">\r\n    <ng-container leftContent>\r\n        <button mat-raised-button color=\"accent\" (click)=\"openCrupdateEpisodeModal()\" trans>Add Episode</button>\r\n    </ng-container>\r\n</datatable-header>\r\n<table class=\"material-table\">\r\n    <thead>\r\n    <tr>\r\n        <th table-sort-header trans>Name</th>\r\n        <th table-sort-header trans>Number</th>\r\n        <th table-sort-header trans>Release Date</th>\r\n        <th></th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n    <tr *ngFor=\"let episode of datatable.data$ | async; trackBy: trackByFn\">\r\n        <td>\r\n            <div class=\"column-with-image\">\r\n                <media-image [src]=\"episode.poster\" [alt]=\"episode.name\" size=\"small\"></media-image>\r\n                <span>{{episode.name}}</span>\r\n            </div>\r\n        </td>\r\n        <td>{{episode.episode_number}}</td>\r\n        <td>{{episode.release_date | formattedDate}}</td>\r\n        <td class=\"edit-column\">\r\n            <button type=\"button\" mat-icon-button (click)=\"openCrupdateEpisodeModal(episode)\">\r\n                <mat-icon svgIcon=\"edit\"></mat-icon>\r\n            </button>\r\n            <button type=\"button\" mat-icon-button (click)=\"deleteEpisode(episode)\">\r\n                <mat-icon svgIcon=\"close\"></mat-icon>\r\n            </button>\r\n        </td>\r\n    </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<no-results-message *ngIf=\"!(datatable.data$ | async).length\">\r\n    <span primary-text trans>Nothing to Display.</span>\r\n    <span secondary-text trans>This season does not have any episodes yet.</span>\r\n</no-results-message>\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    Input,\r\n    OnChanges, OnDestroy,\r\n    OnInit,\r\n    SimpleChange,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {Episode} from '../../../../../../models/episode';\r\nimport {DeleteEpisode} from '../../state/crupdate-title-actions';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {CrupdateEpisodeModalComponent} from '../seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component';\r\nimport {Store} from '@ngxs/store';\r\nimport {Season} from '../../../../../../models/season';\r\nimport {Modal} from '../../../../../../../common/core/ui/dialogs/modal.service';\r\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\r\nimport {ConfirmModalComponent} from '../../../../../../../common/core/ui/confirm-modal/confirm-modal.component';\r\nimport {ActivatedRoute} from '@angular/router';\r\nimport {DatatableService} from '../../../../../../../common/datatable/datatable.service';\r\n\r\n@Component({\r\n    selector: 'episodes-panel',\r\n    templateUrl: './episodes-panel.component.html',\r\n    styleUrls: ['./episodes-panel.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [DatatableService]\r\n})\r\nexport class EpisodesPanelComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\r\n    @Input() season: Season;\r\n    public trackByFn = (i: number, episode: Episode) => episode.id;\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private dialog: Modal,\r\n        private toast: Toast,\r\n        private route: ActivatedRoute,\r\n        public datatable: DatatableService<Episode>,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.datatable.init();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        const episodeNum = +this.route.snapshot.params.episodeNumber;\r\n        if (episodeNum) {\r\n            const episode = this.season.episodes.find(e => e.episode_number === episodeNum);\r\n            if (episode) {\r\n                this.openCrupdateEpisodeModal(episode);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: {season?: SimpleChange}) {\r\n        if (changes.season.currentValue && changes.season.currentValue.episodes) {\r\n            this.datatable.data = this.season.episodes;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.datatable.destroy();\r\n    }\r\n\r\n    public deleteEpisode(episode: Episode) {\r\n        this.dialog.open(ConfirmModalComponent, {\r\n            title: 'Delete Episode',\r\n            body:  'Are you sure you want to delete this episode?',\r\n            ok:    'Delete'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.store.dispatch(new DeleteEpisode(episode)).subscribe(() => {\r\n                this.toast.open(MESSAGES.EPISODE_DELETE_SUCCESS);\r\n            });\r\n        });\r\n    }\r\n\r\n    public openCrupdateEpisodeModal(episode?: Episode) {\r\n        this.dialog.open(\r\n            CrupdateEpisodeModalComponent,\r\n            {episode, season: this.season},\r\n            {panelClass: 'crupdate-episode-modal-container'}\r\n        );\r\n    }\r\n}\r\n","<ng-container *ngIf=\"seasons$ | async as seasons\">\r\n    <div class=\"header\">\r\n        <button type=\"button\" mat-raised-button color=\"accent\" (click)=\"addSeason()\" [disabled]=\"loading$ | async\">Add Season</button>\r\n    </div>\r\n\r\n    <mat-accordion>\r\n        <mat-expansion-panel [expanded]=\"(activeSeason$ | async) === season.number\" class=\"mat-elevation-z0\" [ngClass]=\"'season-' + season.number + '-panel'\" *ngFor=\"let season of seasons; trackBy: trackByFn\">\r\n            <mat-expansion-panel-header>\r\n                <mat-panel-title>\r\n                    <span trans>Season</span>\r\n                    &nbsp;\r\n                    <span>{{season.number}}</span>\r\n                </mat-panel-title>\r\n            </mat-expansion-panel-header>\r\n\r\n            <ng-template matExpansionPanelContent>\r\n                <mat-tab-group animationDuration=\"0ms\" color=\"accent\">\r\n                    <mat-tab [label]=\"'Episodes' | trans\">\r\n                        <episodes-panel [season]=\"season\"></episodes-panel>\r\n                    </mat-tab>\r\n                    <mat-tab [label]=\"'Regular Cast' | trans\">\r\n                        <credits-panel type=\"cast\" [mediaItem]=\"season\"></credits-panel>\r\n                    </mat-tab>\r\n                    <mat-tab [label]=\"'Regular Crew' | trans\">\r\n                        <credits-panel type=\"crew\" [mediaItem]=\"season\"></credits-panel>\r\n                    </mat-tab>\r\n                </mat-tab-group>\r\n            </ng-template>\r\n\r\n            <mat-action-row>\r\n                <button type=\"button\" mat-button (click)=\"maybeDeleteSeason(season)\" trans>Delete</button>\r\n            </mat-action-row>\r\n        </mat-expansion-panel>\r\n    </mat-accordion>\r\n\r\n    <no-results-message *ngIf=\"!seasons.length\">\r\n        <span primary-text trans>Nothing to Display.</span>\r\n        <span secondary-text trans>This series does not have any seasons yet.</span>\r\n    </no-results-message>\r\n</ng-container>\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    OnInit\r\n} from '@angular/core';\r\nimport {Select, Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {Season} from '../../../../../../models/season';\r\nimport {CreateSeason, DeleteSeason} from '../../state/crupdate-title-actions';\r\nimport {Modal} from '../../../../../../../common/core/ui/dialogs/modal.service';\r\nimport {ConfirmModalComponent} from '../../../../../../../common/core/ui/confirm-modal/confirm-modal.component';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\r\nimport {ActivatedRoute} from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'seasons-panel',\r\n    templateUrl: './seasons-panel.component.html',\r\n    styleUrls: ['./seasons-panel.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SeasonsPanelComponent implements OnInit, AfterViewInit {\r\n    @Select(CrupdateTitleState.seasons) seasons$: Observable<Season[]>;\r\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\r\n    public activeSeason$ = new BehaviorSubject<number>(1);\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private modal: Modal,\r\n        private toast: Toast,\r\n        private route: ActivatedRoute,\r\n        private el: ElementRef<HTMLElement>,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.activeSeason$.next(+this.route.snapshot.params.seasonNumber || 1);\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n       setTimeout(() => {\r\n           if (this.activeSeason$.value > 1) {\r\n               this.el.nativeElement.querySelector(`.season-${this.activeSeason$.value}-panel`)\r\n                   ?.scrollIntoView({behavior: 'smooth', block: 'start', inline: 'start'});\r\n           }\r\n       });\r\n    }\r\n\r\n    public addSeason() {\r\n        this.store.dispatch(new CreateSeason()).subscribe(() => {\r\n            this.toast.open(MESSAGES.SEASON_CREATE_SUCCESS);\r\n        });\r\n    }\r\n\r\n    public maybeDeleteSeason(season: Season) {\r\n        this.modal.open(ConfirmModalComponent, {\r\n            title: 'Delete Season',\r\n            body:  'Are you sure you want to delete this season?',\r\n            bodyBold: 'This will also delete all episodes attached to this season.',\r\n            ok:    'Delete'\r\n        }).afterClosed().subscribe(confirmed => {\r\n            if ( ! confirmed) return;\r\n            this.store.dispatch(new DeleteSeason(season)).subscribe(() => {\r\n                this.toast.open(MESSAGES.SEASON_DELETE_SUCCESS);\r\n            });\r\n        });\r\n    }\r\n\r\n    trackByFn(index: number, season: Season) {\r\n        return season.id;\r\n    }\r\n}\r\n","<button mat-raised-button color=\"accent\" (click)=\"uploadImage()\">\r\n    <mat-icon svgIcon=\"add\"></mat-icon>\r\n    <span trans>Upload Image</span>\r\n</button>\r\n\r\n<div cdkDropListGroup>\r\n    <div cdkDropList [cdkDropListEnterPredicate]=\"dropListEnterPredicate\" (cdkDropListDropped)=\"dropListDropped()\"></div>\r\n    <div class=\"images-grid\">\r\n        <div cdkDropList [cdkDropListEnterPredicate]=\"dropListEnterPredicate\" (cdkDropListDropped)=\"dropListDropped()\" *ngFor=\"let image of images$ | async\">\r\n            <media-image class=\"images-panel-media-image\" cdkDrag (cdkDragMoved)=\"dragMoved($event);\" [src]=\"image.url\" size=\"medium\" mode=\"landscape\">\r\n                <button mat-mini-fab color=\"warn\" (click)=\"deleteImage(image)\">\r\n                    <mat-icon svgIcon=\"delete\"></mat-icon>\r\n                </button>\r\n            </media-image>\r\n        </div>\r\n    </div>\r\n</div>","import {ChangeDetectionStrategy, Component, ViewChild} from '@angular/core';\r\nimport {Select, Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {Observable} from 'rxjs';\r\nimport {Image} from '../../../../../../models/image';\r\nimport {ImagesService} from '../../../../../shared/images.service';\r\nimport {AddImage, ChangeImageOrder, DeleteImage} from '../../state/crupdate-title-actions';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {UploadQueueService} from '../../../../../../../common/uploads/upload-queue/upload-queue.service';\r\nimport {CdkDrag, CdkDragMove, CdkDropList, CdkDropListGroup} from '@angular/cdk/drag-drop';\r\nimport {Toast} from '../../../../../../../common/core/ui/toast.service';\r\nimport {openUploadWindow} from '../../../../../../../common/uploads/utils/open-upload-window';\r\nimport {UploadInputTypes} from '../../../../../../../common/uploads/upload-input-config';\r\nimport {ViewportRuler} from '@angular/cdk/overlay';\r\n\r\n@Component({\r\n    selector: 'images-panel',\r\n    templateUrl: './images-panel.component.html',\r\n    styleUrls: ['./images-panel.component.scss'],\r\n    providers: [UploadQueueService],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ImagesPanelComponent {\r\n    @Select(CrupdateTitleState.images) images$: Observable<Image[]>;\r\n\r\n    @ViewChild(CdkDropListGroup) listGroup: CdkDropListGroup<CdkDropList>;\r\n    @ViewChild(CdkDropList) placeholder: CdkDropList;\r\n\r\n    public target: CdkDropList;\r\n    public targetIndex: number;\r\n    public source: CdkDropList;\r\n    public sourceIndex: number;\r\n    public activeContainer;\r\n\r\n    constructor(\r\n        private images: ImagesService,\r\n        private store: Store,\r\n        private toast: Toast,\r\n        private viewportRuler: ViewportRuler,\r\n    ) {}\r\n\r\n    public uploadImage() {\r\n        openUploadWindow({types: [UploadInputTypes.image]}).then(upload => {\r\n            const params = {\r\n                modelId: this.store.selectSnapshot(CrupdateTitleState.title).id\r\n            };\r\n            this.images.create(upload[0], params)\r\n                .subscribe(response => {\r\n                    this.store.dispatch(new AddImage(response.image)).subscribe(() => {\r\n                        this.toast.open(MESSAGES.IMAGE_CREATE_SUCCESS);\r\n                    });\r\n                });\r\n        });\r\n    }\r\n\r\n    public deleteImage(image: Image) {\r\n        this.store.dispatch(new DeleteImage(image)).subscribe(() => {\r\n            this.toast.open(MESSAGES.IMAGE_DELETE_SUCCESS);\r\n        });\r\n    }\r\n\r\n    /* GRID DRAG AND DROP */\r\n\r\n    dragMoved(e: CdkDragMove) {\r\n        const point = this.getPointerPositionOnPage(e.event);\r\n        this.listGroup._items.forEach(dropList => {\r\n            if (__isInsideDropListClientRect(dropList, point.x, point.y)) {\r\n                this.activeContainer = dropList;\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    dropListDropped() {\r\n        if ( ! this.target) return;\r\n\r\n        const phElement = this.placeholder.element.nativeElement;\r\n        const parent = phElement.parentElement;\r\n\r\n        phElement.style.display = 'none';\r\n\r\n        parent.removeChild(phElement);\r\n        parent.appendChild(phElement);\r\n        parent.insertBefore(this.source.element.nativeElement, parent.children[this.sourceIndex]);\r\n\r\n        this.target = null;\r\n        this.source = null;\r\n\r\n        if (this.sourceIndex !== this.targetIndex) {\r\n            this.store.dispatch(new ChangeImageOrder(this.sourceIndex, this.targetIndex));\r\n        }\r\n    }\r\n\r\n    dropListEnterPredicate = (drag: CdkDrag, drop: CdkDropList) => {\r\n        if (drop === this.placeholder) return true;\r\n\r\n\r\n        if (drop !== this.activeContainer) return false;\r\n\r\n        const phElement = this.placeholder.element.nativeElement;\r\n        const sourceElement = drag.dropContainer.element.nativeElement;\r\n        const dropElement = drop.element.nativeElement;\r\n\r\n        const dragIndex = __indexOf(dropElement.parentElement.children, (this.source ? phElement : sourceElement));\r\n        const dropIndex = __indexOf(dropElement.parentElement.children, dropElement);\r\n\r\n        if ( ! this.source) {\r\n            this.sourceIndex = dragIndex;\r\n            this.source = drag.dropContainer;\r\n\r\n            phElement.style.width = sourceElement.clientWidth + 'px';\r\n            phElement.style.height = sourceElement.clientHeight + 'px';\r\n\r\n            sourceElement.parentElement.removeChild(sourceElement);\r\n        }\r\n\r\n        this.targetIndex = dropIndex;\r\n        this.target = drop;\r\n\r\n        phElement.style.display = '';\r\n        dropElement.parentElement.insertBefore(phElement, (dropIndex > dragIndex\r\n            ? dropElement.nextSibling : dropElement));\r\n\r\n        this.placeholder._dropListRef.enter(drag._dragRef, drag.element.nativeElement.offsetLeft, drag.element.nativeElement.offsetTop);\r\n        return false;\r\n    }\r\n\r\n    /** Determines the point of the page that was touched by the user. */\r\n    getPointerPositionOnPage(event: MouseEvent | TouchEvent) {\r\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\r\n        const point = __isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\r\n        const scrollPosition = this.viewportRuler.getViewportScrollPosition();\r\n\r\n        return {\r\n            x: point.pageX - scrollPosition.left,\r\n            y: point.pageY - scrollPosition.top\r\n        };\r\n    }\r\n}\r\n\r\nfunction __indexOf(collection, node) {\r\n    return Array.prototype.indexOf.call(collection, node);\r\n}\r\n\r\n/** Determines whether an event is a touch event. */\r\nfunction __isTouchEvent(event: MouseEvent | TouchEvent): event is TouchEvent {\r\n    return event.type.startsWith('touch');\r\n}\r\n\r\nfunction __isInsideDropListClientRect(dropList: CdkDropList, x: number, y: number) {\r\n    const {top, bottom, left, right} = dropList.element.nativeElement.getBoundingClientRect();\r\n    return y >= top && y <= bottom && x >= left && x <= right;\r\n}\r\n","<form class=\"input-container\" *ngIf=\"!readonly\" ngNativeValidate (ngSubmit)=\"selectTagsFromString(formControl.value)\">\r\n    <div class=\"input-with-action\">\r\n        <input type=\"text\" class=\"tags-string-input\" [matAutocomplete]=\"auto\" [formControl]=\"formControl\" required>\r\n        <button type=\"submit\" class=\"add-tags-button\" mat-flat-button color=\"accent\" trans>Add</button>\r\n    </div>\r\n</form>\r\n\r\n<p class=\"main-info\" *ngIf=\"!readonly\" [transValues]=\"{tagName: pluralName}\" trans>Separate :tagName with comma.</p>\r\n\r\n<div class=\"selected-tags\">\r\n    <mat-chip-list [selectable]=\"false\">\r\n        <mat-chip (removed)=\"deselectTag(tag)\" [removable]=\"!readonly\" *ngFor=\"let tag of selectedTags$ | async\">\r\n            <span>{{tag}}</span>\r\n            <mat-icon svgIcon=\"cancel\" matChipRemove></mat-icon>\r\n        </mat-chip>\r\n    </mat-chip-list>\r\n</div>\r\n\r\n<div class=\"existing-tags\" *ngIf=\"!readonly\">\r\n    <p [transValues]=\"{tagName: pluralName}\" trans>Choose from existing :tagName:</p>\r\n    <div class=\"existing-tags-list\">\r\n        <div class=\"existing-tag-name\" *ngFor=\"let tag of existingTags$ | async\" (click)=\"selectTags([tag.name])\">{{tag.display_name}}</div>\r\n    </div>\r\n</div>\r\n\r\n<mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"selectTags([$event.option.value])\">\r\n    <mat-option *ngFor=\"let tag of suggestedTags$ | async\" [value]=\"tag.name\">{{tag.display_name}}</mat-option>\r\n</mat-autocomplete>\r\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\r\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\r\nimport {BehaviorSubject} from 'rxjs';\r\nimport {Tag} from '@common/core/types/models/Tag';\r\nimport {TagsService} from '@common/core/services/tags.service';\r\nimport {slugifyString} from '@common/core/utils/slugify-string';\r\n\r\n@Component({\r\n    selector: 'tags-manager',\r\n    templateUrl: './tags-manager.component.html',\r\n    styleUrls: ['./tags-manager.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [{\r\n        provide: NG_VALUE_ACCESSOR,\r\n        useExisting: TagsManagerComponent,\r\n        multi: true,\r\n    }]\r\n})\r\nexport class TagsManagerComponent implements OnInit, ControlValueAccessor {\r\n    @Input() public readonly = false;\r\n    @Input() public tagType: string;\r\n    @Input() public pluralName = 'tags';\r\n\r\n    public formControl = new FormControl();\r\n    private propagateChange: (tags: string[]) => void;\r\n\r\n    /**\r\n     * Tags user has selected.\r\n     */\r\n    public selectedTags$ = new BehaviorSubject<string[]>([]);\r\n    /**\r\n     * A list of tags that already exist in the app.\r\n     */\r\n    public existingTags$ = new BehaviorSubject<Tag[]>([]);\r\n    /**\r\n     * Tags currently being suggested in autocomplete.\r\n     */\r\n    public suggestedTags$ = new BehaviorSubject<Tag[]>([]);\r\n\r\n    constructor(private tagService: TagsService) {}\r\n\r\n    ngOnInit() {\r\n        this.tagService.index({perPage: 15, type: this.tagType}).subscribe(response => {\r\n            this.existingTags$.next(response.pagination.data.filter(tag => tag.type !== 'status'));\r\n        });\r\n        this.formControl.valueChanges.subscribe(q => {\r\n            const suggestions = q ?\r\n                this.existingTags$.value.filter(t => t.name.toLowerCase().includes(q.toLowerCase())) :\r\n                [];\r\n            this.suggestedTags$.next(suggestions);\r\n        });\r\n    }\r\n\r\n    public writeValue(value: string[]) {\r\n        this.selectTags(value, {skipPropagate: true, override: true});\r\n    }\r\n\r\n    public registerOnChange(fn: (tags: string[]) => void) {\r\n        this.propagateChange = fn;\r\n    }\r\n\r\n    public registerOnTouched() {}\r\n\r\n    public selectTags(tags?: string[], options: {skipPropagate?: boolean, override?: boolean} = {}) {\r\n        const newTags = (tags || []).map(t => t.trim())\r\n            .filter(t => !this.selectedTags$.value.includes(t));\r\n        if (options.override) {\r\n            this.selectedTags$.next(newTags);\r\n        } else if (newTags.length) {\r\n            this.selectedTags$.next([\r\n                ...this.selectedTags$.value,\r\n                ...newTags\r\n            ]);\r\n        }\r\n        this.formControl.reset();\r\n        if (!options.skipPropagate) {\r\n           this.propagateChange(this.selectedTags$.value);\r\n        }\r\n    }\r\n\r\n    public deselectTag(tagName: string) {\r\n        const selectedTags = this.selectedTags$.value.slice();\r\n        selectedTags.splice(selectedTags.indexOf(tagName), 1);\r\n        this.selectedTags$.next(selectedTags);\r\n        this.propagateChange(this.selectedTags$.value);\r\n    }\r\n\r\n    public selectTagsFromString(tagString: string) {\r\n        const tags = tagString.split(',').map(t => slugifyString(t));\r\n        this.selectTags(tags);\r\n    }\r\n}\r\n","import {ChangeDetectionStrategy, Component, Inject} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {FormControl} from '@angular/forms';\n\ninterface SelectTagsModalComponentData {\n    tagType?: string;\n    pluralName?: string;\n}\n\n@Component({\n    selector: 'tag-manager-modal',\n    templateUrl: './select-tags-modal.component.html',\n    styleUrls: ['./select-tags-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SelectTagsModalComponent {\n    public selectedTagsControl = new FormControl();\n    public pluralName: string;\n\n    constructor(\n        private dialogRef: MatDialogRef<SelectTagsModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: SelectTagsModalComponentData,\n    ) {\n        this.pluralName = this.data.pluralName || 'tags';\n    }\n\n    public close() {\n        this.dialogRef.close();\n    }\n\n    public confirm() {\n        this.dialogRef.close(this.selectedTagsControl.value);\n    }\n\n    public noTagsSelected(): boolean {\n        return !this.selectedTagsControl.value?.length;\n    }\n}\n","<div class=\"modal-header\">\n    <h2 mat-dialog-title [transValues]=\"{tagName: pluralName}\" trans>Select :tagName</h2>\n    <button type=\"button\" (click)=\"close()\" class=\"close-button\" mat-icon-button tabindex=\"-1\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</div>\n\n<mat-dialog-content>\n   <tags-manager [tagType]=\"data.tagType\" [pluralName]=\"pluralName\" [formControl]=\"selectedTagsControl\"></tags-manager>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button (click)=\"close()\" type=\"button\" class=\"cancel-button\" mat-button trans>Cancel</button>\n    <button type=\"button\" class=\"submit-button\" [disabled]=\"noTagsSelected()\" (click)=\"confirm()\" mat-raised-button color=\"accent\" [transValues]=\"{tagName: pluralName}\" trans>Merge :tagName</button>\n</mat-dialog-actions>\n","<datatable-header>\r\n    <button mat-raised-button color=\"accent\" leftContent (click)=\"openTagManagerModal()\">\r\n        {{ 'Add' | trans }} {{ (displayType || (type + 's') ) | trans }}\r\n    </button>\r\n</datatable-header>\r\n\r\n<table class=\"material-table\">\r\n    <thead>\r\n    <tr>\r\n        <th table-sort-header trans>Name</th>\r\n        <th table-sort-header trans>Display Name</th>\r\n        <th></th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n    <tr *ngFor=\"let tag of datatable.data$ | async\">\r\n        <td>{{tag.name}}</td>\r\n        <td>{{tag.display_name || '-'}}</td>\r\n        <td class=\"edit-column\">\r\n            <button mat-icon-button (click)=\"detachTag(tag)\">\r\n                <mat-icon svgIcon=\"close\"></mat-icon>\r\n            </button>\r\n        </td>\r\n    </tr>\r\n    </tbody>\r\n</table>\r\n\r\n<no-results-message *ngIf=\"!(datatable.data$ | async).length\" svgImage=\"folder.svg\">\r\n    <span primary-text trans>Nothing to display</span>\r\n</no-results-message>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit\r\n} from '@angular/core';\r\nimport {Store} from '@ngxs/store';\r\nimport {CrupdateTitleState} from '../../state/crupdate-title-state';\r\nimport {AttachTags, DetachTag} from '../../state/crupdate-title-actions';\r\nimport {MESSAGES} from '../../../../../../toast-messages';\r\nimport {Tag} from '@common/core/types/models/Tag';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {Toast} from '@common/core/ui/toast.service';\r\nimport {SelectTagsModalComponent} from '@common/tags/tags-manager/select-tags-modal/select-tags-modal.component';\r\nimport {DatatableService} from '@common/datatable/datatable.service';\r\n\r\n@Component({\r\n    selector: 'tags-panel',\r\n    templateUrl: './tags-panel.component.html',\r\n    styleUrls: ['./tags-panel.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [DatatableService]\r\n})\r\nexport class TagsPanelComponent implements OnInit, OnDestroy {\r\n    @Input() type: 'keyword' | 'genre' | 'production_country';\r\n    @Input() displayType: string;\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private modal: Modal,\r\n        private toast: Toast,\r\n        public datatable: DatatableService<Tag>,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.datatable.init();\r\n        const tags$ = this.getTagObservable();\r\n        tags$.subscribe(tags => {\r\n            this.datatable.data = tags || [];\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.datatable.destroy();\r\n    }\r\n\r\n    public openTagManagerModal() {\r\n        this.modal.open(\r\n            SelectTagsModalComponent,\r\n            {tagType: this.type, pluralName: this.type === 'production_country' ? 'countries' : `${this.type}s`},\r\n        ).beforeClosed().subscribe(tagNames => {\r\n           if (tagNames && tagNames.length) {\r\n               this.store.dispatch(new AttachTags(tagNames, this.type));\r\n           }\r\n        });\r\n    }\r\n\r\n    public detachTag(tag: Tag) {\r\n        this.store.dispatch(new DetachTag(tag))\r\n            .subscribe(() => {\r\n                this.toast.open(MESSAGES.TAG_DETACH_SUCCESS);\r\n            });\r\n    }\r\n\r\n    private getTagObservable() {\r\n        if (this.type === 'keyword') {\r\n            return this.store.select(CrupdateTitleState.keywords);\r\n        } else if (this.type === 'genre') {\r\n            return this.store.select(CrupdateTitleState.genres);\r\n        } else {\r\n            return this.store.select(CrupdateTitleState.countries);\r\n        }\r\n    }\r\n}\r\n","<ng-container *ngIf=\"activePanel$ | async as activePanel\">\r\n    <primary-facts-panel class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'primaryFacts'\"></primary-facts-panel>\r\n    <seasons-panel class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'seasons'\"></seasons-panel>\r\n    <images-panel class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'images'\"></images-panel>\r\n    <video-index class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'videos'\" [title]=\"title\"></video-index>\r\n    <credits-panel class=\"material-panel crupdate-title-panel\" [mediaItem]=\"title\" type=\"cast\" *ngIf=\"activePanel === 'cast'\"></credits-panel>\r\n    <credits-panel class=\"material-panel crupdate-title-panel\" [mediaItem]=\"title\" type=\"crew\" *ngIf=\"activePanel === 'crew'\"></credits-panel>\r\n    <tags-panel class=\"material-panel crupdate-title-panel\" type=\"keyword\" *ngIf=\"activePanel === 'keywords'\"></tags-panel>\r\n    <tags-panel class=\"material-panel crupdate-title-panel\" type=\"genre\" *ngIf=\"activePanel === 'genres'\"></tags-panel>\r\n    <tags-panel class=\"material-panel crupdate-title-panel\" type=\"production_country\" displayType=\"country\" *ngIf=\"activePanel === 'countries'\"></tags-panel>\r\n    <reviews-index class=\"material-panel crupdate-title-panel\" *ngIf=\"activePanel === 'reviews'\" [title]=\"title\"></reviews-index>\r\n\r\n    <aside class=\"sidebar material-panel\">\r\n        <div class=\"header\" trans>Edit</div>\r\n        <div class=\"list\">\r\n            <button class=\"list-item no-style\" (click)=\"openPanel('primaryFacts')\" [class.active]=\"activePanel === 'primaryFacts'\" trans>Primary Facts</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('seasons')\" [class.active]=\"activePanel === 'seasons'\" trans>Seasons</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('images')\" [class.active]=\"activePanel === 'images'\" trans>Images</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('videos')\" [class.active]=\"activePanel === 'videos'\" trans>Videos</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('cast')\" [class.active]=\"activePanel === 'cast'\" trans>Cast</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('crew')\" [class.active]=\"activePanel === 'crew'\" trans>Crew</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('genres')\" [class.active]=\"activePanel === 'genres'\" trans>Genres</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('keywords')\" [class.active]=\"activePanel === 'keywords'\" trans>Keywords</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('countries')\" [class.active]=\"activePanel === 'countries'\" trans>Countries</button>\r\n            <button class=\"list-item no-style\" [disabled]=\"!titleCreated()\" (click)=\"openPanel('reviews')\" [class.active]=\"activePanel === 'reviews'\" trans>Reviews</button>\r\n        </div>\r\n        <p *ngIf=\"!titleCreated()\" class=\"message\" trans>Save from \"Primary Facts\" panel in order to enable other menu items.</p>\r\n    </aside>\r\n\r\n    <loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>\r\n</ng-container>\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    OnDestroy,\r\n    OnInit,\r\n    ViewEncapsulation\r\n} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {Select, Store} from '@ngxs/store';\r\nimport {HydrateTitle, ResetState} from './state/crupdate-title-actions';\r\nimport {CrupdateTitleState} from './state/crupdate-title-state';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {Title} from '../../../../models/title';\r\n\r\n@Component({\r\n    selector: 'crupdate-title',\r\n    templateUrl: './crupdate-title.component.html',\r\n    styleUrls: ['./crupdate-title.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CrupdateTitleComponent implements OnInit, OnDestroy {\r\n    @Select(CrupdateTitleState.loading) loading$: Observable<boolean>;\r\n    public title: Title;\r\n    public activePanel$ = new BehaviorSubject<string>('primaryFacts');\r\n\r\n    constructor(\r\n        private store: Store,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        this.route.data.subscribe(data => {\r\n            this.store.dispatch(new HydrateTitle(data.api?.title));\r\n            this.title = data.api?.title;\r\n        });\r\n\r\n        this.route.queryParams.subscribe(params => {\r\n            this.activePanel$.next(params.active || 'primaryFacts');\r\n        });\r\n\r\n        if (this.route.snapshot.params.seasonNumber) {\r\n            this.activePanel$.next('seasons');\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.store.dispatch(new ResetState());\r\n    }\r\n\r\n    public openPanel(name: string) {\r\n        this.router.navigate([], {queryParams: {active: name}});\r\n    }\r\n\r\n    public titleCreated(): boolean {\r\n        return !!this.store.selectSnapshot(CrupdateTitleState.title).id;\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {\r\n    ActivatedRouteSnapshot,\r\n    Resolve,\r\n    Router,\r\n    RouterStateSnapshot\r\n} from '@angular/router';\r\nimport {catchError, mergeMap} from 'rxjs/operators';\r\nimport {EMPTY, Observable, of} from 'rxjs';\r\nimport {Store} from '@ngxs/store';\r\nimport {TitlesService} from '../../titles.service';\r\nimport {CurrentUser} from '../../../../../common/auth/current-user';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class CrupdateTitleResolverService implements Resolve<Observable<any>> {\r\n    constructor(\r\n        private router: Router,\r\n        private store: Store,\r\n        private titles: TitlesService,\r\n    ) {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<any> {\r\n        const query = {fullCredits: true, keywords: true, countries: true, seasons: true, skipUpdating: true, allVideos: true},\r\n            titleId = route.params.titleId;\r\n\r\n        if ( ! titleId) {\r\n            return of(null);\r\n        }\r\n\r\n        return this.titles.get(route.params.titleId, query).pipe(\r\n            catchError(() => {\r\n                this.router.navigate(this.fallbackUri(state));\r\n                return EMPTY;\r\n            }),\r\n            mergeMap(response => {\r\n                if (response) {\r\n                    return of(response);\r\n                } else {\r\n                    this.router.navigate(this.fallbackUri(state));\r\n                    return EMPTY;\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    private fallbackUri(state: RouterStateSnapshot) {\r\n        return state.url.includes('admin') ? ['/admin/titles'] : [state.url.replace('/edit', '')];\r\n    }\r\n}\r\n\r\n","import {RouterModule, Routes} from '@angular/router';\r\nimport {NgModule} from '@angular/core';\r\nimport {CrupdateTitleComponent} from './crupdate-title/crupdate-title.component';\r\nimport {CrupdateTitleResolverService} from './crupdate-title/crupdate-title-resolver.service';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: CrupdateTitleComponent,\r\n        resolve: {api: CrupdateTitleResolverService},\r\n        data: {permissions: ['titles.update']}\r\n    },\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class CrupdateTitleRoutingModule {\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {CrupdateTitleComponent} from './crupdate-title/crupdate-title.component';\nimport {PrimaryFactsPanelComponent} from './crupdate-title/panels/primary-facts-panel/primary-facts-panel.component';\nimport {ImagesPanelComponent} from './crupdate-title/panels/images-panel/images-panel.component';\nimport {CreditsPanelComponent} from './crupdate-title/panels/credits-panel/credits-panel.component';\nimport {CrupdateCreditModalComponent} from './crupdate-title/panels/crupdate-credit-modal/crupdate-credit-modal.component';\nimport {TagsPanelComponent} from './crupdate-title/panels/tags-panel/tags-panel.component';\nimport {SeasonsPanelComponent} from './crupdate-title/panels/seasons-panel/seasons-panel.component';\nimport {CrupdateEpisodeModalComponent} from './crupdate-title/panels/seasons-panel/crupdate-episode-modal/crupdate-episode-modal.component';\nimport {VideoIndexComponent} from '../../../admin/video-index/video-index.component';\nimport {CrupdateTitleRoutingModule} from './crupdate-title-routing.module';\nimport {TranslationsModule} from '../../../../common/core/translations/translations.module';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {NoResultsMessageModule} from '../../../../common/core/ui/no-results-message/no-results-message.module';\nimport {MediaImageModule} from '../../shared/media-image/media-image.module';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {EpisodesPanelComponent} from './crupdate-title/panels/episodes-panel/episodes-panel.component';\nimport {FormatPipesModule} from '../../../../common/core/ui/format-pipes/format-pipes.module';\nimport {LoadingIndicatorModule} from '../../../../common/core/ui/loading-indicator/loading-indicator.module';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {SearchInputModule} from '../../search/seach-input/search-input.module';\nimport {DatatableModule} from '../../../../common/datatable/datatable.module';\nimport {VideoIndexFiltersComponent} from '../../../admin/video-index/video-index-filters/video-index-filters.component';\nimport {SelectUserInputModule} from '../../../../common/core/ui/select-user-input/select-user-input.module';\nimport {SelectTitleInputModule} from '../../../admin/video-index/select-title-input/select-title-input.module';\nimport {ReviewsIndexComponent} from '../../../admin/reviews-index/reviews-index.component';\nimport {ReviewIndexFiltersComponent} from '../../../admin/reviews-index/review-index-filters/review-index-filters.component';\n\n@NgModule({\n    declarations: [\n        CrupdateTitleComponent,\n        PrimaryFactsPanelComponent,\n        ImagesPanelComponent,\n        CreditsPanelComponent,\n        CrupdateCreditModalComponent,\n        TagsPanelComponent,\n        SeasonsPanelComponent,\n        EpisodesPanelComponent,\n        CrupdateEpisodeModalComponent,\n        VideoIndexComponent,\n        VideoIndexFiltersComponent,\n        ReviewsIndexComponent,\n        ReviewIndexFiltersComponent,\n    ],\n    imports: [\n        CommonModule,\n        CrupdateTitleRoutingModule,\n        TranslationsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        NoResultsMessageModule,\n        MediaImageModule,\n        FormatPipesModule,\n        LoadingIndicatorModule,\n        SearchInputModule,\n        DatatableModule,\n        SelectUserInputModule,\n        SelectTitleInputModule,\n\n        // material\n        MatButtonModule,\n        MatIconModule,\n        MatTooltipModule,\n        MatDialogModule,\n        MatTabsModule,\n        TextFieldModule,\n        MatExpansionModule,\n        DragDropModule,\n        MatAutocompleteModule,\n    ]\n})\nexport class CrupdateTitleModule {\n}\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\nimport {FormBuilder} from '@angular/forms';\nimport {DatatableService} from '../../../../common/datatable/datatable.service';\nimport {Model} from '../../../../common/core/types/models/model';\nimport {Title} from '../../../models/title';\n\n@Component({\n    selector: 'review-index-filters',\n    templateUrl: './review-index-filters.component.html',\n    styleUrls: ['./review-index-filters.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ReviewIndexFiltersComponent implements OnInit {\n    @Input() title: Title;\n    public form = this.fb.group({\n        type: null,\n        user: null,\n        title: null,\n        season: null,\n        episode: null,\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        private datable: DatatableService<Model>,\n    ) {}\n\n    ngOnInit() {\n        this.form.patchValue({\n            title: this.title,\n            ...this.datable.filters$.value,\n        });\n        if (this.title) {\n            this.form.get('title').disable();\n        }\n        this.form.valueChanges.subscribe(value => {\n            this.datable.filters$.next(value);\n        });\n    }\n}\n","<div [formGroup]=\"form\" class=\"many-inputs\">\n    <div class=\"input-container\">\n        <label for=\"review-type-filter\" trans>Type</label>\n        <select id=\"review-type-filter\" formControlName=\"type\">\n            <option [ngValue]=\"null\" trans>All</option>\n            <option value=\"review\" trans>Review</option>\n            <option value=\"rating\" trans>Rating</option>\n        </select>\n    </div>\n\n    <div class=\"input-container\">\n        <select-user-input formControlName=\"user\"></select-user-input>\n    </div>\n\n    <div class=\"input-container\">\n        <select-title-input [formGroup]=\"form\"></select-title-input>\n    </div>\n</div>\n","<div class=\"datatable responsive-table\">\r\n    <datatable-header pluralResourceName=\"reviews\">\r\n        <ng-container leftContent>\r\n            <button mat-raised-button (click)=\"openCrupdateReviewModal()\" color=\"accent\" *ngIf=\"currentUser.hasPermission('reviews.create')\" trans>Add</button>\r\n        </ng-container>\r\n        <button rightContent mat-raised-button color=\"accent\" (click)=\"maybeDeleteSelectedReviews()\" *ngIf=\"currentUser.hasPermission('reviews.delete')\" trans>Delete Selected</button>\r\n        <ng-template #tableFilters>\r\n            <review-index-filters [title]=\"title\"></review-index-filters>\r\n        </ng-template>\r\n    </datatable-header>\r\n    <table class=\"material-table\">\r\n        <thead>\r\n        <tr>\r\n            <th table-header-checkbox></th>\r\n            <th table-sort-header trans>Score</th>\r\n            <th table-sort-header=\"user_id\" trans>Owner</th>\r\n            <th table-sort-header=\"media_item_id\" trans>Reviewable</th>\r\n            <th table-sort-header=\"body\" trans>Type</th>\r\n            <th table-sort-header=\"updated_at\" trans>Last Updated</th>\r\n            <th></th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        <tr *ngFor=\"let review of reviews$ | async\">\r\n            <td [table-body-checkbox]=\"review.id\"></td>\r\n            <td data-label=\"Score\">\r\n                <mat-icon svgIcon=\"star-border\" class=\"star-icon\"></mat-icon>\r\n                <span>{{review.score}}/10</span>\r\n            </td>\r\n            <td data-label=\"User\">\r\n                <user-column [user]=\"review.user\"></user-column>\r\n            </td>\r\n            <td data-label=\"Reviewable\">\r\n                <div class=\"column-with-image\">\r\n                    <ng-container *ngIf=\"review.reviewable\">\r\n                        <img [src]=\"review.reviewable.poster\" alt=\"reviewable image\">\r\n                        <span>{{review.reviewable.name}}</span>\r\n                    </ng-container>\r\n                </div>\r\n            </td>\r\n            <td data-label=\"Type\">{{review.body ? 'Review' : 'Rating'}}</td>\r\n            <td data-label=\"Last Updated\">{{review.updated_at | formattedDate}}</td>\r\n            <td class=\"edit-column\">\r\n                <button mat-icon-button (click)=\"openCrupdateReviewModal(review)\" *ngIf=\"currentUser.hasPermission('reviews.update')\" [matTooltip]=\"'Edit review' | trans\">\r\n                    <mat-icon svgIcon=\"edit\"></mat-icon>\r\n                </button>\r\n            </td>\r\n        </tr>\r\n        </tbody>\r\n    </table>\r\n    <no-results-message svgImage=\"like-dislike.svg\" *ngIf=\"datatable.paginator.noResults$ | async\">\r\n        <span primary-text trans>No reviews have been created yet</span>\r\n    </no-results-message>\r\n    <datatable-footer></datatable-footer>\r\n</div>\r\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\r\nimport {TitleUrlsService} from '../../site/titles/title-urls.service';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {CurrentUser} from '@common/auth/current-user';\r\nimport {Settings} from '@common/core/config/settings.service';\r\nimport {Review} from '../../models/review';\r\nimport {ReviewService} from '../../site/shared/review.service';\r\nimport {CrupdateReviewModalComponent} from '../../site/reviews/crupdate-review-modal/crupdate-review-modal.component';\r\nimport {Observable} from 'rxjs';\r\nimport {\r\n    DatatableService,\r\n    DatatableStaticParams\r\n} from '../../../common/datatable/datatable.service';\r\nimport {MESSAGES} from '../../toast-messages';\r\nimport {Toast} from '../../../common/core/ui/toast.service';\r\nimport {Title} from '../../models/title';\r\n\r\n@Component({\r\n    selector: 'reviews-index',\r\n    templateUrl: './reviews-index.component.html',\r\n    styleUrls: ['./reviews-index.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [DatatableService],\r\n})\r\nexport class ReviewsIndexComponent implements OnInit {\r\n    @Input() title: Title;\r\n    public reviews$ = this.datatable.data$ as Observable<Review[]>;\r\n\r\n    constructor(\r\n        public datatable: DatatableService<Review>,\r\n        private reviews: ReviewService,\r\n        private modal: Modal,\r\n        public currentUser: CurrentUser,\r\n        public settings: Settings,\r\n        public urls: TitleUrlsService,\r\n        private toast: Toast,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        // will be paginating inside parent component, so should not update query\r\n        this.datatable.paginator.dontUpdateQueryParams = !!this.title;\r\n\r\n        // make sure table filter \"titleId\" is not overwritten with null from staticParams\r\n        const config = {uri: ReviewService.BASE_URI, staticParams: {with: ['user', 'reviewable']} as DatatableStaticParams};\r\n        if (this.title) {\r\n            config.staticParams = {titleId: this.title.id};\r\n        }\r\n        this.datatable.init(config);\r\n    }\r\n\r\n    public openCrupdateReviewModal(review?: Review) {\r\n        this.datatable.openCrupdateResourceModal(CrupdateReviewModalComponent, {\r\n            review,\r\n            mediaId: this.title?.id,\r\n            mediaType: this.title?.type\r\n        })\r\n            .subscribe();\r\n    }\r\n\r\n    public maybeDeleteSelectedReviews() {\r\n        this.datatable.confirmResourceDeletion('reviews').subscribe(() => {\r\n            this.reviews.delete(this.datatable.selectedRows$.value).subscribe(() => {\r\n                this.toast.open(MESSAGES.REVIEW_DELETE_SUCCESS);\r\n                this.datatable.reset();\r\n            });\r\n        });\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TableSortHeaderComponent} from './table-sort-header/table-sort-header.component';\nimport {MatIconModule} from '@angular/material/icon';\nimport {TranslationsModule} from '../core/translations/translations.module';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {UserColumnComponent} from './columns/user-column/user-column.component';\nimport {TableBodyCheckboxComponent} from './selection/table-body-checkbox.component';\nimport {TableHeaderCheckboxComponent} from './selection/table-header-checkbox.component';\nimport {DatatableFooterComponent} from './datatable-footer/datatable-footer.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatButtonModule} from '@angular/material/button';\nimport {DatatableHeaderComponent} from './datatable-header/datatable-header.component';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {DatatableFiltersPanelComponent} from './datatable-filters-panel/datatable-filters-panel.component';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {ChipsModule} from '../core/ui/chips/chips.module';\nimport { DatatableHeaderSearchInputComponent } from './datatable-header/datatable-header-search-input/datatable-header-search-input.component';\nimport {NoResultsMessageModule} from '../core/ui/no-results-message/no-results-message.module';\nimport {NoResultsMessageComponent} from '../core/ui/no-results-message/no-results-message.component';\n\n@NgModule({\n    declarations: [\n        TableSortHeaderComponent,\n        UserColumnComponent,\n        TableBodyCheckboxComponent,\n        TableHeaderCheckboxComponent,\n        DatatableFooterComponent,\n        DatatableHeaderComponent,\n        DatatableHeaderSearchInputComponent,\n        DatatableFiltersPanelComponent,\n        DatatableHeaderSearchInputComponent,\n    ],\n    imports: [\n        CommonModule,\n        TranslationsModule,\n        ReactiveFormsModule,\n        FormsModule,\n        ChipsModule,\n        NoResultsMessageModule,\n\n        // material\n        MatButtonModule,\n        MatIconModule,\n        MatCheckboxModule,\n        MatChipsModule,\n        MatProgressBarModule,\n    ],\n    exports: [\n        TableSortHeaderComponent,\n        MatCheckboxModule,\n        UserColumnComponent,\n        TableBodyCheckboxComponent,\n        TableHeaderCheckboxComponent,\n        DatatableFooterComponent,\n        DatatableHeaderComponent,\n        DatatableFiltersPanelComponent,\n        DatatableHeaderSearchInputComponent,\n        NoResultsMessageComponent,\n    ]\n})\nexport class DatatableModule {\n}\n","import {Params, Router} from '@angular/router';\r\nimport {BehaviorSubject, of, Subscription} from 'rxjs';\r\nimport {map, switchMap, tap} from 'rxjs/operators';\r\nimport {PaginationResponse} from '@common/core/types/pagination/pagination-response';\r\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\r\nimport {PaginatedBackendResponse} from '@common/core/types/pagination/paginated-backend-response';\r\nimport {PaginationParams} from '@common/core/types/pagination/pagination-params';\r\nimport {Injectable} from '@angular/core';\r\nimport {LocalStorage} from '@common/core/services/local-storage.service';\r\n\r\n@Injectable()\r\nexport class Paginator<T> {\r\n    private subscription: Subscription;\r\n    private params$ = new BehaviorSubject<PaginationParams>({});\r\n    public paginatedOnce$ = new BehaviorSubject<boolean>(false);\r\n    public loading$ = new BehaviorSubject(false);\r\n    public response$ = new BehaviorSubject<{pagination: PaginationResponse<T>, [key: string]: any}>(null);\r\n    public dontUpdateQueryParams = false;\r\n    public perPageCacheKey: string = null;\r\n    /** only true if data was already loaded from backend and it was empty */\r\n    public noResults$ = this.response$.pipe(map(r => this.paginatedOnce$.value && r.pagination.data.length === 0));\r\n\r\n    get params(): PaginationParams {\r\n        return this.params$.value;\r\n    }\r\n\r\n    get currentPage(): number {\r\n        return this.response$.value?.pagination?.current_page;\r\n    }\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private http: AppHttpClient,\r\n        private localStorage?: LocalStorage,\r\n    ) {}\r\n\r\n    public paginate(userParams: object = {}, url?: string, initialData?: PaginationResponse<T>) {\r\n        // only use query params on first pagination, so query params can be removed via user params\r\n        const queryParams = !this.subscription ? this.currentQueryParams() : {};\r\n        const paginationParams = this.response$.value ? {\r\n            perPage: this.response$.value.pagination.per_page,\r\n            page: this.response$.value.pagination.current_page\r\n        } : {};\r\n        this.params$.next({...paginationParams, ...queryParams, ...userParams});\r\n\r\n        if ( ! this.subscription) {\r\n            this.init(url, initialData);\r\n        }\r\n    }\r\n\r\n    public nextPage() {\r\n        const current = this.response$.value.pagination.current_page;\r\n        const total = this.response$.value.pagination.total;\r\n        const next = current + 1;\r\n        this.paginate({\r\n            ...this.params$.value,\r\n            page: !current || next > total ? current : next\r\n        });\r\n    }\r\n\r\n    public previousPage() {\r\n        const current = this.response$.value.pagination.current_page;\r\n        this.paginate({\r\n            ...this.params$.value,\r\n            page: (current - 1) || 1\r\n        });\r\n    }\r\n\r\n    public changePerPage(newPerPage: number) {\r\n        if (newPerPage !== this.params$.value?.perPage) {\r\n            if (this.perPageCacheKey) {\r\n                this.localStorage.set(this.perPageCacheKey, newPerPage);\r\n            }\r\n            this.paginate({\r\n                ...this.params$.value,\r\n                perPage: newPerPage\r\n            });\r\n        }\r\n    }\r\n\r\n    public currentQueryParams(): Params {\r\n        return this.router.routerState.root.snapshot.queryParams;\r\n    }\r\n\r\n    private init(uri: string, initialData?: PaginationResponse<T>) {\r\n        this.subscription = this.params$.pipe(\r\n            switchMap(params => {\r\n                this.loading$.next(true);\r\n                const firstPagination = !this.paginatedOnce$.value;\r\n                if (firstPagination && this.perPageCacheKey && this.localStorage.get(this.perPageCacheKey)) {\r\n                    params = {perPage: this.localStorage.get(this.perPageCacheKey), ...params};\r\n                }\r\n\r\n                // if we got initial pagination response (of 1st page)\r\n                // return that instead of making 1st page http request\r\n                const request = firstPagination && initialData ?\r\n                    of({pagination: initialData}) :\r\n                    this.http.get(uri, params);\r\n\r\n                return (request as PaginatedBackendResponse<T>).pipe(\r\n                    // can't use \"finalize\" here as it will complete after loading$.next(true)\r\n                    // call above, which will prevent loading bar from showing\r\n                    // if pagination request is cancelled and new one is queued\r\n                    tap(() => {\r\n                        this.updateQueryParams(params);\r\n                        this.loading$.next(false);\r\n                        this.paginatedOnce$.next(true);\r\n                    }, () => {\r\n                        this.loading$.next(false);\r\n                        this.paginatedOnce$.next(true);\r\n                    })\r\n                ) as PaginatedBackendResponse<T>;\r\n            })\r\n        ).subscribe(response => {\r\n            this.response$.next(response);\r\n        });\r\n    }\r\n\r\n    private updateQueryParams(params = {}) {\r\n        if (this.dontUpdateQueryParams) return;\r\n        for (const key in params) {\r\n            if (Array.isArray(params[key])) {\r\n                params[key] = params[key].join(',');\r\n            }\r\n        }\r\n        this.router.navigate([], {queryParams: params, replaceUrl: true});\r\n    }\r\n\r\n    public canLoadNextPage() {\r\n        return this.response$.value &&\r\n            this.currentPage < this.response$.value?.pagination?.last_page;\r\n    }\r\n}\r\n","import {ConfirmModalData} from '../core/ui/confirm-modal/confirm-modal.component';\r\n\r\nexport const DELETE_RESOURCE_MESSAGE: ConfirmModalData = {\r\n    title: `Delete :resource`,\r\n    body:  `Are you sure you want to delete selected :resource?`,\r\n    ok:    'Delete'\r\n};\r\n","import * as Dot from \"dot-object\";\r\nimport {_isNumberValue} from '@angular/cdk/coercion';\r\nimport {Model} from '@common/core/types/models/model';\r\n\r\nconst MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\nexport function sortDatatableData<T extends Model>(data: T[], orderBy: string, orderDir: string): T[] {\r\n    return data.sort((a, b) => {\r\n        let valueA = sortingDataAccessor(a, orderBy);\r\n        let valueB = sortingDataAccessor(b, orderBy);\r\n\r\n        // If there are data in the column that can be converted to a number,\r\n        // it must be ensured that the rest of the data\r\n        // is of the same type so as not to order incorrectly.\r\n        const valueAType = typeof valueA;\r\n        const valueBType = typeof valueB;\r\n\r\n        if (valueAType !== valueBType) {\r\n            if (valueAType === 'number') {\r\n                valueA += '';\r\n            }\r\n            if (valueBType === 'number') {\r\n                valueB += '';\r\n            }\r\n        }\r\n\r\n        // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\r\n        // one value exists while the other doesn't. In this case, existing value should come last.\r\n        // This avoids inconsistent results when comparing values to undefined/null.\r\n        // If neither value exists, return 0 (equal).\r\n        let comparatorResult = 0;\r\n        if (valueA != null && valueB != null) {\r\n            // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\r\n            if (valueA > valueB) {\r\n                comparatorResult = 1;\r\n            } else if (valueA < valueB) {\r\n                comparatorResult = -1;\r\n            }\r\n        } else if (valueA != null) {\r\n            comparatorResult = 1;\r\n        } else if (valueB != null) {\r\n            comparatorResult = -1;\r\n        }\r\n\r\n        return comparatorResult * (orderDir === 'asc' ? 1 : -1);\r\n    });\r\n}\r\n\r\n/**\r\n * Data accessor function that is used for accessing data properties for sorting through\r\n * the default sortData function.\r\n * This default function assumes that the sort header IDs (which defaults to the column name)\r\n * matches the data's properties (e.g. column Xyz represents data['Xyz']).\r\n * May be set to a custom function for different behavior.\r\n */\r\nfunction sortingDataAccessor(data: object, sortHeaderId: string): string {\r\n    const value = Dot.pick(sortHeaderId, data);\r\n\r\n    if (_isNumberValue(value)) {\r\n        const numberValue = Number(value);\r\n\r\n        // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\r\n        // leave them as strings. For more info: https://goo.gl/y5vbSg\r\n        return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\r\n    }\r\n\r\n    // if (Array.isArray(value)) {\r\n    //     return value.reduce((prev, curr) => prev += objectToStr(curr));\r\n    // }\r\n\r\n    return value;\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject, combineLatest, Subscription} from 'rxjs';\nimport {Paginator} from '../shared/paginator.service';\nimport {debounceTime, filter, map, pairwise, skip, tap} from 'rxjs/operators';\nimport {DatatableFilters, DatatableFilterValue} from './types/datatable-filters';\nimport {DatatableSort} from './types/datatable-sort';\nimport {PaginationParams} from '../core/types/pagination/pagination-params';\nimport {removeNullFromObject} from '../core/utils/remove-null-from-object';\nimport {ComponentType} from '@angular/cdk/portal';\nimport {MatDialogConfig} from '@angular/material/dialog';\nimport {Modal} from '../core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '../core/ui/confirm-modal/confirm-modal.component';\nimport {DELETE_RESOURCE_MESSAGE} from './delete-resource-message';\nimport {PaginationResponse} from '../core/types/pagination/pagination-response';\nimport {sortDatatableData} from '@common/datatable/utils/sort-datatable-data';\nimport {Model} from '@common/core/types/models/model';\nimport {filterDatatableData} from '@common/datatable/utils/filter-datatable-data';\nimport {Router} from '@angular/router';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {LocalStorage} from '../core/services/local-storage.service';\n\nexport type DatatableStaticParams = Record<string, string|number|boolean|string[]>;\n\ninterface DatatableConfig<T> {\n    uri?: string;\n    staticParams?: DatatableStaticParams;\n    initialData?: PaginationResponse<T>|T[];\n    disableSort?: boolean;\n    infiniteScroll?: boolean;\n}\n\n@Injectable()\nexport class DatatableService<T extends Model> {\n    public sort$ = new BehaviorSubject<DatatableSort>({});\n    public filters$ = new BehaviorSubject<DatatableFilters>({});\n    public staticParams$ = new BehaviorSubject<DatatableStaticParams>({});\n    public paginator = new Paginator<T>(this.router, this.http, this.localStorage);\n    private paginatorSub: Subscription;\n    private mainSub: Subscription;\n    private ignoreNextParamChange = false;\n    private originalData$ = new BehaviorSubject<T[]>([]);\n    public data$ = new BehaviorSubject<T[]>([]);\n    public selectedRows$ = new BehaviorSubject<number[]>([]);\n    public config: DatatableConfig<T>;\n\n    constructor(\n        protected modal: Modal,\n        protected router: Router,\n        protected http: AppHttpClient,\n        protected localStorage: LocalStorage,\n    ) {}\n\n    get data() {\n        return this.data$.value;\n    }\n\n    set data(data: T[]) {\n        const tableData = [...data];\n        this.originalData$.next(tableData);\n        this.data$.next(tableData);\n\n        // Reset filters and sort without trigger data reload via pagination\n        this.ignoreNextParamChange = true;\n        this.reset();\n    }\n\n    public init(config: DatatableConfig<T> = {}) {\n        this.config = config;\n        this.staticParams$.next({...this.staticParams$.value, ...config.staticParams});\n        if (config.uri) {\n            this.connectToPaginator();\n        } else if (config.initialData) {\n            this.data = config.initialData as T[];\n        }\n\n        this.mainSub = combineLatest([this.sort$, this.filters$, this.staticParams$])\n            .pipe(debounceTime(0), map(params => Object.assign({}, ...params))).subscribe((params: PaginationParams) => {\n                if (this.ignoreNextParamChange) {\n                    return this.ignoreNextParamChange = false;\n                }\n                params = removeNullFromObject(params);\n                Object.entries(params).forEach(([key, value]) => {\n                    if (typeof value === 'object' && value.id) {\n                        params[`${key}Id`] = value.id;\n                        delete params[key];\n                    }\n                });\n                if (this.config.uri) {\n                    this.paginator.paginate(params, this.config.uri, this.config.initialData as PaginationResponse<T>);\n                } else if (Object.keys(params).length) {\n                    this.applyLocalTransforms(params);\n                }\n            });\n\n        return this;\n    }\n\n    private connectToPaginator() {\n        this.paginatorSub = this.paginator.response$.pipe(pairwise()).subscribe(([prev, current]) => {\n            // append data instead of overriding with next page data (infinite scroll).\n            // if page did not change, we can assume that it was filter or sort\n            // change and we should use only new data, even on infinite scroll\n            const data = this.config.infiniteScroll && prev?.pagination?.current_page !== current.pagination.current_page ?\n                [...this.data$.value, ...current.pagination.data] :\n                current.pagination.data;\n            this.data$.next(data);\n        });\n    }\n\n    private applyLocalTransforms(params: PaginationParams) {\n        let data = [...this.originalData$.value];\n        if (params.query) {\n            data = filterDatatableData<T>(data, params.query);\n        }\n        if (params.orderBy && params.orderDir) {\n            data = sortDatatableData<T>(data, params.orderBy, params.orderDir);\n        }\n        this.data$.next(data);\n    }\n\n    public addFilter(key: keyof DatatableFilters, value: DatatableFilterValue) {\n        this.filters$.next({\n            ...this.filters$.value,\n            [key]: value,\n        });\n    }\n\n    public removeFilter(key: keyof DatatableFilters) {\n        const filters = {...this.filters$.value};\n        delete filters[key];\n        this.filters$.next(filters);\n    }\n\n    public reset(staticParams: DatatableStaticParams = null) {\n        this.filters$.next({});\n        this.sort$.next({});\n        this.selectedRows$.next([]);\n        if (staticParams) {\n            this.staticParams$.next(staticParams);\n        }\n    }\n\n    public openCrupdateResourceModal(cmp: ComponentType<any>, data?: object, config?: MatDialogConfig) {\n        return this.modal.open(cmp, data, config).beforeClosed()\n            .pipe(\n                filter(modifiedResource => !!modifiedResource),\n                tap(() => this.reset())\n            );\n    }\n\n    public confirmResourceDeletion(resource: string) {\n        const data = {...DELETE_RESOURCE_MESSAGE, replacements: {resource}};\n        return this.modal.open(ConfirmModalComponent, data).afterClosed()\n            .pipe(filter(confirmed => confirmed));\n    }\n\n    public getCurrentParams() {\n        return {\n            ...this.sort$.value,\n            ...this.filters$.value,\n            ...this.staticParams$.value,\n            ...this.paginator.params,\n        };\n    }\n\n    public destroy() {\n        this.paginatorSub?.unsubscribe();\n        this.mainSub?.unsubscribe();\n    }\n}\n","import {Model} from '../../core/types/models/model';\r\n\r\nexport function filterDatatableData<T extends Model>(data: T[], filter: string): T[] {\r\n    return data.filter(obj => filterPredicate(obj, filter));\r\n}\r\n/**\r\n * Checks if a data object matches the data source's filter string. By default, each data object\r\n * is converted to a string of its properties and returns true if the filter has\r\n * at least one occurrence in that string. By default, the filter string has its whitespace\r\n * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\r\n * filter matching.\r\n * @param data Data object used to check against the filter.\r\n * @param filter Filter string that has been set on the data source.\r\n * @returns Whether the filter matches against the data\r\n */\r\nfunction filterPredicate(data: object, filter: string): boolean {\r\n    // Transform the data into a lowercase string of all property values.\r\n    const dataStr = objectToStr(data);\r\n\r\n    // Transform the filter by converting it to lowercase and removing whitespace.\r\n    const transformedFilter = filter.trim().toLowerCase();\r\n\r\n    return dataStr.indexOf(transformedFilter) !== -1;\r\n}\r\n\r\nexport function objectToStr(obj: object) {\r\n    return Object.keys(obj).reduce((currentTerm: string, key: string) => {\r\n        // Use an obscure Unicode character to delimit the words in the concatenated string.\r\n        // This avoids matches where the values of two columns combined will match the user's query\r\n        // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\r\n        // that has a very low chance of being typed in by somebody in a text field. This one in\r\n        // particular is \"White up-pointing triangle with dot\" from\r\n        // https://en.wikipedia.org/wiki/List_of_Unicode_characters\r\n        const term = (obj[key] && typeof obj[key] === 'object') ?\r\n            objectToStr(obj[key]) :\r\n            obj[key];\r\n        return currentTerm + term + '◬';\r\n    }, '').toLowerCase();\r\n}\r\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SelectUserInputComponent} from './select-user-input/select-user-input.component';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\n\n@NgModule({\n    declarations: [SelectUserInputComponent],\n    imports: [\n        CommonModule,\n        MatButtonModule,\n        MatMenuModule,\n        TranslationsModule,\n        ReactiveFormsModule,\n        MatIconModule,\n        LoadingIndicatorModule,\n    ],\n    exports: [\n        SelectUserInputComponent\n    ],\n})\nexport class SelectUserInputModule {\n}\n","import {Injectable} from '@angular/core';\r\nimport {AppHttpClient} from '../../core/http/app-http-client.service';\r\nimport {PaginatedBackendResponse} from '../../core/types/pagination/paginated-backend-response';\r\nimport {Tag} from '@common/core/types/models/Tag';\r\nimport {BackendResponse} from '@common/core/types/backend-response';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class TagsService {\r\n    static BASE_URI = 'tags';\r\n\r\n    constructor(private http: AppHttpClient) {\r\n    }\r\n\r\n    public index(params?: object): PaginatedBackendResponse<Tag> {\r\n        return this.http.get(TagsService.BASE_URI, params);\r\n    }\r\n\r\n    public create(params: Partial<Tag>): BackendResponse<{tag: Tag}> {\r\n        return this.http.post(TagsService.BASE_URI, params);\r\n    }\r\n\r\n    public update(id: number, params: Partial<Tag>): BackendResponse<{tag: Tag}> {\r\n        return this.http.put(`${TagsService.BASE_URI}/${id}`, params);\r\n    }\r\n\r\n    public delete(tagIds: number[]): BackendResponse<void> {\r\n        return this.http.delete(`${TagsService.BASE_URI}/${tagIds}`);\r\n    }\r\n\r\n}\r\n","import { ConnectedPosition } from '@angular/cdk/overlay';\r\n\r\nexport const LEFT_POSITION: ConnectedPosition[] = [\r\n    {originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center', offsetX: 5},\r\n    {originX: 'end', originY: 'center', overlayX: 'start', overlayY: 'center', offsetX: 5},\r\n];\r\n","<header>\n    <mat-icon svgIcon=\"filter-list\"></mat-icon>\n    <span trans>Filters</span>\n</header>\n\n<form class=\"body\" (ngSubmit)=\"close()\">\n    <ng-container *ngTemplateOutlet=\"data.filters\"></ng-container>\n</form>\n\n<footer>\n    <button (click)=\"close()\" type=\"button\" mat-button color=\"accent\" trans>Close</button>\n</footer>\n","import {ChangeDetectionStrategy, Component, ElementRef, Inject, TemplateRef} from '@angular/core';\nimport {OVERLAY_PANEL_DATA} from '../../core/ui/overlay-panel/overlay-panel-data';\nimport {OverlayPanelRef} from '../../core/ui/overlay-panel/overlay-panel-ref';\nimport {matDialogAnimations} from '@angular/material/dialog';\n\n@Component({\n    selector: 'datatable-filters-panel',\n    templateUrl: './datatable-filters-panel.component.html',\n    styleUrls: ['./datatable-filters-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[@dialogContainer]': `'enter'`\n    },\n    animations: [\n        matDialogAnimations.dialogContainer,\n    ]\n})\nexport class DatatableFiltersPanelComponent {\n\n    constructor(\n        @Inject(OVERLAY_PANEL_DATA) public data: {filters: TemplateRef<ElementRef>},\n        private overlayPanelRef: OverlayPanelRef,\n    ) {}\n\n    public close() {\n        this.overlayPanelRef.close();\n    }\n}\n","<div class=\"input-container search-input-container\">\n    <input type=\"text\" class=\"search-input\" [placeholder]=\"placeholder | trans\" [formControl]=\"searchControl\">\n    <mat-icon svgIcon=\"search\" *ngIf=\"!hideIcon\"></mat-icon>\n</div>\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {debounceTime, distinctUntilChanged} from 'rxjs/operators';\nimport {DatatableService} from '../../datatable.service';\nimport {Model} from '@common/core/types/models/model';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n    selector: 'datatable-header-search-input',\n    templateUrl: './datatable-header-search-input.component.html',\n    styleUrls: ['./datatable-header-search-input.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DatatableHeaderSearchInputComponent implements OnInit {\n    public searchControl = new FormControl(this.route.snapshot.queryParams.query);\n    @Input() placeholder: string;\n    @Input() hideIcon = false;\n\n    constructor(\n        public datatable: DatatableService<Model>,\n        private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit() {\n        this.searchControl.valueChanges\n            .pipe(debounceTime(400), distinctUntilChanged())\n            .subscribe(query => {\n                this.datatable.addFilter('query', query);\n            });\n    }\n}\n","<mat-progress-bar mode=\"indeterminate\" color=\"accent\" *ngIf=\"datatable.paginator && datatable.paginator.loading$ | async\"></mat-progress-bar>\n<div class=\"left-column\">\n    <div class=\"default-left-content\" *ngIf=\"!showSelectedActions || !numberOfRowsSelected\">\n        <ng-content select=\"[leftContent]\"></ng-content>\n    </div>\n    <div class=\"selected-left-content capitalize\" *ngIf=\"showSelectedActions && numberOfRowsSelected\">\n        {{numberOfRowsSelected}} {{ pluralResourceName }} {{ 'Selected' | trans }}\n    </div>\n</div>\n<div class=\"right-column\">\n    <div class=\"default-right-content\" *ngIf=\"!showSelectedActions || !numberOfRowsSelected\">\n        <ng-container *ngIf=\"filterPanelTemplate\">\n            <mat-chip-list aria-label=\"Active Filters\" class=\"filter-chip-list\">\n                <mat-chip *ngFor=\"let filter of filters$ | async | keyvalue\" [removable]=\"true\" [selectable]=\"false\" (removed)=\"datatable.removeFilter(filter.key)\">\n                    {{filter.key}}: {{isModel(filter.value) ? (filter.value.name || filter.value.display_name) : filter.value}}\n                    <mat-icon matChipRemove svgIcon=\"cancel\"></mat-icon>\n                </mat-chip>\n            </mat-chip-list>\n            <button (click)=\"openFiltersPanel()\" class=\"filter-button\" [class.active]=\"filterPanelRef\" #filterButton mat-icon-button>\n                <mat-icon svgIcon=\"filter-list\"></mat-icon>\n            </button>\n        </ng-container>\n        <datatable-header-search-input placeholder=\"Search {{ pluralResourceName }}\"></datatable-header-search-input>\n    </div>\n    <div class=\"selected-right-actions\" *ngIf=\"showSelectedActions && numberOfRowsSelected\">\n        <ng-content select=\"[rightContent]\"></ng-content>\n    </div>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    TemplateRef,\n    ViewChild\n} from '@angular/core';\nimport {DatatableService} from '../datatable.service';\nimport {Model} from '../../core/types/models/model';\nimport {Subscription} from 'rxjs';\nimport {OverlayPanel} from '../../core/ui/overlay-panel/overlay-panel.service';\nimport {LEFT_POSITION} from '../../core/ui/overlay-panel/positions/left-position';\nimport {OverlayPanelRef} from '../../core/ui/overlay-panel/overlay-panel-ref';\nimport {DatatableFiltersPanelComponent} from '../datatable-filters-panel/datatable-filters-panel.component';\nimport {map} from 'rxjs/operators';\nimport {removeNullFromObject} from '../../core/utils/remove-null-from-object';\nimport {DatatableFilterValue} from '../types/datatable-filters';\n\n@Component({\n    selector: 'datatable-header',\n    templateUrl: './datatable-header.component.html',\n    styleUrls: ['./datatable-header.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DatatableHeaderComponent implements OnInit, OnDestroy {\n    @HostBinding('class.rows-selected') public numberOfRowsSelected: number;\n    @ContentChild('tableFilters') filterPanelTemplate: TemplateRef<ElementRef>;\n    @ViewChild('filterButton', { read: ElementRef }) filterButton: ElementRef<HTMLButtonElement>;\n    @Input() pluralResourceName: string;\n    @Input() showSelectedActions = true;\n    private subscriptions: Subscription[] = [];\n    public filterPanelRef: OverlayPanelRef<any>;\n\n    public filters$ = this.datatable.filters$\n        .pipe(map(v => {\n            const filters = removeNullFromObject(v);\n            delete filters.query;\n            return filters;\n        }));\n\n    constructor(\n        public datatable: DatatableService<Model>,\n        private cd: ChangeDetectorRef,\n        private overlayPanel: OverlayPanel,\n    ) {}\n\n    ngOnInit() {\n        // close filter panel when any filter is selected.\n        const filterSub = this.datatable.filters$.subscribe(() => {\n            this.filterPanelRef && this.filterPanelRef.close();\n        });\n        const changeSub = this.datatable.selectedRows$.subscribe(value => {\n            this.numberOfRowsSelected = value.length;\n            this.cd.markForCheck();\n        });\n        this.subscriptions = [filterSub, changeSub];\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n    public openFiltersPanel() {\n        if (this.filterPanelRef) {\n            this.filterPanelRef.close();\n        } else {\n            const position = LEFT_POSITION.slice();\n            position[0].offsetY = 40;\n            position[1].offsetY = 40;\n            this.filterPanelRef = this.overlayPanel.open(DatatableFiltersPanelComponent, {\n                origin: this.filterButton,\n                position,\n                mobilePosition: 'center',\n                data: {filters: this.filterPanelTemplate},\n                maxWidth: '90%',\n            });\n            this.filterButton.nativeElement.classList.add('active');\n            this.filterPanelRef.afterClosed().subscribe(() => {\n                this.filterPanelRef = null;\n                this.filterButton.nativeElement.classList.remove('active');\n            });\n        }\n    }\n\n    public isModel(value: DatatableFilterValue) {\n        return typeof value === 'object' && value.id;\n    }\n}\n","export function removeNullFromObject<T>(obj: T): T {\r\n    const copy = {...obj};\r\n    Object.keys(copy).forEach(key => (copy[key] == null || copy[key] === '') && delete copy[key]);\r\n    return copy;\r\n}\r\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\nimport {DatatableService} from '../datatable.service';\nimport {Subscription} from 'rxjs';\nimport {Model} from '../../core/types/models/model';\n\n@Component({\n    selector: '[table-header-checkbox]',\n    template: `\n        <mat-checkbox\n            (change)=\"$event ? toggleAllRows() : null\"\n            [checked]=\"allRowsSelected()\"\n            [indeterminate]=\"anyRowsSelected() && ! allRowsSelected()\">\n        </mat-checkbox>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'class': 'table-checkbox'},\n})\nexport class TableHeaderCheckboxComponent implements OnInit, OnDestroy{\n    private changeRef: Subscription;\n    constructor(\n        public datatable: DatatableService<Model>,\n        private cd: ChangeDetectorRef,\n    ) {}\n\n    ngOnInit() {\n        this.changeRef = this.datatable.selectedRows$.subscribe(() => {\n            this.cd.markForCheck();\n        });\n    }\n\n    ngOnDestroy() {\n        this.changeRef.unsubscribe();\n    }\n\n    public anyRowsSelected(): boolean {\n        return !!this.datatable.selectedRows$.value.length;\n    }\n\n    public allRowsSelected() {\n        return this.datatable.selectedRows$.value.length &&\n            this.datatable.selectedRows$.value.length === this.datatable.data$.value?.length;\n    }\n\n    public toggleAllRows() {\n        if (this.allRowsSelected()) {\n            this.datatable.selectedRows$.next([]);\n        } else {\n            this.datatable.selectedRows$.next(\n                this.datatable.data$.value.map(v => v.id)\n            );\n        }\n    }\n}\n","import {ChangeDetectionStrategy, Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport {catchError, debounceTime, distinctUntilChanged, finalize, switchMap} from 'rxjs/operators';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, Observable, of} from 'rxjs';\nimport {User} from '@common/core/types/models/User';\nimport {Users} from '@common/auth/users.service';\n\n@Component({\n    selector: 'select-user-input',\n    templateUrl: './select-user-input.component.html',\n    styleUrls: ['./select-user-input.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: SelectUserInputComponent,\n        multi: true,\n    }]\n})\nexport class SelectUserInputComponent implements ControlValueAccessor, OnInit {\n    @ViewChild('searchInput', {static: true}) searchInput: ElementRef<HTMLInputElement>;\n    public searchFormControl = new FormControl();\n    public loading$ = new BehaviorSubject(false);\n    public users$ = new BehaviorSubject<User[]>([]);\n    public selectedUser$ = new BehaviorSubject<User>(null);\n    private propagateChange: Function;\n    public searchedOnce = false;\n\n    constructor(private users: Users) {}\n\n    ngOnInit() {\n        this.bindToSearchControl();\n    }\n\n    public writeValue(value: User) {\n        if (typeof value === 'object') {\n            this.selectedUser$.next(value);\n        }\n    }\n\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    private bindToSearchControl() {\n        this.searchFormControl.valueChanges.pipe(\n            debounceTime(150),\n            distinctUntilChanged(),\n            switchMap(query => this.searchUsers(query)),\n            catchError(() => of([])),\n        ).subscribe(users => {\n            this.searchedOnce = true;\n            this.users$.next(users);\n        });\n    }\n\n    private searchUsers(query: string): Observable<User[]> {\n        this.loading$.next(true);\n        return this.users.getAll({query, perPage: 7})\n            .pipe(finalize(() =>  this.loading$.next(false)));\n    }\n\n    public onMenuOpened() {\n        if (!this.searchedOnce) {\n            this.clearSearchInput();\n        }\n        setTimeout(() => {\n            this.searchInput.nativeElement.focus();\n        });\n    }\n\n    public selectUser(user: User) {\n        this.selectedUser$.next(user);\n        this.propagateChange(user);\n    }\n\n    public clearSearchInput() {\n        this.searchFormControl.setValue('');\n    }\n\n    public onMenuClosed() {\n        this.loading$.next(false);\n        this.clearSearchInput();\n    }\n}\n","<div class=\"input-container\">\r\n    <div class=\"fake-label\" trans>User</div>\r\n    <div class=\"fake-input\" tabindex=\"0\" [matMenuTriggerFor]=\"menu\" (menuOpened)=\"onMenuOpened()\" (menuClosed)=\"onMenuClosed()\">\r\n        <span *ngIf=\"selectedUser$ | async as selectedUser; else anyUser\">\r\n            <img [src]=\"selectedUser.avatar\">{{selectedUser.display_name}}\r\n        </span>\r\n        <ng-template #anyUser>\r\n            <span trans>Any</span>\r\n        </ng-template>\r\n        <div class=\"arrow-container\">\r\n            <div class=\"arrow\"></div>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\">\r\n    <div class=\"input-container search-input-container\" (click)=\"$event.stopPropagation()\">\r\n        <div class=\"search-input-wrapper\">\r\n            <input type=\"text\" [formControl]=\"searchFormControl\" placeholder=\"Search...\" (blur)=\"searchInput.focus()\" #searchInput trans-placeholder>\r\n            <button class=\"clear-search-input-button\" mat-icon-button (click)=\"clearSearchInput()\" *ngIf=\"searchFormControl.value\">\r\n                <mat-icon svgIcon=\"close\"></mat-icon>\r\n            </button>\r\n            <loading-indicator [isVisible]=\"loading$ | async\" class=\"small\"></loading-indicator>\r\n        </div>\r\n    </div>\r\n    <div mat-menu-item (click)=\"selectUser(null)\">\r\n        <img src=\"client/assets/images/anonymous-user.png\" alt=\"\">\r\n        <div class=\"info any-user-info\">\r\n            <div class=\"name\" trans>Any User</div>\r\n        </div>\r\n    </div>\r\n    <div mat-menu-item *ngFor=\"let user of users$ | async\" (click)=\"selectUser(user)\">\r\n        <img [src]=\"user.avatar\" alt=\"\">\r\n        <div class=\"user-info\">\r\n            <div class=\"name\">{{user.display_name}}</div>\r\n            <div class=\"email\">{{user.email}}</div>\r\n        </div>\r\n    </div>\r\n    <div class=\"nothing-found-item\" aria-disabled=\"true\" mat-menu-item disabled *ngIf=\"searchedOnce && !(users$ | async).length\" trans>No users found.</div>\r\n</mat-menu>\r\n","import {Component, OnInit, ChangeDetectionStrategy, Input} from '@angular/core';\nimport {FormBuilder} from '@angular/forms';\nimport {DatatableService} from '../../../../common/datatable/datatable.service';\nimport {Model} from '../../../../common/core/types/models/model';\nimport {Title} from '../../../models/title';\n\n@Component({\n    selector: 'video-index-filters',\n    templateUrl: './video-index-filters.component.html',\n    styleUrls: ['./video-index-filters.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class VideoIndexFiltersComponent implements OnInit {\n    @Input() title: Title;\n    public form = this.fb.group({\n        source: null,\n        category: null,\n        approved: null,\n        quality: null,\n        type: null,\n        user: null,\n        title: null,\n        season: null,\n        episode: null,\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        private datable: DatatableService<Model>,\n    ) {}\n\n    ngOnInit() {\n        this.form.patchValue({\n            title: this.title,\n            ...this.datable.filters$.value,\n        });\n        if (this.title) {\n            this.form.get('title').disable();\n        }\n\n        this.form.valueChanges.subscribe(value => {\n            this.datable.filters$.next(value);\n        });\n    }\n}\n","<div [formGroup]=\"form\" class=\"many-inputs\">\n    <div class=\"input-container\">\n        <label for=\"video-source-filter\" trans>Source</label>\n        <select id=\"video-source-filter\" formControlName=\"source\">\n            <option [ngValue]=\"null\" trans>All</option>\n            <option value=\"local\" trans>Local</option>\n            <option value=\"external\" trans>External</option>\n        </select>\n    </div>\n\n    <div class=\"input-container\">\n        <label for=\"video-category-filter\" trans>Category</label>\n        <select id=\"video-category-filter\" formControlName=\"category\">\n            <option [ngValue]=\"null\" trans>All</option>\n            <option value=\"trailer\" trans>Trailer</option>\n            <option value=\"clip\" trans>Clip</option>\n            <option value=\"featurette\" trans>Featurette</option>\n            <option value=\"teaser\" trans>Teaser</option>\n            <option value=\"full\" trans>Full Movie or episode</option>\n        </select>\n    </div>\n\n    <div class=\"input-container\">\n        <label for=\"video-approved-filter\" trans>Approved</label>\n        <select id=\"video-approved-filter\" formControlName=\"approved\">\n            <option [ngValue]=\"null\" trans>All</option>\n            <option [ngValue]=\"true\" trans>Approved only</option>\n            <option [ngValue]=\"false\" trans>Not approved only</option>\n        </select>\n    </div>\n\n    <div class=\"input-container\">\n        <label for=\"video-quality-filter\" trans>Quality</label>\n        <select id=\"video-quality-filter\" formControlName=\"quality\">\n            <option [ngValue]=\"null\" trans>All</option>\n            <option value=\"sd\" trans>SD</option>\n            <option value=\"hd\" trans>HD</option>\n            <option value=\"4k\" trans>4K</option>\n            <option value=\"hdr\" trans>HDR</option>\n        </select>\n    </div>\n\n    <div class=\"input-container\">\n        <label for=\"video-type-filter\" trans>Type</label>\n        <select id=\"video-type-filter\" formControlName=\"type\">\n            <option [ngValue]=\"null\" trans>All</option>\n            <option value=\"embed\" trans>Embed</option>\n            <option value=\"video\" trans>Direct Video</option>\n            <option value=\"frame\" trans>Frame</option>\n            <option value=\"external\" trans>Remote Link</option>\n        </select>\n    </div>\n\n    <div class=\"input-container\">\n        <select-user-input formControlName=\"user\"></select-user-input>\n    </div>\n\n    <div class=\"input-container\">\n        <select-title-input [formGroup]=\"form\"></select-title-input>\n    </div>\n</div>\n","<div class=\"datatable responsive-table\">\r\n    <datatable-header pluralResourceName=\"videos\">\r\n        <ng-container leftContent *ngIf=\"currentUser.hasPermission('videos.create')\">\r\n            <button mat-raised-button (click)=\"openCrupdateVideoModal()\" color=\"accent\" trans>Add</button>\r\n        </ng-container>\r\n        <button rightContent mat-raised-button color=\"accent\" (click)=\"maybeDeleteSelectedVideos()\" *ngIf=\"currentUser.hasPermission('videos.delete')\" trans>Delete Selected</button>\r\n        <ng-template #tableFilters>\r\n            <video-index-filters [title]=\"title\"></video-index-filters>\r\n        </ng-template>\r\n    </datatable-header>\r\n    <table class=\"material-table\">\r\n        <thead>\r\n        <tr>\r\n            <th table-header-checkbox></th>\r\n            <th table-sort-header trans>Name</th>\r\n            <th table-sort-header=\"title_id\" *ngIf=\"!title\" trans>Title</th>\r\n            <th table-sort-header trans>Type</th>\r\n            <th table-sort-header trans>Category</th>\r\n            <th table-sort-header trans>Approved</th>\r\n            <th table-sort-header=\"plays_count\" trans>Plays</th>\r\n            <th table-sort-header trans>Quality</th>\r\n            <th table-sort-header trans>Score</th>\r\n            <th table-sort-header=\"reports_count\" trans>Reports</th>\r\n            <th table-sort-header trans>Season</th>\r\n            <th table-sort-header trans>Episode</th>\r\n            <th></th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n        <tr *ngFor=\"let video of videos$ | async\">\r\n            <td [table-body-checkbox]=\"video.id\"></td>\r\n            <td>\r\n               <div class=\"column-with-image\">\r\n                   <img [src]=\"video.thumbnail || video.title?.backdrop\" alt=\"\" [title]=\"video.name\">\r\n                   <a class=\"video-name link\" [href]=\"video.url\" target=\"_blank\">{{video.name}}</a>\r\n               </div>\r\n            </td>\r\n            <td data-label=\"Title\" *ngIf=\"!title\">\r\n                <a [routerLink]=\"['/admin/titles', video.title.id, 'edit']\" class=\"title-name link\" [queryParams]=\"{active: 'videos'}\" *ngIf=\"video.title\">{{video.title.name}}</a>\r\n            </td>\r\n            <td data-label=\"Type\" class=\"capitalize\">{{video.type}}</td>\r\n            <td data-label=\"Category\" class=\"capitalize\">{{video.category}}</td>\r\n            <td data-label=\"Approved\">\r\n                <button mat-icon-button (click)=\"toggleApprovedState(video)\" class=\"approve-button\" [class.disapproved]=\"!video.approved\"  [class.approved]=\"video.approved\" [disabled]=\"modifying$ | async\">\r\n                    <mat-icon svgIcon=\"check\" class=\"success-icon\"></mat-icon>\r\n                    <mat-icon svgIcon=\"close\" class=\"warn-icon\"></mat-icon>\r\n                </button>\r\n            </td>\r\n            <td data-label=\"Plays\">{{video.plays_count}}</td>\r\n            <td data-label=\"Quality\">\r\n                <div [ngSwitch]=\"video.quality\">\r\n                    <mat-icon class=\"icon-quality\" svgIcon=\"hd\" *ngSwitchCase=\"'hd'\"></mat-icon>\r\n                    <mat-icon class=\"icon-quality\" svgIcon=\"4k\" *ngSwitchCase=\"'4k'\"></mat-icon>\r\n                    <div *ngSwitchCase=\"'regular'\">-</div>\r\n                    <div class=\"text-quality\" *ngSwitchDefault>{{video.quality}}</div>\r\n                </div>\r\n            </td>\r\n            <td data-label=\"Score\">{{video.score ? video.score + '%' : '-'}}</td>\r\n            <td data-label=\"Reports\">{{video.reports_count ? video.reports_count : '-'}}</td>\r\n            <td data-label=\"Season\">{{video.season || '-'}}</td>\r\n            <td data-label=\"Episode\">{{video.episode || '-'}}</td>\r\n            <td class=\"edit-column\">\r\n                <button mat-icon-button (click)=\"openCrupdateVideoModal(video)\" *ngIf=\"currentUser.hasPermission('videos.update')\" [matTooltip]=\"'Edit video' | trans\">\r\n                    <mat-icon svgIcon=\"edit\"></mat-icon>\r\n                </button>\r\n            </td>\r\n        </tr>\r\n        </tbody>\r\n    </table>\r\n    <no-results-message svgImage=\"video-files.svg\" *ngIf=\"datatable.paginator.noResults$ | async\">\r\n        <span primary-text trans>No videos have been created yet</span>\r\n    </no-results-message>\r\n    <datatable-footer></datatable-footer>\r\n</div>\r\n","import {ChangeDetectionStrategy, Component, Input, OnInit} from '@angular/core';\r\nimport {TitleUrlsService} from '../../site/titles/title-urls.service';\r\nimport {VideoService} from '../../site/videos/video.service';\r\nimport {Video} from '../../models/video';\r\nimport {CrupdateVideoModalComponent} from '../../site/videos/crupdate-video-modal/crupdate-video-modal.component';\r\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\r\nimport {CurrentUser} from '@common/auth/current-user';\r\nimport {Settings} from '@common/core/config/settings.service';\r\nimport {finalize} from 'rxjs/operators';\r\nimport {BehaviorSubject, Observable} from 'rxjs';\r\nimport {Toast} from '@common/core/ui/toast.service';\r\nimport {HttpErrors} from '@common/core/http/errors/http-errors.enum';\r\nimport {Title} from '../../models/title';\r\nimport {DatatableService} from '../../../common/datatable/datatable.service';\r\n\r\n@Component({\r\n    selector: 'video-index',\r\n    templateUrl: './video-index.component.html',\r\n    styleUrls: ['./video-index.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [DatatableService],\r\n})\r\nexport class VideoIndexComponent implements OnInit {\r\n    @Input() title: Title;\r\n    public videos$ = this.datatable.data$ as Observable<Video[]>;\r\n    public modifying$ = new BehaviorSubject<boolean>(false);\r\n\r\n    constructor(\r\n        public datatable: DatatableService<Video>,\r\n        private videos: VideoService,\r\n        private modal: Modal,\r\n        public currentUser: CurrentUser,\r\n        public settings: Settings,\r\n        public urls: TitleUrlsService,\r\n        private toast: Toast,\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        // will be paginating inside parent component, so should not update query\r\n        this.datatable.paginator.dontUpdateQueryParams = !!this.title;\r\n\r\n        // make sure table filter \"titleId\" is not overwritten with null from staticParams\r\n        const config = {uri: VideoService.BASE_URI, staticParams: {}};\r\n        if (this.title) {\r\n            config.staticParams = {titleId: this.title.id};\r\n        }\r\n        this.datatable = this.datatable.init(config);\r\n    }\r\n\r\n    public maybeDeleteSelectedVideos() {\r\n        this.datatable.confirmResourceDeletion('videos').subscribe(() => {\r\n            this.videos.delete(this.datatable.selectedRows$.value).subscribe(() => {\r\n                this.datatable.reset();\r\n            });\r\n        });\r\n    }\r\n\r\n    public openCrupdateVideoModal(video?: Video) {\r\n        this.datatable.openCrupdateResourceModal(\r\n            CrupdateVideoModalComponent,\r\n            {video, title: video ? video.title : this.title},\r\n        ).subscribe();\r\n    }\r\n\r\n    public toggleApprovedState(video: Video) {\r\n        this.modifying$.next(true);\r\n        const request = video.approved ?\r\n            this.videos.disapprove(video.id) :\r\n            this.videos.approve(video.id);\r\n        video.approved = !video.approved;\r\n        request\r\n            .pipe(finalize(() => this.modifying$.next(false)))\r\n            .subscribe(() => {}, () => {\r\n                this.toast.open(HttpErrors.Default);\r\n                video.approved = !video.approved;\r\n            });\r\n    }\r\n}\r\n","<ng-container *ngIf=\"user\">\n    <img [src]=\"user.avatar\" alt=\"\">\n    <div class=\"content\">\n        <div>{{user.display_name}}</div>\n        <div class=\"email secondary\">{{user.email}}</div>\n    </div>\n</ng-container>\n","import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {User} from '@common/core/types/models/User';\n\n@Component({\n    selector: 'user-column',\n    templateUrl: './user-column.component.html',\n    styleUrls: ['./user-column.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'class': 'column-with-image'},\n})\nexport class UserColumnComponent {\n    @Input() user: User;\n    @Input() showEmail = false;\n}\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\nimport {DatatableService} from '../datatable.service';\nimport {Subscription} from 'rxjs';\nimport {Model} from '../../core/types/models/model';\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {filter} from 'rxjs/operators';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {slugifyString} from '../../core/utils/slugify-string';\n\n@Component({\n    selector: '[table-sort-header]',\n    templateUrl: './table-sort-header.component.html',\n    styleUrls: ['./table-sort-header.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        'tabindex': '0',\n        '(click)': 'handleClick()',\n        '(keydown)': 'handleKeydown($event)',\n        '(mouseenter)': 'onMouseEnter()',\n        '(mouseleave)': 'onMouseLeave()',\n    }\n})\nexport class TableSortHeaderComponent implements OnInit, AfterViewInit, OnDestroy {\n    @ViewChild('columnName', {static: true}) columnName: ElementRef<HTMLElement>;\n    @Input('table-sort-header') public orderBy: string;\n\n    @HostBinding('class.active')\n    public orderDir: 'desc'|'asc'|null = null;\n\n    @HostBinding('class.sort-disabled') get sortDisabled() {\n        return this.datable.config?.disableSort;\n    }\n\n    private sortSub: Subscription;\n    public arrowVisible = false;\n    public arrowDirection: 'down'|'up' = 'down';\n\n    constructor(\n        public datable: DatatableService<Model>,\n        private cd: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private el: ElementRef<HTMLElement>,\n    ) {}\n\n    ngOnInit() {\n        // get column name from <ng-content> if none is explicitly provided\n        if ( ! this.orderBy) {\n            this.orderBy = slugifyString(this.columnName.nativeElement.textContent, '_');\n        }\n\n        // hide arrow when sort column is changed to different column\n        this.sortSub = this.datable.sort$\n            .pipe(filter(sort => (sort.orderBy !== this.orderBy)))\n            .subscribe(() => {\n                this.orderDir = null;\n                this.onMouseLeave();\n                this.cd.markForCheck();\n            });\n    }\n\n    ngAfterViewInit() {\n        // add '.cdk-keyboard-focused' when tabbing to other sort headers\n        this.focusMonitor.monitor(this.el).subscribe();\n    }\n\n    ngOnDestroy() {\n        this.sortSub.unsubscribe();\n        this.focusMonitor.stopMonitoring(this.el);\n    }\n\n    public changeSort() {\n        this.datable.sort$.next({\n            orderBy: this.orderBy,\n            orderDir: this.getDirection(this.orderDir),\n        });\n    }\n\n    private getDirection(current: string) {\n        switch (current) {\n            case 'asc':\n                this.arrowVisible = false;\n                return this.orderDir = null;\n            case 'desc':\n                this.arrowVisible = true;\n                this.arrowDirection = 'up';\n                return this.orderDir = 'asc';\n            default:\n                this.arrowVisible = true;\n                this.arrowDirection = 'down';\n                return this.orderDir = 'desc';\n        }\n    }\n\n    public onMouseEnter() {\n        if ( ! this.datable.config?.disableSort) {\n            this.arrowVisible = true;\n        }\n    }\n\n    public onMouseLeave() {\n        this.arrowVisible = false;\n        if ( ! this.orderDir) {\n            this.arrowDirection = 'down';\n        }\n    }\n\n    public handleClick() {\n        if ( ! this.datable.config?.disableSort) {\n            this.changeSort();\n        }\n    }\n\n    public handleKeydown(e: KeyboardEvent) {\n        if ( !this.datable.config?.disableSort && (e.keyCode === SPACE || e.keyCode === ENTER)) {\n            e.preventDefault();\n            this.changeSort();\n        }\n    }\n}\n","<span class=\"text\" #columnName>\n    <ng-content></ng-content>\n</span>\n<span class=\"icon-wrapper\" [ngClass]=\"arrowDirection\">\n    <mat-icon svgIcon=\"arrow-downward\" class=\"sort-icon\" [class.hint-visible]=\"arrowVisible\"></mat-icon>\n</span>\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {DatatableService} from '../datatable.service';\nimport {Subscription} from 'rxjs';\nimport {Model} from '../../core/types/models/model';\n\n@Component({\n    selector: '[table-body-checkbox]',\n    template: `\n        <mat-checkbox (click)=\"$event.stopPropagation()\"\n                      (change)=\"$event ? toggleRow(rowId) : null\"\n                      [checked]=\"isRowSelected(rowId)\">\n        </mat-checkbox>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'class': 'table-checkbox'}\n})\nexport class TableBodyCheckboxComponent implements OnInit, OnDestroy {\n    @Input('table-body-checkbox') rowId: number;\n    private changeRef: Subscription;\n\n    constructor(\n        public datatable: DatatableService<Model>,\n        private cd: ChangeDetectorRef,\n    ) {}\n\n    ngOnInit() {\n        this.changeRef = this.datatable.selectedRows$.subscribe(value => {\n            this.cd.markForCheck();\n        });\n    }\n\n    ngOnDestroy() {\n        this.changeRef.unsubscribe();\n    }\n\n    public isRowSelected(id: number): boolean {\n        return this.datatable.selectedRows$.value.indexOf(id) > -1;\n    }\n\n    public toggleRow(id: number) {\n        if (this.isRowSelected(id)) {\n            const array = this.datatable.selectedRows$.value.slice();\n            const i = this.datatable.selectedRows$.value.indexOf(id);\n            array.splice(i, 1);\n            this.datatable.selectedRows$.next(array);\n        } else {\n            this.datatable.selectedRows$.next(\n                [...this.datatable.selectedRows$.value, id]\n            );\n        }\n    }\n}\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {DatatableService} from '../datatable.service';\nimport {Subscription} from 'rxjs';\nimport {filter, map} from 'rxjs/operators';\n\n@Component({\n    selector: 'datatable-footer',\n    templateUrl: './datatable-footer.component.html',\n    styleUrls: ['./datatable-footer.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class DatatableFooterComponent implements OnInit, OnDestroy {\n    @Input() hidePerPage = false;\n    public perPageControl = new FormControl(15);\n    public from: number;\n    public to: number;\n    public totalRecords: number;\n    public havePrevious: boolean;\n    public haveNext: boolean;\n    private changeRef: Subscription;\n\n    constructor(\n        public datable: DatatableService<any>,\n        private cd: ChangeDetectorRef,\n    ) {}\n\n    ngOnInit() {\n        this.changeRef = this.datable.paginator.response$\n            .pipe(filter(r => !!r?.pagination), map(r => r.pagination))\n            .subscribe(pagination => {\n                this.to = pagination.per_page * pagination.current_page;\n                this.from = (this.to - pagination.per_page) || 1;\n                this.totalRecords = pagination.total;\n                this.havePrevious = pagination.current_page > 1;\n                this.haveNext = pagination.current_page < pagination.last_page;\n                this.perPageControl.setValue(parseInt('' + pagination.per_page), {emitEvent: false});\n                this.cd.markForCheck();\n            });\n\n        this.perPageControl.valueChanges\n            .subscribe(perPage => {\n                this.datable.paginator.changePerPage(perPage);\n            });\n    }\n\n    ngOnDestroy() {\n        this.changeRef.unsubscribe();\n        this.datable.destroy();\n    }\n\n    public previousPage() {\n        this.datable.paginator.previousPage();\n    }\n\n    public nextPage() {\n        this.datable.paginator.nextPage();\n    }\n}\n","<div class=\"page-size\" *ngIf=\"!hidePerPage\">\n    <div class=\"page-size-label\" trans>Items per page</div>\n    <div class=\"input-container\">\n        <select class=\"page-size-input\" [formControl]=\"perPageControl\">\n            <option [ngValue]=\"10\">10</option>\n            <option [ngValue]=\"15\">15</option>\n            <option [ngValue]=\"20\">20</option>\n            <option [ngValue]=\"50\">50</option>\n            <option [ngValue]=\"100\">100</option>\n        </select>\n    </div>\n</div>\n<div class=\"range-actions\">\n    <div class=\"range-label\" *ngIf=\"from && to && totalRecords\">\n        {{from}} - {{to}} {{'of' | trans}} {{totalRecords}}\n    </div>\n    <button type=\"button\" [disabled]=\"!havePrevious || (datable.paginator.loading$ | async)\" class=\"range-button\" (click)=\"previousPage()\" mat-icon-button>\n        <mat-icon svgIcon=\"chevron-left\"></mat-icon>\n    </button>\n    <button type=\"button\" [disabled]=\"!haveNext || (datable.paginator.loading$ | async)\" class=\"range-button\" (click)=\"nextPage()\" mat-icon-button>\n        <mat-icon svgIcon=\"chevron-right\"></mat-icon>\n    </button>\n</div>\n"]}